[
  {
    "name": "System",
    "prefix": "System",
    "storage": [
      {
        "name": "Account",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "frame_system:AccountInfo",
            "keys_id": 0,
            "value_id": 3
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
        "docs": [
          " The full account information for a particular account ID."
        ]
      },
      {
        "name": "ExtrinsicCount",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Total extrinsics count for the current block."
        ]
      },
      {
        "name": "BlockWeight",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_support:dispatch:PerDispatchClass@8",
          "PlainTypeValue": 8
        },
        "fallback": "0x000000000000",
        "docs": [
          " The current weight for the block."
        ]
      },
      {
        "name": "AllExtrinsicsLen",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Total length (in bytes) for all extrinsics put together, for the current block."
        ]
      },
      {
        "name": "BlockHash",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "H256",
            "keys_id": 4,
            "value_id": 12
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Map of block numbers to block hashes."
        ]
      },
      {
        "name": "ExtrinsicData",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 4,
            "value_id": 13
          }
        },
        "fallback": "0x00",
        "docs": [
          " Extrinsics data for the current block (maps an extrinsic's index to its data)."
        ]
      },
      {
        "name": "Number",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The current block number being processed. Set by `execute_block`."
        ]
      },
      {
        "name": "ParentHash",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 12
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Hash of the previous block."
        ]
      },
      {
        "name": "Digest",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<sp_runtime:generic:digest:DigestItem>",
          "PlainTypeValue": 14
        },
        "fallback": "0x00",
        "docs": [
          " Digest of the current block, also part of the block header."
        ]
      },
      {
        "name": "Events",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<frame_system:EventRecord>",
          "PlainTypeValue": 18
        },
        "fallback": "0x00",
        "docs": [
          " Events deposited for the current block.",
          "",
          " NOTE: The item is unbound and should therefore never be read on chain.",
          " It could otherwise inflate the PoV size of a block.",
          "",
          " Events have a large in-memory size. Box the events to not go out-of-memory",
          " just in case someone still reads them from within the runtime."
        ]
      },
      {
        "name": "EventCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of events in the `Events<T>` list."
        ]
      },
      {
        "name": "EventTopics",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Vec<Tuple:U32U32>",
            "keys_id": 12,
            "value_id": 154
          }
        },
        "fallback": "0x00",
        "docs": [
          " Mapping between a topic (represented by T::Hash) and a vector of indexes",
          " of events in the `<Events<T>>` list.",
          "",
          " All topic vectors have deterministic storage locations depending on the topic. This",
          " allows light-clients to leverage the changes trie storage tracking mechanism and",
          " in case of changes fetch the list of events of interest.",
          "",
          " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
          " the `EventIndex` then in case if the topic has the same contents on the next block",
          " no notification will be triggered thus the event might be lost."
        ]
      },
      {
        "name": "LastRuntimeUpgrade",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:LastRuntimeUpgradeInfo",
          "PlainTypeValue": 156
        },
        "fallback": "0x00",
        "docs": [
          " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
        ]
      },
      {
        "name": "UpgradedToU32RefCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 30
        },
        "fallback": "0x00",
        "docs": [
          " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
        ]
      },
      {
        "name": "UpgradedToTripleRefCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 30
        },
        "fallback": "0x00",
        "docs": [
          " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
          " (default) if not."
        ]
      },
      {
        "name": "ExecutionPhase",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:Phase",
          "PlainTypeValue": 152
        },
        "fallback": "0x00",
        "docs": [
          " The execution phase of the block."
        ]
      },
      {
        "name": "AuthorizedUpgrade",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:CodeUpgradeAuthorization",
          "PlainTypeValue": 158
        },
        "fallback": "0x00",
        "docs": [
          " `Some` if a code upgrade has been authorized."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0000",
        "name": "remark",
        "docs": [
          "See [`Pallet::remark`]."
        ],
        "args": [
          {
            "name": "remark",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0001",
        "name": "set_heap_pages",
        "docs": [
          "See [`Pallet::set_heap_pages`]."
        ],
        "args": [
          {
            "name": "pages",
            "type": "U64",
            "type_name": "u64"
          }
        ]
      },
      {
        "lookup": "0002",
        "name": "set_code",
        "docs": [
          "See [`Pallet::set_code`]."
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0003",
        "name": "set_code_without_checks",
        "docs": [
          "See [`Pallet::set_code_without_checks`]."
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0004",
        "name": "set_storage",
        "docs": [
          "See [`Pallet::set_storage`]."
        ],
        "args": [
          {
            "name": "items",
            "type": "Vec<Tuple:Vec<U8>Vec<U8>>",
            "type_name": "Vec<KeyValue>"
          }
        ]
      },
      {
        "lookup": "0005",
        "name": "kill_storage",
        "docs": [
          "See [`Pallet::kill_storage`]."
        ],
        "args": [
          {
            "name": "keys",
            "type": "Vec<Vec<U8>>",
            "type_name": "Vec<Key>"
          }
        ]
      },
      {
        "lookup": "0006",
        "name": "kill_prefix",
        "docs": [
          "See [`Pallet::kill_prefix`]."
        ],
        "args": [
          {
            "name": "prefix",
            "type": "Vec<U8>",
            "type_name": "Key"
          },
          {
            "name": "subkeys",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "0007",
        "name": "remark_with_event",
        "docs": [
          "See [`Pallet::remark_with_event`]."
        ],
        "args": [
          {
            "name": "remark",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0009",
        "name": "authorize_upgrade",
        "docs": [
          "See [`Pallet::authorize_upgrade`]."
        ],
        "args": [
          {
            "name": "code_hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "000a",
        "name": "authorize_upgrade_without_checks",
        "docs": [
          "See [`Pallet::authorize_upgrade_without_checks`]."
        ],
        "args": [
          {
            "name": "code_hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "000b",
        "name": "apply_authorized_upgrade",
        "docs": [
          "See [`Pallet::apply_authorized_upgrade`]."
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 159
    },
    "events": [
      {
        "lookup": "0000",
        "name": "ExtrinsicSuccess",
        "docs": [
          "An extrinsic completed successfully."
        ],
        "args": [
          "frame_support:dispatch:DispatchInfo"
        ],
        "args_name": [
          "dispatch_info"
        ],
        "args_type_name": [
          "DispatchInfo"
        ]
      },
      {
        "lookup": "0001",
        "name": "ExtrinsicFailed",
        "docs": [
          "An extrinsic failed."
        ],
        "args": [
          "sp_runtime:DispatchError",
          "frame_support:dispatch:DispatchInfo"
        ],
        "args_name": [
          "dispatch_error",
          "dispatch_info"
        ],
        "args_type_name": [
          "DispatchError",
          "DispatchInfo"
        ]
      },
      {
        "lookup": "0002",
        "name": "CodeUpdated",
        "docs": [
          "`:code` was updated."
        ],
        "args": null
      },
      {
        "lookup": "0003",
        "name": "NewAccount",
        "docs": [
          "A new account was created."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0004",
        "name": "KilledAccount",
        "docs": [
          "An account was reaped."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0005",
        "name": "Remarked",
        "docs": [
          "On on-chain remark happened."
        ],
        "args": [
          "AccountId",
          "H256"
        ],
        "args_name": [
          "sender",
          "hash"
        ],
        "args_type_name": [
          "AccountId",
          "Hash"
        ]
      },
      {
        "lookup": "0006",
        "name": "UpgradeAuthorized",
        "docs": [
          "An upgrade was authorized."
        ],
        "args": [
          "H256",
          "Bool"
        ],
        "args_name": [
          "code_hash",
          "check_version"
        ],
        "args_type_name": [
          "Hash",
          "bool"
        ]
      }
    ],
    "events_value": {
      "type": 21
    },
    "constants": [
      {
        "name": "BlockWeights",
        "type": "frame_system:limits:BlockWeights",
        "type_value": 163,
        "constants_value": "0700f2052a0100070088526a74020040010265cd1d000107c0d22c76510200e000010700e6bd4f570200f0000100000265cd1d000107c074c1906e0200300101070088526a7402004001010700a2941a1d020050000265cd1d00000000",
        "docs": [
          " Block & extrinsics weights: base values and limits."
        ]
      },
      {
        "name": "BlockLength",
        "type": "frame_support:dispatch:PerDispatchClass@168",
        "type_value": 167,
        "constants_value": "00003c000000500000005000",
        "docs": [
          " The maximum length of a block (in bytes)."
        ]
      },
      {
        "name": "BlockHashCount",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00100000",
        "docs": [
          " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
        ]
      },
      {
        "name": "DbWeight",
        "type": "sp_weights:RuntimeDbWeight",
        "type_value": 169,
        "constants_value": "40787d010000000000e1f50500000000",
        "docs": [
          " The weight of runtime database operations the runtime can invoke."
        ]
      },
      {
        "name": "Version",
        "type": "sp_version:RuntimeVersion",
        "type_value": 170,
        "constants_value": "2473746174656d696e742473746174656d696e7401000000104a0f00000000003cdd718d5cc53262d401000000d7bdd8a272ca0d6501000000df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000f3ff14d5ab52705903000000de92b8a0426b9bf602000000ea93e3f16f3d696202000000fbc577b9d747efd6010000008a8047a53a8277ec010000000e00000000",
        "docs": [
          " Get the chain's current version."
        ]
      },
      {
        "name": "SS58Prefix",
        "type": "U16",
        "type_value": 129,
        "constants_value": "0000",
        "docs": [
          " The designated SS58 prefix of this chain.",
          "",
          " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
          " that the runtime should know about the prefix in order to make use of it as",
          " an identifier of the chain."
        ]
      }
    ],
    "errors": [
      {
        "name": "InvalidSpecName",
        "doc": [
          "The name of specification does not match between the current runtime",
          "and the new runtime."
        ]
      },
      {
        "name": "SpecVersionNeedsToIncrease",
        "doc": [
          "The specification version is not allowed to decrease between the current runtime",
          "and the new runtime."
        ]
      },
      {
        "name": "FailedToExtractRuntimeVersion",
        "doc": [
          "Failed to extract the runtime version from the new runtime.",
          "",
          "Either calling `Core_version` or decoding `RuntimeVersion` failed."
        ]
      },
      {
        "name": "NonDefaultComposite",
        "doc": [
          "Suicide called when the account has non-default composite data."
        ]
      },
      {
        "name": "NonZeroRefCount",
        "doc": [
          "There is a non-zero reference count preventing the account from being purged."
        ]
      },
      {
        "name": "CallFiltered",
        "doc": [
          "The origin filter prevent the call to be dispatched."
        ]
      },
      {
        "name": "NothingAuthorized",
        "doc": [
          "No upgrade authorized."
        ]
      },
      {
        "name": "Unauthorized",
        "doc": [
          "The submitted code is not authorized."
        ]
      }
    ],
    "errors_value": {
      "type": 174
    },
    "index": 0
  },
  {
    "name": "ParachainSystem",
    "prefix": "ParachainSystem",
    "storage": [
      {
        "name": "UnincludedSegment",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<cumulus_pallet_parachain_system:unincluded_segment:Ancestor>",
          "PlainTypeValue": 175
        },
        "fallback": "0x00",
        "docs": [
          " Latest included block descendants the runtime accepted. In other words, these are",
          " ancestors of the currently executing block which have not been included in the observed",
          " relay-chain state.",
          "",
          " The segment length is limited by the capacity returned from the [`ConsensusHook`] configured",
          " in the pallet."
        ]
      },
      {
        "name": "AggregatedUnincludedSegment",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_parachain_system:unincluded_segment:SegmentTracker",
          "PlainTypeValue": 185
        },
        "fallback": "0x00",
        "docs": [
          " Storage field that keeps track of bandwidth used by the unincluded segment along with the",
          " latest HRMP watermark. Used for limiting the acceptance of new blocks with",
          " respect to relay chain constraints."
        ]
      },
      {
        "name": "PendingValidationCode",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 13
        },
        "fallback": "0x00",
        "docs": [
          " In case of a scheduled upgrade, this storage field contains the validation code to be",
          " applied.",
          "",
          " As soon as the relay chain gives us the go-ahead signal, we will overwrite the",
          " [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process",
          " with the new validation code. This concludes the upgrade process."
        ]
      },
      {
        "name": "NewValidationCode",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 13
        },
        "fallback": "0x00",
        "docs": [
          " Validation code that is set by the parachain and is to be communicated to collator and",
          " consequently the relay-chain.",
          "",
          " This will be cleared in `on_initialize` of each new block if no other pallet already set",
          " the value."
        ]
      },
      {
        "name": "ValidationData",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "polkadot_primitives:v6:PersistedValidationData",
          "PlainTypeValue": 186
        },
        "fallback": "0x00",
        "docs": [
          " The [`PersistedValidationData`] set for this block.",
          " This value is expected to be set only once per block and it's never stored",
          " in the trie."
        ]
      },
      {
        "name": "DidSetValidationCode",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 30
        },
        "fallback": "0x00",
        "docs": [
          " Were the validation data set to notify the relay chain?"
        ]
      },
      {
        "name": "LastRelayChainBlockNumber",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The relay chain block number associated with the last parachain block.",
          "",
          " This is updated in `on_finalize`."
        ]
      },
      {
        "name": "UpgradeRestrictionSignal",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "option<polkadot_primitives:v6:UpgradeRestriction>",
          "PlainTypeValue": 188
        },
        "fallback": "0x00",
        "docs": [
          " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
          " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
          " candidate will be invalid.",
          "",
          " This storage item is a mirror of the corresponding value for the current parachain from the",
          " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
          " set after the inherent."
        ]
      },
      {
        "name": "UpgradeGoAhead",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "option<polkadot_primitives:v6:UpgradeGoAhead>",
          "PlainTypeValue": 183
        },
        "fallback": "0x00",
        "docs": [
          " Optional upgrade go-ahead signal from the relay-chain.",
          "",
          " This storage item is a mirror of the corresponding value for the current parachain from the",
          " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
          " set after the inherent."
        ]
      },
      {
        "name": "RelayStateProof",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 190
        },
        "fallback": "0x00",
        "docs": [
          " The state proof for the last relay parent block.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "RelevantMessagingState",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_parachain_system:relay_state_snapshot:MessagingStateSnapshot",
          "PlainTypeValue": 192
        },
        "fallback": "0x00",
        "docs": [
          " The snapshot of some state related to messaging relevant to the current parachain as per",
          " the relay parent.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "HostConfiguration",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "polkadot_primitives:v6:AbridgedHostConfiguration",
          "PlainTypeValue": 197
        },
        "fallback": "0x00",
        "docs": [
          " The parachain host configuration that was obtained from the relay parent.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "LastDmqMqcHead",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 199
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The last downward message queue chain head we have observed.",
          "",
          " This value is loaded before and saved after processing inbound downward messages carried",
          " by the system inherent."
        ]
      },
      {
        "name": "LastHrmpMqcHeads",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:U32H256>",
          "PlainTypeValue": 200
        },
        "fallback": "0x00",
        "docs": [
          " The message queue chain heads we have observed per each channel incoming channel.",
          "",
          " This value is loaded before and saved after processing inbound downward messages carried",
          " by the system inherent."
        ]
      },
      {
        "name": "ProcessedDownwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Number of downward messages processed in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "HrmpWatermark",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " HRMP watermark that was set in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "HrmpOutboundMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<polkadot_core_primitives:OutboundHrmpMessage>",
          "PlainTypeValue": 203
        },
        "fallback": "0x00",
        "docs": [
          " HRMP messages that were sent in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "UpwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 162
        },
        "fallback": "0x00",
        "docs": [
          " Upward messages that were sent in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "PendingUpwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 162
        },
        "fallback": "0x00",
        "docs": [
          " Upward messages that are still pending and not yet send to the relay chain."
        ]
      },
      {
        "name": "UpwardDeliveryFeeFactor",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 205
        },
        "fallback": "0x000064a7b3b6e00d0000000000000000",
        "docs": [
          " The factor to multiply the base delivery fee by for UMP."
        ]
      },
      {
        "name": "AnnouncedHrmpMessagesPerCandidate",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
          " announcing the weight of `on_initialize` and `on_finalize`."
        ]
      },
      {
        "name": "ReservedXcmpWeightOverride",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "sp_weights:weight_v2:Weight",
          "PlainTypeValue": 9
        },
        "fallback": "0x00",
        "docs": [
          " The weight we reserve at the beginning of the block for processing XCMP messages. This",
          " overrides the amount set in the Config trait."
        ]
      },
      {
        "name": "ReservedDmpWeightOverride",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "sp_weights:weight_v2:Weight",
          "PlainTypeValue": 9
        },
        "fallback": "0x00",
        "docs": [
          " The weight we reserve at the beginning of the block for processing DMP messages. This",
          " overrides the amount set in the Config trait."
        ]
      },
      {
        "name": "CustomValidationHeadData",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 13
        },
        "fallback": "0x00",
        "docs": [
          " A custom head data that should be returned as result of `validate_block`.",
          "",
          " See `Pallet::set_custom_validation_head_data` for more information."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0100",
        "name": "set_validation_data",
        "docs": [
          "See [`Pallet::set_validation_data`]."
        ],
        "args": [
          {
            "name": "data",
            "type": "cumulus_primitives_parachain_inherent:ParachainInherentData",
            "type_name": "ParachainInherentData"
          }
        ]
      },
      {
        "lookup": "0101",
        "name": "sudo_send_upward_message",
        "docs": [
          "See [`Pallet::sudo_send_upward_message`]."
        ],
        "args": [
          {
            "name": "message",
            "type": "Vec<U8>",
            "type_name": "UpwardMessage"
          }
        ]
      },
      {
        "lookup": "0102",
        "name": "authorize_upgrade",
        "docs": [
          "See [`Pallet::authorize_upgrade`]."
        ],
        "args": [
          {
            "name": "code_hash",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "check_version",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "0103",
        "name": "enact_authorized_upgrade",
        "docs": [
          "See [`Pallet::enact_authorized_upgrade`]."
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 206
    },
    "events": [
      {
        "lookup": "0100",
        "name": "ValidationFunctionStored",
        "docs": [
          "The validation function has been scheduled to apply."
        ],
        "args": null
      },
      {
        "lookup": "0101",
        "name": "ValidationFunctionApplied",
        "docs": [
          "The validation function was applied as of the contained relay chain block number."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "relay_chain_block_num"
        ],
        "args_type_name": [
          "RelayChainBlockNumber"
        ]
      },
      {
        "lookup": "0102",
        "name": "ValidationFunctionDiscarded",
        "docs": [
          "The relay-chain aborted the upgrade process."
        ],
        "args": null
      },
      {
        "lookup": "0103",
        "name": "DownwardMessagesReceived",
        "docs": [
          "Some downward messages have been received and will be processed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "count"
        ],
        "args_type_name": [
          "u32"
        ]
      },
      {
        "lookup": "0104",
        "name": "DownwardMessagesProcessed",
        "docs": [
          "Downward messages were processed using the given weight."
        ],
        "args": [
          "sp_weights:weight_v2:Weight",
          "H256"
        ],
        "args_name": [
          "weight_used",
          "dmq_head"
        ],
        "args_type_name": [
          "Weight",
          "relay_chain::Hash"
        ]
      },
      {
        "lookup": "0105",
        "name": "UpwardMessageSent",
        "docs": [
          "An upward message was sent to the relay chain."
        ],
        "args": [
          "option<[U8; 32]>"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "Option<XcmHash>"
        ]
      }
    ],
    "events_value": {
      "type": 31
    },
    "errors": [
      {
        "name": "OverlappingUpgrades",
        "doc": [
          "Attempt to upgrade validation function while existing upgrade pending."
        ]
      },
      {
        "name": "ProhibitedByPolkadot",
        "doc": [
          "Polkadot currently prohibits this parachain from upgrading its validation function."
        ]
      },
      {
        "name": "TooBig",
        "doc": [
          "The supplied validation function has compiled into a blob larger than Polkadot is",
          "willing to run."
        ]
      },
      {
        "name": "ValidationDataNotAvailable",
        "doc": [
          "The inherent which supplies the validation data did not run this block."
        ]
      },
      {
        "name": "HostConfigurationNotAvailable",
        "doc": [
          "The inherent which supplies the host configuration did not run this block."
        ]
      },
      {
        "name": "NotScheduled",
        "doc": [
          "No validation function upgrade is currently scheduled."
        ]
      },
      {
        "name": "NothingAuthorized",
        "doc": [
          "No code upgrade has been authorized."
        ]
      },
      {
        "name": "Unauthorized",
        "doc": [
          "The given code upgrade has not been authorized."
        ]
      }
    ],
    "errors_value": {
      "type": 215
    },
    "index": 1
  },
  {
    "name": "Timestamp",
    "prefix": "Timestamp",
    "storage": [
      {
        "name": "Now",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 11
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The current time for the current block."
        ]
      },
      {
        "name": "DidUpdate",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 30
        },
        "fallback": "0x00",
        "docs": [
          " Whether the timestamp has been updated in this block.",
          "",
          " This value is updated to `true` upon successful submission of a timestamp by a node.",
          " It is then checked at the end of each block execution in the `on_finalize` hook."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0300",
        "name": "set",
        "docs": [
          "See [`Pallet::set`]."
        ],
        "args": [
          {
            "name": "now",
            "type": "compact<U64>",
            "type_name": "Moment"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 216
    },
    "constants": [
      {
        "name": "MinimumPeriod",
        "type": "U64",
        "type_value": 11,
        "constants_value": "7017000000000000",
        "docs": [
          " The minimum period between blocks.",
          "",
          " Be aware that this is different to the *expected* period that the block production",
          " apparatus provides. Your chosen consensus system will generally work with this to",
          " determine a sensible block time. For example, in the Aura pallet it will be double this",
          " period on default settings."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 3
  },
  {
    "name": "ParachainInfo",
    "prefix": "ParachainInfo",
    "storage": [
      {
        "name": "ParachainId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 120
        },
        "fallback": "0x64000000",
        "docs": null
      }
    ],
    "calls_value": {
      "type": 217
    },
    "errors": null,
    "errors_value": null,
    "index": 4
  },
  {
    "name": "Balances",
    "prefix": "Balances",
    "storage": [
      {
        "name": "TotalIssuance",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The total units issued in the system."
        ]
      },
      {
        "name": "InactiveIssuance",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The total units of outstanding deactivated balance in the system."
        ]
      },
      {
        "name": "Account",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "pallet_balances:types:AccountData",
            "keys_id": 0,
            "value_id": 5
          }
        },
        "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
        "docs": [
          " The Balances pallet example of storing the balance of an account.",
          "",
          " # Example",
          "",
          " ```nocompile",
          "  impl pallet_balances::Config for Runtime {",
          "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
          "  }",
          " ```",
          "",
          " You can also store the balance of an account in the `System` pallet.",
          "",
          " # Example",
          "",
          " ```nocompile",
          "  impl pallet_balances::Config for Runtime {",
          "   type AccountStore = System",
          "  }",
          " ```",
          "",
          " But this comes with tradeoffs, storing account balances in the system pallet stores",
          " `frame_system` data alongside the account data contrary to storing account balances in the",
          " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
          " NOTE: This is only used in the case that this pallet is used to store balances."
        ]
      },
      {
        "name": "Locks",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:types:BalanceLock>",
            "keys_id": 0,
            "value_id": 218
          }
        },
        "fallback": "0x00",
        "docs": [
          " Any liquidity locks on some account balances.",
          " NOTE: Should only be accessed when setting, changing and freeing a lock."
        ]
      },
      {
        "name": "Reserves",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:types:ReserveData>",
            "keys_id": 0,
            "value_id": 222
          }
        },
        "fallback": "0x00",
        "docs": [
          " Named reserves on some account balances."
        ]
      },
      {
        "name": "Holds",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:types:IdAmount@226>",
            "keys_id": 0,
            "value_id": 225
          }
        },
        "fallback": "0x00",
        "docs": [
          " Holds on account balances."
        ]
      },
      {
        "name": "Freezes",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:types:IdAmount@230>",
            "keys_id": 0,
            "value_id": 229
          }
        },
        "fallback": "0x00",
        "docs": [
          " Freeze locks on account balances."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0a00",
        "name": "transfer_allow_death",
        "docs": [
          "See [`Pallet::transfer_allow_death`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a02",
        "name": "force_transfer",
        "docs": [
          "See [`Pallet::force_transfer`]."
        ],
        "args": [
          {
            "name": "source",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a03",
        "name": "transfer_keep_alive",
        "docs": [
          "See [`Pallet::transfer_keep_alive`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a04",
        "name": "transfer_all",
        "docs": [
          "See [`Pallet::transfer_all`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "keep_alive",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "0a05",
        "name": "force_unreserve",
        "docs": [
          "See [`Pallet::force_unreserve`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a06",
        "name": "upgrade_accounts",
        "docs": [
          "See [`Pallet::upgrade_accounts`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          }
        ]
      },
      {
        "lookup": "0a08",
        "name": "force_set_balance",
        "docs": [
          "See [`Pallet::force_set_balance`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "new_free",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a09",
        "name": "force_adjust_total_issuance",
        "docs": [
          "See [`Pallet::force_adjust_total_issuance`]."
        ],
        "args": [
          {
            "name": "direction",
            "type": "pallet_balances:types:AdjustmentDirection",
            "type_name": "AdjustmentDirection"
          },
          {
            "name": "delta",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 232
    },
    "events": [
      {
        "lookup": "0a00",
        "name": "Endowed",
        "docs": [
          "An account was created with some free balance."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account",
          "free_balance"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a01",
        "name": "DustLost",
        "docs": [
          "An account was removed whose balance was non-zero but below ExistentialDeposit,",
          "resulting in an outright loss."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a02",
        "name": "Transfer",
        "docs": [
          "Transfer succeeded."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a03",
        "name": "BalanceSet",
        "docs": [
          "A balance was set by root."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "free"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a04",
        "name": "Reserved",
        "docs": [
          "Some balance was reserved (moved from free to reserved)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a05",
        "name": "Unreserved",
        "docs": [
          "Some balance was unreserved (moved from reserved to free)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a06",
        "name": "ReserveRepatriated",
        "docs": [
          "Some balance was moved from the reserve of the first account to the second account.",
          "Final argument indicates the destination balance type."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128",
          "frame_support:traits:tokens:misc:BalanceStatus"
        ],
        "args_name": [
          "from",
          "to",
          "amount",
          "destination_status"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "Balance",
          "Status"
        ]
      },
      {
        "lookup": "0a07",
        "name": "Deposit",
        "docs": [
          "Some amount was deposited (e.g. for transaction fees)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a08",
        "name": "Withdraw",
        "docs": [
          "Some amount was withdrawn from the account (e.g. for transaction fees)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a09",
        "name": "Slashed",
        "docs": [
          "Some amount was removed from the account (e.g. for misbehavior)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a0a",
        "name": "Minted",
        "docs": [
          "Some amount was minted into an account."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a0b",
        "name": "Burned",
        "docs": [
          "Some amount was burned from an account."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a0c",
        "name": "Suspended",
        "docs": [
          "Some amount was suspended from an account (it can be restored later)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a0d",
        "name": "Restored",
        "docs": [
          "Some amount was restored into an account."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a0e",
        "name": "Upgraded",
        "docs": [
          "An account was upgraded."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "who"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0a0f",
        "name": "Issued",
        "docs": [
          "Total issuance was increased by `amount`, creating a credit to be balanced."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "amount"
        ],
        "args_type_name": [
          "Balance"
        ]
      },
      {
        "lookup": "0a10",
        "name": "Rescinded",
        "docs": [
          "Total issuance was decreased by `amount`, creating a debt to be balanced."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "amount"
        ],
        "args_type_name": [
          "Balance"
        ]
      },
      {
        "lookup": "0a11",
        "name": "Locked",
        "docs": [
          "Some balance was locked."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a12",
        "name": "Unlocked",
        "docs": [
          "Some balance was unlocked."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a13",
        "name": "Frozen",
        "docs": [
          "Some balance was frozen."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a14",
        "name": "Thawed",
        "docs": [
          "Some balance was thawed."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a15",
        "name": "TotalIssuanceForced",
        "docs": [
          "The `TotalIssuance` was forcefully changed."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "old",
          "new"
        ],
        "args_type_name": [
          "Balance",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 33
    },
    "constants": [
      {
        "name": "ExistentialDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e1f505000000000000000000000000",
        "docs": [
          " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
          "",
          " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
          " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
          " In case you have multiple sources of provider references, you may also get unexpected",
          " behaviour if you set this to zero.",
          "",
          " Bottom line: Do yourself a favour and make it at least one!"
        ]
      },
      {
        "name": "MaxLocks",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of locks that should exist on an account.",
          " Not strictly enforced, but used for weight estimation."
        ]
      },
      {
        "name": "MaxReserves",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of named reserves that can exist on an account."
        ]
      },
      {
        "name": "MaxFreezes",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " The maximum number of individual freeze locks that can exist on an account at any time."
        ]
      }
    ],
    "errors": [
      {
        "name": "VestingBalance",
        "doc": [
          "Vesting balance too high to send value."
        ]
      },
      {
        "name": "LiquidityRestrictions",
        "doc": [
          "Account liquidity restrictions prevent withdrawal."
        ]
      },
      {
        "name": "InsufficientBalance",
        "doc": [
          "Balance too low to send value."
        ]
      },
      {
        "name": "ExistentialDeposit",
        "doc": [
          "Value too low to create account due to existential deposit."
        ]
      },
      {
        "name": "Expendability",
        "doc": [
          "Transfer/payment would kill account."
        ]
      },
      {
        "name": "ExistingVestingSchedule",
        "doc": [
          "A vesting schedule already exists for this account."
        ]
      },
      {
        "name": "DeadAccount",
        "doc": [
          "Beneficiary account must pre-exist."
        ]
      },
      {
        "name": "TooManyReserves",
        "doc": [
          "Number of named reserves exceed `MaxReserves`."
        ]
      },
      {
        "name": "TooManyHolds",
        "doc": [
          "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
        ]
      },
      {
        "name": "TooManyFreezes",
        "doc": [
          "Number of freezes exceed `MaxFreezes`."
        ]
      },
      {
        "name": "IssuanceDeactivated",
        "doc": [
          "The issuance cannot be modified since it is already deactivated."
        ]
      },
      {
        "name": "DeltaZero",
        "doc": [
          "The delta cannot be zero."
        ]
      }
    ],
    "errors_value": {
      "type": 236
    },
    "index": 10
  },
  {
    "name": "TransactionPayment",
    "prefix": "TransactionPayment",
    "storage": [
      {
        "name": "NextFeeMultiplier",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 205
        },
        "fallback": "0x000064a7b3b6e00d0000000000000000",
        "docs": null
      },
      {
        "name": "StorageVersion",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_transaction_payment:Releases",
          "PlainTypeValue": 237
        },
        "fallback": "0x00",
        "docs": null
      }
    ],
    "events": [
      {
        "lookup": "0b00",
        "name": "TransactionFeePaid",
        "docs": [
          "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
          "has been paid by `who`."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "actual_fee",
          "tip"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 35
    },
    "constants": [
      {
        "name": "OperationalFeeMultiplier",
        "type": "U8",
        "type_value": 2,
        "constants_value": "05",
        "docs": [
          " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
          " `priority`",
          "",
          " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
          " added to a tip component in regular `priority` calculations.",
          " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
          " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
          "",
          " ```rust,ignore",
          " // For `Normal`",
          " let priority = priority_calc(tip);",
          "",
          " // For `Operational`",
          " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
          " let priority = priority_calc(tip + virtual_tip);",
          " ```",
          "",
          " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
          " sent with the transaction. So, not only does the transaction get a priority bump based",
          " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
          " transactions."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 11
  },
  {
    "name": "AssetTxPayment",
    "prefix": "",
    "storage": null,
    "events": [
      {
        "lookup": "0d00",
        "name": "AssetTxFeePaid",
        "docs": [
          "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
          "has been paid by `who` in an asset `asset_id`."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128",
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "who",
          "actual_fee",
          "tip",
          "asset_id"
        ],
        "args_type_name": [
          "AccountId",
          "AssetBalanceOf",
          "BalanceOf",
          "ChargeAssetIdOf"
        ]
      },
      {
        "lookup": "0d01",
        "name": "AssetRefundFailed",
        "docs": [
          "A swap of the refund in native currency back to asset failed."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "native_amount_kept"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 36
    },
    "errors": null,
    "errors_value": null,
    "index": 13
  },
  {
    "name": "Authorship",
    "prefix": "Authorship",
    "storage": [
      {
        "name": "Author",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "AccountId",
          "PlainTypeValue": 0
        },
        "fallback": "0x00",
        "docs": [
          " Author of current block."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 20
  },
  {
    "name": "CollatorSelection",
    "prefix": "CollatorSelection",
    "storage": [
      {
        "name": "Invulnerables",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 238
        },
        "fallback": "0x00",
        "docs": [
          " The invulnerable, permissioned collators. This list must be sorted."
        ]
      },
      {
        "name": "CandidateList",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<pallet_collator_selection:pallet:CandidateInfo>",
          "PlainTypeValue": 239
        },
        "fallback": "0x00",
        "docs": [
          " The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be",
          " mutually exclusive.",
          "",
          " This list is sorted in ascending order by deposit and when the deposits are equal, the least",
          " recently updated is considered greater."
        ]
      },
      {
        "name": "LastAuthoredBlock",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U32",
            "keys_id": 0,
            "value_id": 4
          }
        },
        "fallback": "0x00000000",
        "docs": [
          " Last block authored by collator."
        ]
      },
      {
        "name": "DesiredCandidates",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Desired number of candidates.",
          "",
          " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
        ]
      },
      {
        "name": "CandidacyBond",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Fixed amount to deposit to become a collator.",
          "",
          " When a collator calls `leave_intent` they immediately receive the deposit back."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1500",
        "name": "set_invulnerables",
        "docs": [
          "See [`Pallet::set_invulnerables`]."
        ],
        "args": [
          {
            "name": "new",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          }
        ]
      },
      {
        "lookup": "1501",
        "name": "set_desired_candidates",
        "docs": [
          "See [`Pallet::set_desired_candidates`]."
        ],
        "args": [
          {
            "name": "max",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1502",
        "name": "set_candidacy_bond",
        "docs": [
          "See [`Pallet::set_candidacy_bond`]."
        ],
        "args": [
          {
            "name": "bond",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1503",
        "name": "register_as_candidate",
        "docs": [
          "See [`Pallet::register_as_candidate`]."
        ],
        "args": null
      },
      {
        "lookup": "1504",
        "name": "leave_intent",
        "docs": [
          "See [`Pallet::leave_intent`]."
        ],
        "args": null
      },
      {
        "lookup": "1505",
        "name": "add_invulnerable",
        "docs": [
          "See [`Pallet::add_invulnerable`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "1506",
        "name": "remove_invulnerable",
        "docs": [
          "See [`Pallet::remove_invulnerable`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "1507",
        "name": "update_bond",
        "docs": [
          "See [`Pallet::update_bond`]."
        ],
        "args": [
          {
            "name": "new_deposit",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1508",
        "name": "take_candidate_slot",
        "docs": [
          "See [`Pallet::take_candidate_slot`]."
        ],
        "args": [
          {
            "name": "deposit",
            "type": "U128",
            "type_name": "BalanceOf"
          },
          {
            "name": "target",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 242
    },
    "events": [
      {
        "lookup": "1500",
        "name": "NewInvulnerables",
        "docs": [
          "New Invulnerables were set."
        ],
        "args": [
          "Vec<AccountId>"
        ],
        "args_name": [
          "invulnerables"
        ],
        "args_type_name": [
          "Vec<AccountId>"
        ]
      },
      {
        "lookup": "1501",
        "name": "InvulnerableAdded",
        "docs": [
          "A new Invulnerable was added."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account_id"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "1502",
        "name": "InvulnerableRemoved",
        "docs": [
          "An Invulnerable was removed."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account_id"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "1503",
        "name": "NewDesiredCandidates",
        "docs": [
          "The number of desired candidates was set."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "desired_candidates"
        ],
        "args_type_name": [
          "u32"
        ]
      },
      {
        "lookup": "1504",
        "name": "NewCandidacyBond",
        "docs": [
          "The candidacy bond was set."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "bond_amount"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      },
      {
        "lookup": "1505",
        "name": "CandidateAdded",
        "docs": [
          "A new candidate joined."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account_id",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1506",
        "name": "CandidateBondUpdated",
        "docs": [
          "Bond of a candidate updated."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account_id",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1507",
        "name": "CandidateRemoved",
        "docs": [
          "A candidate was removed."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account_id"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "1508",
        "name": "CandidateReplaced",
        "docs": [
          "An account was replaced in the candidate list by another one."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "old",
          "new",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1509",
        "name": "InvalidInvulnerableSkipped",
        "docs": [
          "An account was unable to be added to the Invulnerables because they did not have keys",
          "registered. Other Invulnerables may have been set."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account_id"
        ],
        "args_type_name": [
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 47
    },
    "errors": [
      {
        "name": "TooManyCandidates",
        "doc": [
          "The pallet has too many candidates."
        ]
      },
      {
        "name": "TooFewEligibleCollators",
        "doc": [
          "Leaving would result in too few candidates."
        ]
      },
      {
        "name": "AlreadyCandidate",
        "doc": [
          "Account is already a candidate."
        ]
      },
      {
        "name": "NotCandidate",
        "doc": [
          "Account is not a candidate."
        ]
      },
      {
        "name": "TooManyInvulnerables",
        "doc": [
          "There are too many Invulnerables."
        ]
      },
      {
        "name": "AlreadyInvulnerable",
        "doc": [
          "Account is already an Invulnerable."
        ]
      },
      {
        "name": "NotInvulnerable",
        "doc": [
          "Account is not an Invulnerable."
        ]
      },
      {
        "name": "NoAssociatedValidatorId",
        "doc": [
          "Account has no associated validator ID."
        ]
      },
      {
        "name": "ValidatorNotRegistered",
        "doc": [
          "Validator ID is not yet registered."
        ]
      },
      {
        "name": "InsertToCandidateListFailed",
        "doc": [
          "Could not insert in the candidate list."
        ]
      },
      {
        "name": "RemoveFromCandidateListFailed",
        "doc": [
          "Could not remove from the candidate list."
        ]
      },
      {
        "name": "DepositTooLow",
        "doc": [
          "New deposit amount would be below the minimum candidacy bond."
        ]
      },
      {
        "name": "UpdateCandidateListFailed",
        "doc": [
          "Could not update the candidate list."
        ]
      },
      {
        "name": "InsufficientBond",
        "doc": [
          "Deposit amount is too low to take the target's slot in the candidate list."
        ]
      },
      {
        "name": "TargetIsNotCandidate",
        "doc": [
          "The target account to be replaced in the candidate list is not a candidate."
        ]
      },
      {
        "name": "IdenticalDeposit",
        "doc": [
          "The updated deposit amount is equal to the amount already reserved."
        ]
      },
      {
        "name": "InvalidUnreserve",
        "doc": [
          "Cannot lower candidacy bond while occupying a future collator slot in the list."
        ]
      }
    ],
    "errors_value": {
      "type": 243
    },
    "index": 21
  },
  {
    "name": "Session",
    "prefix": "Session",
    "storage": [
      {
        "name": "Validators",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 48
        },
        "fallback": "0x00",
        "docs": [
          " The current set of validators."
        ]
      },
      {
        "name": "CurrentIndex",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Current index of the session."
        ]
      },
      {
        "name": "QueuedChanged",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 30
        },
        "fallback": "0x00",
        "docs": [
          " True if the underlying economic identities or weighting behind the validators",
          " has changed in the queued validator set."
        ]
      },
      {
        "name": "QueuedKeys",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:AccountIdasset_hub_polkadot_runtime:SessionKeys>",
          "PlainTypeValue": 244
        },
        "fallback": "0x00",
        "docs": [
          " The queued keys for the next session. When the next session begins, these keys",
          " will be used to determine the validator's session keys."
        ]
      },
      {
        "name": "DisabledValidators",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U32>",
          "PlainTypeValue": 133
        },
        "fallback": "0x00",
        "docs": [
          " Indices of disabled validators.",
          "",
          " The vec is always kept sorted so that we can find whether a given validator is",
          " disabled using binary search. It gets cleared when `on_session_ending` returns",
          " a new set of identities."
        ]
      },
      {
        "name": "NextKeys",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "[U8; 32]",
            "keys_id": 0,
            "value_id": 246
          }
        },
        "fallback": "0x00",
        "docs": [
          " The next session keys for a validator."
        ]
      },
      {
        "name": "KeyOwner",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "Tuple:[U8; 4]Vec<U8>"
            ],
            "value": "AccountId",
            "keys_id": 249,
            "value_id": 0
          }
        },
        "fallback": "0x00",
        "docs": [
          " The owner of a key. The key is the `KeyTypeId` + the encoded key."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1600",
        "name": "set_keys",
        "docs": [
          "See [`Pallet::set_keys`]."
        ],
        "args": [
          {
            "name": "keys",
            "type": "[U8; 32]",
            "type_name": "Keys"
          },
          {
            "name": "proof",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "1601",
        "name": "purge_keys",
        "docs": [
          "See [`Pallet::purge_keys`]."
        ],
        "args": null
      }
    ],
    "calls_value": {
      "type": 251
    },
    "events": [
      {
        "lookup": "1600",
        "name": "NewSession",
        "docs": [
          "New session has happened. Note that the argument is the session index, not the",
          "block number as the type might suggest."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "session_index"
        ],
        "args_type_name": [
          "SessionIndex"
        ]
      }
    ],
    "events_value": {
      "type": 49
    },
    "errors": [
      {
        "name": "InvalidProof",
        "doc": [
          "Invalid ownership proof."
        ]
      },
      {
        "name": "NoAssociatedValidatorId",
        "doc": [
          "No associated validator ID for account."
        ]
      },
      {
        "name": "DuplicatedKey",
        "doc": [
          "Registered duplicate key."
        ]
      },
      {
        "name": "NoKeys",
        "doc": [
          "No keys are associated with this account."
        ]
      },
      {
        "name": "NoAccount",
        "doc": [
          "Key setting account is not live, so it's impossible to associate keys."
        ]
      }
    ],
    "errors_value": {
      "type": 252
    },
    "index": 22
  },
  {
    "name": "Aura",
    "prefix": "Aura",
    "storage": [
      {
        "name": "Authorities",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<[U8; 32]>",
          "PlainTypeValue": 253
        },
        "fallback": "0x00",
        "docs": [
          " The current authority set."
        ]
      },
      {
        "name": "CurrentSlot",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 255
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The current slot of this block.",
          "",
          " This will be set in `on_initialize`."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 23
  },
  {
    "name": "AuraExt",
    "prefix": "AuraExt",
    "storage": [
      {
        "name": "Authorities",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<[U8; 32]>",
          "PlainTypeValue": 253
        },
        "fallback": "0x00",
        "docs": [
          " Serves as cache for the authorities.",
          "",
          " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
          " but we require the old authorities to verify the seal when validating a PoV. This will",
          " always be updated to the latest AuRa authorities in `on_finalize`."
        ]
      },
      {
        "name": "SlotInfo",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Tuple:U64U32",
          "PlainTypeValue": 256
        },
        "fallback": "0x00",
        "docs": [
          " Current slot paired with a number of authored blocks.",
          "",
          " Updated on each block initialization."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 24
  },
  {
    "name": "XcmpQueue",
    "prefix": "XcmpQueue",
    "storage": [
      {
        "name": "InboundXcmpSuspended",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U32>",
          "PlainTypeValue": 257
        },
        "fallback": "0x00",
        "docs": [
          " The suspended inbound XCMP channels. All others are not suspended.",
          "",
          " This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per block",
          " to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached",
          " within the block and therefore only included once in the proof size.",
          "",
          " NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proof",
          " will be smaller."
        ]
      },
      {
        "name": "OutboundXcmpStatus",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<cumulus_pallet_xcmp_queue:OutboundChannelDetails>",
          "PlainTypeValue": 260
        },
        "fallback": "0x00",
        "docs": [
          " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
          " and last outbound message. If the two indices are equal, then it indicates an empty",
          " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
          " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
          " case of the need to send a high-priority signal message this block.",
          " The bool is true if there is a signal message waiting to be sent."
        ]
      },
      {
        "name": "OutboundXcmpMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "U32",
              "U16"
            ],
            "value": "Vec<U8>",
            "keys_id": 263,
            "value_id": 13
          }
        },
        "fallback": "0x00",
        "docs": [
          " The messages outbound in a given XCMP channel."
        ]
      },
      {
        "name": "SignalMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 120,
            "value_id": 13
          }
        },
        "fallback": "0x00",
        "docs": [
          " Any signal messages waiting to be sent."
        ]
      },
      {
        "name": "QueueConfig",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_xcmp_queue:QueueConfigData",
          "PlainTypeValue": 264
        },
        "fallback": "0x200000003000000008000000",
        "docs": [
          " The configuration which controls the dynamics of the outbound queue."
        ]
      },
      {
        "name": "QueueSuspended",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 30
        },
        "fallback": "0x00",
        "docs": [
          " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
        ]
      },
      {
        "name": "DeliveryFeeFactor",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U128",
            "keys_id": 120,
            "value_id": 205
          }
        },
        "fallback": "0x000064a7b3b6e00d0000000000000000",
        "docs": [
          " The factor to multiply the base delivery fee by."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1e01",
        "name": "suspend_xcm_execution",
        "docs": [
          "See [`Pallet::suspend_xcm_execution`]."
        ],
        "args": null
      },
      {
        "lookup": "1e02",
        "name": "resume_xcm_execution",
        "docs": [
          "See [`Pallet::resume_xcm_execution`]."
        ],
        "args": null
      },
      {
        "lookup": "1e03",
        "name": "update_suspend_threshold",
        "docs": [
          "See [`Pallet::update_suspend_threshold`]."
        ],
        "args": [
          {
            "name": "new",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1e04",
        "name": "update_drop_threshold",
        "docs": [
          "See [`Pallet::update_drop_threshold`]."
        ],
        "args": [
          {
            "name": "new",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1e05",
        "name": "update_resume_threshold",
        "docs": [
          "See [`Pallet::update_resume_threshold`]."
        ],
        "args": [
          {
            "name": "new",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 265
    },
    "events": [
      {
        "lookup": "1e00",
        "name": "XcmpMessageSent",
        "docs": [
          "An HRMP message was sent to a sibling parachain."
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "XcmHash"
        ]
      }
    ],
    "events_value": {
      "type": 50
    },
    "constants": [
      {
        "name": "MaxInboundSuspended",
        "type": "U32",
        "type_value": 4,
        "constants_value": "e8030000",
        "docs": [
          " The maximum number of inbound XCMP channels that can be suspended simultaneously.",
          "",
          " Any further channel suspensions will fail and messages may get dropped without further",
          " notice. Choosing a high value (1000) is okay; the trade-off that is described in",
          " [`InboundXcmpSuspended`] still applies at that scale."
        ]
      }
    ],
    "errors": [
      {
        "name": "BadQueueConfig",
        "doc": [
          "Setting the queue config failed since one of its values was invalid."
        ]
      },
      {
        "name": "AlreadySuspended",
        "doc": [
          "The execution is already suspended."
        ]
      },
      {
        "name": "AlreadyResumed",
        "doc": [
          "The execution is already resumed."
        ]
      }
    ],
    "errors_value": {
      "type": 266
    },
    "index": 30
  },
  {
    "name": "PolkadotXcm",
    "prefix": "PolkadotXcm",
    "storage": [
      {
        "name": "QueryCounter",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 11
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The latest available query index."
        ]
      },
      {
        "name": "Queries",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U64"
            ],
            "value": "pallet_xcm:pallet:QueryStatus",
            "keys_id": 11,
            "value_id": 267
          }
        },
        "fallback": "0x00",
        "docs": [
          " The ongoing queries."
        ]
      },
      {
        "name": "AssetTraps",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "U32",
            "keys_id": 12,
            "value_id": 4
          }
        },
        "fallback": "0x00000000",
        "docs": [
          " The existing asset traps.",
          "",
          " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of",
          " times this pair has been trapped (usually just 1 if it exists at all)."
        ]
      },
      {
        "name": "SafeXcmVersion",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Default version to encode XCM when latest version of destination is unknown. If `None`,",
          " then the destinations whose XCM version is unknown are considered unreachable."
        ]
      },
      {
        "name": "SupportedVersion",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "xcm:VersionedLocation"
            ],
            "value": "U32",
            "keys_id": 281,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " The Latest versions that we know various locations support."
        ]
      },
      {
        "name": "VersionNotifiers",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "xcm:VersionedLocation"
            ],
            "value": "U64",
            "keys_id": 281,
            "value_id": 11
          }
        },
        "fallback": "0x00",
        "docs": [
          " All locations that we have requested version notifications from."
        ]
      },
      {
        "name": "VersionNotifyTargets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "xcm:VersionedLocation"
            ],
            "value": "Tuple:U64sp_weights:weight_v2:WeightU32",
            "keys_id": 281,
            "value_id": 282
          }
        },
        "fallback": "0x00",
        "docs": [
          " The target locations that are subscribed to our version changes, as well as the most recent",
          " of our versions we informed them of."
        ]
      },
      {
        "name": "VersionDiscoveryQueue",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:xcm:VersionedLocationU32>",
          "PlainTypeValue": 283
        },
        "fallback": "0x00",
        "docs": [
          " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
          " the `u32` counter is the number of times that a send to the destination has been attempted,",
          " which is used as a prioritization."
        ]
      },
      {
        "name": "CurrentMigration",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_xcm:pallet:VersionMigrationStage",
          "PlainTypeValue": 286
        },
        "fallback": "0x00",
        "docs": [
          " The current migration's stage, if any."
        ]
      },
      {
        "name": "RemoteLockedFungibles",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId",
              "xcm:VersionedAssetId"
            ],
            "value": "pallet_xcm:pallet:RemoteLockedFungibleRecord",
            "keys_id": 288,
            "value_id": 290
          }
        },
        "fallback": "0x00",
        "docs": [
          " Fungible assets which we know are locked on a remote chain."
        ]
      },
      {
        "name": "LockedFungibles",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<Tuple:U128xcm:VersionedLocation>",
            "keys_id": 0,
            "value_id": 294
          }
        },
        "fallback": "0x00",
        "docs": [
          " Fungible assets which we know are locked on this chain."
        ]
      },
      {
        "name": "XcmExecutionSuspended",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 30
        },
        "fallback": "0x00",
        "docs": [
          " Global suspension state of the XCM executor."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1f00",
        "name": "send",
        "docs": [
          "See [`Pallet::send`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "message",
            "type": "xcm:VersionedXcm@298",
            "type_name": "Box<VersionedXcm<()>>"
          }
        ]
      },
      {
        "lookup": "1f01",
        "name": "teleport_assets",
        "docs": [
          "See [`Pallet::teleport_assets`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedAssets",
            "type_name": "Box<VersionedAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1f02",
        "name": "reserve_transfer_assets",
        "docs": [
          "See [`Pallet::reserve_transfer_assets`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedAssets",
            "type_name": "Box<VersionedAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1f03",
        "name": "execute",
        "docs": [
          "See [`Pallet::execute`]."
        ],
        "args": [
          {
            "name": "message",
            "type": "xcm:VersionedXcm@314",
            "type_name": "Box<VersionedXcm<<T as Config>::RuntimeCall>>"
          },
          {
            "name": "max_weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "1f04",
        "name": "force_xcm_version",
        "docs": [
          "See [`Pallet::force_xcm_version`]."
        ],
        "args": [
          {
            "name": "location",
            "type": "staging_xcm:v4:location:Location",
            "type_name": "Box<Location>"
          },
          {
            "name": "version",
            "type": "U32",
            "type_name": "XcmVersion"
          }
        ]
      },
      {
        "lookup": "1f05",
        "name": "force_default_xcm_version",
        "docs": [
          "See [`Pallet::force_default_xcm_version`]."
        ],
        "args": [
          {
            "name": "maybe_xcm_version",
            "type": "option<U32>",
            "type_name": "Option<XcmVersion>"
          }
        ]
      },
      {
        "lookup": "1f06",
        "name": "force_subscribe_version_notify",
        "docs": [
          "See [`Pallet::force_subscribe_version_notify`]."
        ],
        "args": [
          {
            "name": "location",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          }
        ]
      },
      {
        "lookup": "1f07",
        "name": "force_unsubscribe_version_notify",
        "docs": [
          "See [`Pallet::force_unsubscribe_version_notify`]."
        ],
        "args": [
          {
            "name": "location",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          }
        ]
      },
      {
        "lookup": "1f08",
        "name": "limited_reserve_transfer_assets",
        "docs": [
          "See [`Pallet::limited_reserve_transfer_assets`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedAssets",
            "type_name": "Box<VersionedAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "1f09",
        "name": "limited_teleport_assets",
        "docs": [
          "See [`Pallet::limited_teleport_assets`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedAssets",
            "type_name": "Box<VersionedAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "1f0a",
        "name": "force_suspension",
        "docs": [
          "See [`Pallet::force_suspension`]."
        ],
        "args": [
          {
            "name": "suspended",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "1f0b",
        "name": "transfer_assets",
        "docs": [
          "See [`Pallet::transfer_assets`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedAssets",
            "type_name": "Box<VersionedAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "1f0c",
        "name": "claim_assets",
        "docs": [
          "See [`Pallet::claim_assets`]."
        ],
        "args": [
          {
            "name": "assets",
            "type": "xcm:VersionedAssets",
            "type_name": "Box<VersionedAssets>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 297
    },
    "events": [
      {
        "lookup": "1f00",
        "name": "Attempted",
        "docs": [
          "Execution of an XCM message was attempted."
        ],
        "args": [
          "staging_xcm:v4:traits:Outcome"
        ],
        "args_name": [
          "outcome"
        ],
        "args_type_name": [
          "xcm::latest::Outcome"
        ]
      },
      {
        "lookup": "1f01",
        "name": "Sent",
        "docs": [
          "A XCM message was sent."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "staging_xcm:v4:location:Location",
          "Vec<staging_xcm:v4:Instruction@69>",
          "[U8; 32]"
        ],
        "args_name": [
          "origin",
          "destination",
          "message",
          "message_id"
        ],
        "args_type_name": [
          "Location",
          "Location",
          "Xcm<()>",
          "XcmHash"
        ]
      },
      {
        "lookup": "1f02",
        "name": "UnexpectedResponse",
        "docs": [
          "Query response received which does not match a registered query. This may be because a",
          "matching query was never registered, it may be because it is a duplicate response, or",
          "because the query timed out."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U64"
        ],
        "args_name": [
          "origin",
          "query_id"
        ],
        "args_type_name": [
          "Location",
          "QueryId"
        ]
      },
      {
        "lookup": "1f03",
        "name": "ResponseReady",
        "docs": [
          "Query response has been received and is ready for taking with `take_response`. There is",
          "no registered notification call."
        ],
        "args": [
          "U64",
          "staging_xcm:v4:Response"
        ],
        "args_name": [
          "query_id",
          "response"
        ],
        "args_type_name": [
          "QueryId",
          "Response"
        ]
      },
      {
        "lookup": "1f04",
        "name": "Notified",
        "docs": [
          "Query response has been received and query is removed. The registered notification has",
          "been dispatched and executed successfully."
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "query_id",
          "pallet_index",
          "call_index"
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "1f05",
        "name": "NotifyOverweight",
        "docs": [
          "Query response has been received and query is removed. The registered notification",
          "could not be dispatched because the dispatch weight is greater than the maximum weight",
          "originally budgeted by this runtime for the query result."
        ],
        "args": [
          "U64",
          "U8",
          "U8",
          "sp_weights:weight_v2:Weight",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "query_id",
          "pallet_index",
          "call_index",
          "actual_weight",
          "max_budgeted_weight"
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8",
          "Weight",
          "Weight"
        ]
      },
      {
        "lookup": "1f06",
        "name": "NotifyDispatchError",
        "docs": [
          "Query response has been received and query is removed. There was a general error with",
          "dispatching the notification call."
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "query_id",
          "pallet_index",
          "call_index"
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "1f07",
        "name": "NotifyDecodeFailed",
        "docs": [
          "Query response has been received and query is removed. The dispatch was unable to be",
          "decoded into a `Call`; this might be due to dispatch function having a signature which",
          "is not `(origin, QueryId, Response)`."
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "query_id",
          "pallet_index",
          "call_index"
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "1f08",
        "name": "InvalidResponder",
        "docs": [
          "Expected query response has been received but the origin location of the response does",
          "not match that expected. The query remains registered for a later, valid, response to",
          "be received and acted upon."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U64",
          "option<staging_xcm:v4:location:Location>"
        ],
        "args_name": [
          "origin",
          "query_id",
          "expected_location"
        ],
        "args_type_name": [
          "Location",
          "QueryId",
          "Option<Location>"
        ]
      },
      {
        "lookup": "1f09",
        "name": "InvalidResponderVersion",
        "docs": [
          "Expected query response has been received but the expected origin location placed in",
          "storage by this runtime previously cannot be decoded. The query remains registered.",
          "",
          "This is unexpected (since a location placed in storage in a previously executing",
          "runtime should be readable prior to query timeout) and dangerous since the possibly",
          "valid response will be dropped. Manual governance intervention is probably going to be",
          "needed."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U64"
        ],
        "args_name": [
          "origin",
          "query_id"
        ],
        "args_type_name": [
          "Location",
          "QueryId"
        ]
      },
      {
        "lookup": "1f0a",
        "name": "ResponseTaken",
        "docs": [
          "Received query response has been read and removed."
        ],
        "args": [
          "U64"
        ],
        "args_name": [
          "query_id"
        ],
        "args_type_name": [
          "QueryId"
        ]
      },
      {
        "lookup": "1f0b",
        "name": "AssetsTrapped",
        "docs": [
          "Some assets have been placed in an asset trap."
        ],
        "args": [
          "H256",
          "staging_xcm:v4:location:Location",
          "xcm:VersionedAssets"
        ],
        "args_name": [
          "hash",
          "origin",
          "assets"
        ],
        "args_type_name": [
          "H256",
          "Location",
          "VersionedAssets"
        ]
      },
      {
        "lookup": "1f0c",
        "name": "VersionChangeNotified",
        "docs": [
          "An XCM version change notification message has been attempted to be sent.",
          "",
          "The cost of sending it (borne by the chain) is included."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U32",
          "Vec<staging_xcm:v4:asset:Asset>",
          "[U8; 32]"
        ],
        "args_name": [
          "destination",
          "result",
          "cost",
          "message_id"
        ],
        "args_type_name": [
          "Location",
          "XcmVersion",
          "Assets",
          "XcmHash"
        ]
      },
      {
        "lookup": "1f0d",
        "name": "SupportedVersionChanged",
        "docs": [
          "The supported version of a location has been changed. This might be through an",
          "automatic notification or a manual intervention."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U32"
        ],
        "args_name": [
          "location",
          "version"
        ],
        "args_type_name": [
          "Location",
          "XcmVersion"
        ]
      },
      {
        "lookup": "1f0e",
        "name": "NotifyTargetSendFail",
        "docs": [
          "A given location which had a version change subscription was dropped owing to an error",
          "sending the notification to it."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U64",
          "xcm:v3:traits:Error"
        ],
        "args_name": [
          "location",
          "query_id",
          "error"
        ],
        "args_type_name": [
          "Location",
          "QueryId",
          "XcmError"
        ]
      },
      {
        "lookup": "1f0f",
        "name": "NotifyTargetMigrationFail",
        "docs": [
          "A given location which had a version change subscription was dropped owing to an error",
          "migrating the location to our new XCM format."
        ],
        "args": [
          "xcm:VersionedLocation",
          "U64"
        ],
        "args_name": [
          "location",
          "query_id"
        ],
        "args_type_name": [
          "VersionedLocation",
          "QueryId"
        ]
      },
      {
        "lookup": "1f10",
        "name": "InvalidQuerierVersion",
        "docs": [
          "Expected query response has been received but the expected querier location placed in",
          "storage by this runtime previously cannot be decoded. The query remains registered.",
          "",
          "This is unexpected (since a location placed in storage in a previously executing",
          "runtime should be readable prior to query timeout) and dangerous since the possibly",
          "valid response will be dropped. Manual governance intervention is probably going to be",
          "needed."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U64"
        ],
        "args_name": [
          "origin",
          "query_id"
        ],
        "args_type_name": [
          "Location",
          "QueryId"
        ]
      },
      {
        "lookup": "1f11",
        "name": "InvalidQuerier",
        "docs": [
          "Expected query response has been received but the querier location of the response does",
          "not match the expected. The query remains registered for a later, valid, response to",
          "be received and acted upon."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U64",
          "staging_xcm:v4:location:Location",
          "option<staging_xcm:v4:location:Location>"
        ],
        "args_name": [
          "origin",
          "query_id",
          "expected_querier",
          "maybe_actual_querier"
        ],
        "args_type_name": [
          "Location",
          "QueryId",
          "Location",
          "Option<Location>"
        ]
      },
      {
        "lookup": "1f12",
        "name": "VersionNotifyStarted",
        "docs": [
          "A remote has requested XCM version change notification from us and we have honored it.",
          "A version information message is sent to them and its cost is included."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "Vec<staging_xcm:v4:asset:Asset>",
          "[U8; 32]"
        ],
        "args_name": [
          "destination",
          "cost",
          "message_id"
        ],
        "args_type_name": [
          "Location",
          "Assets",
          "XcmHash"
        ]
      },
      {
        "lookup": "1f13",
        "name": "VersionNotifyRequested",
        "docs": [
          "We have requested that a remote chain send us XCM version change notifications."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "Vec<staging_xcm:v4:asset:Asset>",
          "[U8; 32]"
        ],
        "args_name": [
          "destination",
          "cost",
          "message_id"
        ],
        "args_type_name": [
          "Location",
          "Assets",
          "XcmHash"
        ]
      },
      {
        "lookup": "1f14",
        "name": "VersionNotifyUnrequested",
        "docs": [
          "We have requested that a remote chain stops sending us XCM version change",
          "notifications."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "Vec<staging_xcm:v4:asset:Asset>",
          "[U8; 32]"
        ],
        "args_name": [
          "destination",
          "cost",
          "message_id"
        ],
        "args_type_name": [
          "Location",
          "Assets",
          "XcmHash"
        ]
      },
      {
        "lookup": "1f15",
        "name": "FeesPaid",
        "docs": [
          "Fees were paid from a location for an operation (often for using `SendXcm`)."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "Vec<staging_xcm:v4:asset:Asset>"
        ],
        "args_name": [
          "paying",
          "fees"
        ],
        "args_type_name": [
          "Location",
          "Assets"
        ]
      },
      {
        "lookup": "1f16",
        "name": "AssetsClaimed",
        "docs": [
          "Some assets have been claimed from an asset trap"
        ],
        "args": [
          "H256",
          "staging_xcm:v4:location:Location",
          "xcm:VersionedAssets"
        ],
        "args_name": [
          "hash",
          "origin",
          "assets"
        ],
        "args_type_name": [
          "H256",
          "Location",
          "VersionedAssets"
        ]
      },
      {
        "lookup": "1f17",
        "name": "VersionMigrationFinished",
        "docs": [
          "A XCM version migration finished."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "version"
        ],
        "args_type_name": [
          "XcmVersion"
        ]
      }
    ],
    "events_value": {
      "type": 51
    },
    "errors": [
      {
        "name": "Unreachable",
        "doc": [
          "The desired destination was unreachable, generally because there is a no way of routing",
          "to it."
        ]
      },
      {
        "name": "SendFailure",
        "doc": [
          "There was some other issue (i.e. not to do with routing) in sending the message.",
          "Perhaps a lack of space for buffering the message."
        ]
      },
      {
        "name": "Filtered",
        "doc": [
          "The message execution fails the filter."
        ]
      },
      {
        "name": "UnweighableMessage",
        "doc": [
          "The message's weight could not be determined."
        ]
      },
      {
        "name": "DestinationNotInvertible",
        "doc": [
          "The destination `Location` provided cannot be inverted."
        ]
      },
      {
        "name": "Empty",
        "doc": [
          "The assets to be sent are empty."
        ]
      },
      {
        "name": "CannotReanchor",
        "doc": [
          "Could not re-anchor the assets to declare the fees for the destination chain."
        ]
      },
      {
        "name": "TooManyAssets",
        "doc": [
          "Too many assets have been attempted for transfer."
        ]
      },
      {
        "name": "InvalidOrigin",
        "doc": [
          "Origin is invalid for sending."
        ]
      },
      {
        "name": "BadVersion",
        "doc": [
          "The version of the `Versioned` value used is not able to be interpreted."
        ]
      },
      {
        "name": "BadLocation",
        "doc": [
          "The given location could not be used (e.g. because it cannot be expressed in the",
          "desired version of XCM)."
        ]
      },
      {
        "name": "NoSubscription",
        "doc": [
          "The referenced subscription could not be found."
        ]
      },
      {
        "name": "AlreadySubscribed",
        "doc": [
          "The location is invalid since it already has a subscription from us."
        ]
      },
      {
        "name": "CannotCheckOutTeleport",
        "doc": [
          "Could not check-out the assets for teleportation to the destination chain."
        ]
      },
      {
        "name": "LowBalance",
        "doc": [
          "The owner does not own (all) of the asset that they wish to do the operation on."
        ]
      },
      {
        "name": "TooManyLocks",
        "doc": [
          "The asset owner has too many locks on the asset."
        ]
      },
      {
        "name": "AccountNotSovereign",
        "doc": [
          "The given account is not an identifiable sovereign account for any location."
        ]
      },
      {
        "name": "FeesNotMet",
        "doc": [
          "The operation required fees to be paid which the initiator could not meet."
        ]
      },
      {
        "name": "LockNotFound",
        "doc": [
          "A remote lock with the corresponding data could not be found."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The unlock operation cannot succeed because there are still consumers of the lock."
        ]
      },
      {
        "name": "InvalidAssetNotConcrete",
        "doc": [
          "Invalid non-concrete asset."
        ]
      },
      {
        "name": "InvalidAssetUnknownReserve",
        "doc": [
          "Invalid asset, reserve chain could not be determined for it."
        ]
      },
      {
        "name": "InvalidAssetUnsupportedReserve",
        "doc": [
          "Invalid asset, do not support remote asset reserves with different fees reserves."
        ]
      },
      {
        "name": "TooManyReserves",
        "doc": [
          "Too many assets with different reserve locations have been attempted for transfer."
        ]
      },
      {
        "name": "LocalExecutionIncomplete",
        "doc": [
          "Local XCM execution incomplete."
        ]
      }
    ],
    "errors_value": {
      "type": 325
    },
    "index": 31
  },
  {
    "name": "CumulusXcm",
    "prefix": "",
    "storage": null,
    "calls_value": {
      "type": 326
    },
    "events": [
      {
        "lookup": "2000",
        "name": "InvalidFormat",
        "docs": [
          "Downward message is invalid XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "[u8; 32]"
        ]
      },
      {
        "lookup": "2001",
        "name": "UnsupportedVersion",
        "docs": [
          "Downward message is unsupported version of XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "[u8; 32]"
        ]
      },
      {
        "lookup": "2002",
        "name": "ExecutedDownward",
        "docs": [
          "Downward message executed with the given outcome.",
          "\\[ id, outcome \\]"
        ],
        "args": [
          "[U8; 32]",
          "staging_xcm:v4:traits:Outcome"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "[u8; 32]",
          "Outcome"
        ]
      }
    ],
    "events_value": {
      "type": 116
    },
    "errors": null,
    "errors_value": null,
    "index": 32
  },
  {
    "name": "DmpQueue",
    "prefix": "DmpQueue",
    "storage": [
      {
        "name": "MigrationStatus",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_dmp_queue:pallet:MigrationState",
          "PlainTypeValue": 327
        },
        "fallback": "0x00",
        "docs": [
          " The migration state of this pallet."
        ]
      }
    ],
    "calls_value": {
      "type": 330
    },
    "events": [
      {
        "lookup": "2100",
        "name": "StartedExport",
        "docs": [
          "The export of pages started."
        ],
        "args": null
      },
      {
        "lookup": "2101",
        "name": "Exported",
        "docs": [
          "The export of a page completed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "page"
        ],
        "args_type_name": [
          "PageCounter"
        ]
      },
      {
        "lookup": "2102",
        "name": "ExportFailed",
        "docs": [
          "The export of a page failed.",
          "",
          "This should never be emitted."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "page"
        ],
        "args_type_name": [
          "PageCounter"
        ]
      },
      {
        "lookup": "2103",
        "name": "CompletedExport",
        "docs": [
          "The export of pages completed."
        ],
        "args": null
      },
      {
        "lookup": "2104",
        "name": "StartedOverweightExport",
        "docs": [
          "The export of overweight messages started."
        ],
        "args": null
      },
      {
        "lookup": "2105",
        "name": "ExportedOverweight",
        "docs": [
          "The export of an overweight message completed."
        ],
        "args": [
          "U64"
        ],
        "args_name": [
          "index"
        ],
        "args_type_name": [
          "OverweightIndex"
        ]
      },
      {
        "lookup": "2106",
        "name": "ExportOverweightFailed",
        "docs": [
          "The export of an overweight message failed.",
          "",
          "This should never be emitted."
        ],
        "args": [
          "U64"
        ],
        "args_name": [
          "index"
        ],
        "args_type_name": [
          "OverweightIndex"
        ]
      },
      {
        "lookup": "2107",
        "name": "CompletedOverweightExport",
        "docs": [
          "The export of overweight messages completed."
        ],
        "args": null
      },
      {
        "lookup": "2108",
        "name": "StartedCleanup",
        "docs": [
          "The cleanup of remaining pallet storage started."
        ],
        "args": null
      },
      {
        "lookup": "2109",
        "name": "CleanedSome",
        "docs": [
          "Some debris was cleaned up."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "keys_removed"
        ],
        "args_type_name": [
          "u32"
        ]
      },
      {
        "lookup": "210a",
        "name": "Completed",
        "docs": [
          "The cleanup of remaining pallet storage completed."
        ],
        "args": [
          "Bool"
        ],
        "args_name": [
          "error"
        ],
        "args_type_name": [
          "bool"
        ]
      }
    ],
    "events_value": {
      "type": 117
    },
    "errors": null,
    "errors_value": null,
    "index": 33
  },
  {
    "name": "ToKusamaXcmRouter",
    "prefix": "ToKusamaXcmRouter",
    "storage": [
      {
        "name": "Bridge",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "bp_xcm_bridge_hub_router:BridgeState",
          "PlainTypeValue": 331
        },
        "fallback": "0x000064a7b3b6e00d000000000000000000",
        "docs": [
          " Bridge that we are using.",
          "",
          " **bridges-v1** assumptions: all outbound messages through this router are using single lane",
          " and to single remote consensus. If there is some other remote consensus that uses the same",
          " bridge hub, the separate pallet instance shall be used, In `v2` we'll have all required",
          " primitives (lane-id aka bridge-id, derived from XCM locations) to support multiple  bridges",
          " by the same pallet instance."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "2200",
        "name": "report_bridge_status",
        "docs": [
          "See [`Pallet::report_bridge_status`]."
        ],
        "args": [
          {
            "name": "bridge_id",
            "type": "H256",
            "type_name": "H256"
          },
          {
            "name": "is_congested",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 332
    },
    "errors": null,
    "errors_value": null,
    "index": 34
  },
  {
    "name": "MessageQueue",
    "prefix": "MessageQueue",
    "storage": [
      {
        "name": "BookStateFor",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "cumulus_primitives_core:AggregateMessageOrigin"
            ],
            "value": "pallet_message_queue:BookState",
            "keys_id": 119,
            "value_id": 333
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The index of the first and last (non-empty) pages."
        ]
      },
      {
        "name": "ServiceHead",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_primitives_core:AggregateMessageOrigin",
          "PlainTypeValue": 119
        },
        "fallback": "0x00",
        "docs": [
          " The origin at which we should begin servicing."
        ]
      },
      {
        "name": "Pages",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "cumulus_primitives_core:AggregateMessageOrigin",
              "U32"
            ],
            "value": "pallet_message_queue:Page",
            "keys_id": 336,
            "value_id": 337
          }
        },
        "fallback": "0x00",
        "docs": [
          " The map of page indices to pages."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "2300",
        "name": "reap_page",
        "docs": [
          "See [`Pallet::reap_page`]."
        ],
        "args": [
          {
            "name": "message_origin",
            "type": "cumulus_primitives_core:AggregateMessageOrigin",
            "type_name": "MessageOriginOf"
          },
          {
            "name": "page_index",
            "type": "U32",
            "type_name": "PageIndex"
          }
        ]
      },
      {
        "lookup": "2301",
        "name": "execute_overweight",
        "docs": [
          "See [`Pallet::execute_overweight`]."
        ],
        "args": [
          {
            "name": "message_origin",
            "type": "cumulus_primitives_core:AggregateMessageOrigin",
            "type_name": "MessageOriginOf"
          },
          {
            "name": "page",
            "type": "U32",
            "type_name": "PageIndex"
          },
          {
            "name": "index",
            "type": "U32",
            "type_name": "Size"
          },
          {
            "name": "weight_limit",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 339
    },
    "events": [
      {
        "lookup": "2300",
        "name": "ProcessingFailed",
        "docs": [
          "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
        ],
        "args": [
          "H256",
          "cumulus_primitives_core:AggregateMessageOrigin",
          "frame_support:traits:messages:ProcessMessageError"
        ],
        "args_name": [
          "id",
          "origin",
          "error"
        ],
        "args_type_name": [
          "H256",
          "MessageOriginOf",
          "ProcessMessageError"
        ]
      },
      {
        "lookup": "2301",
        "name": "Processed",
        "docs": [
          "Message is processed."
        ],
        "args": [
          "H256",
          "cumulus_primitives_core:AggregateMessageOrigin",
          "sp_weights:weight_v2:Weight",
          "Bool"
        ],
        "args_name": [
          "id",
          "origin",
          "weight_used",
          "success"
        ],
        "args_type_name": [
          "H256",
          "MessageOriginOf",
          "Weight",
          "bool"
        ]
      },
      {
        "lookup": "2302",
        "name": "OverweightEnqueued",
        "docs": [
          "Message placed in overweight queue."
        ],
        "args": [
          "[U8; 32]",
          "cumulus_primitives_core:AggregateMessageOrigin",
          "U32",
          "U32"
        ],
        "args_name": [
          "id",
          "origin",
          "page_index",
          "message_index"
        ],
        "args_type_name": [
          "[u8; 32]",
          "MessageOriginOf",
          "PageIndex",
          "Size"
        ]
      },
      {
        "lookup": "2303",
        "name": "PageReaped",
        "docs": [
          "This page was reaped."
        ],
        "args": [
          "cumulus_primitives_core:AggregateMessageOrigin",
          "U32"
        ],
        "args_name": [
          "origin",
          "index"
        ],
        "args_type_name": [
          "MessageOriginOf",
          "PageIndex"
        ]
      }
    ],
    "events_value": {
      "type": 118
    },
    "constants": [
      {
        "name": "HeapSize",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000100",
        "docs": [
          " The size of the page; this implies the maximum message size which can be sent.",
          "",
          " A good value depends on the expected message sizes, their weights, the weight that is",
          " available for processing them and the maximal needed message size. The maximal message",
          " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
        ]
      },
      {
        "name": "MaxStale",
        "type": "U32",
        "type_value": 4,
        "constants_value": "08000000",
        "docs": [
          " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
          " can happen. Once there are more stale pages than this, then historical pages may be",
          " dropped, even if they contain unprocessed overweight messages."
        ]
      },
      {
        "name": "ServiceWeight",
        "type": "option<sp_weights:weight_v2:Weight>",
        "type_value": 166,
        "constants_value": "01070016d0be2802007000",
        "docs": [
          " The amount of weight (if any) which should be provided to the message queue for",
          " servicing enqueued items.",
          "",
          " This may be legitimately `None` in the case that you will call",
          " `ServiceQueues::service_queues` manually."
        ]
      }
    ],
    "errors": [
      {
        "name": "NotReapable",
        "doc": [
          "Page is not reapable because it has items remaining to be processed and is not old",
          "enough."
        ]
      },
      {
        "name": "NoPage",
        "doc": [
          "Page to be reaped does not exist."
        ]
      },
      {
        "name": "NoMessage",
        "doc": [
          "The referenced message could not be found."
        ]
      },
      {
        "name": "AlreadyProcessed",
        "doc": [
          "The message was already processed and cannot be processed again."
        ]
      },
      {
        "name": "Queued",
        "doc": [
          "The message is queued for future execution."
        ]
      },
      {
        "name": "InsufficientWeight",
        "doc": [
          "There is temporarily not enough weight to continue servicing messages."
        ]
      },
      {
        "name": "TemporarilyUnprocessable",
        "doc": [
          "This message is temporarily unprocessable.",
          "",
          "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
          "retrying."
        ]
      },
      {
        "name": "QueuePaused",
        "doc": [
          "The queue is paused and no message can be executed from it.",
          "",
          "This can change at any time and may resolve in the future by re-trying."
        ]
      },
      {
        "name": "RecursiveDisallowed",
        "doc": [
          "Another call is in progress and needs to finish before this call can happen."
        ]
      }
    ],
    "errors_value": {
      "type": 340
    },
    "index": 35
  },
  {
    "name": "Utility",
    "prefix": "",
    "storage": null,
    "calls": [
      {
        "lookup": "2800",
        "name": "batch",
        "docs": [
          "See [`Pallet::batch`]."
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<asset_hub_polkadot_runtime:RuntimeCall>",
            "type_name": "Vec<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2801",
        "name": "as_derivative",
        "docs": [
          "See [`Pallet::as_derivative`]."
        ],
        "args": [
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2802",
        "name": "batch_all",
        "docs": [
          "See [`Pallet::batch_all`]."
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<asset_hub_polkadot_runtime:RuntimeCall>",
            "type_name": "Vec<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2803",
        "name": "dispatch_as",
        "docs": [
          "See [`Pallet::dispatch_as`]."
        ],
        "args": [
          {
            "name": "as_origin",
            "type": "asset_hub_polkadot_runtime:OriginCaller",
            "type_name": "Box<PalletsOrigin>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2804",
        "name": "force_batch",
        "docs": [
          "See [`Pallet::force_batch`]."
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<asset_hub_polkadot_runtime:RuntimeCall>",
            "type_name": "Vec<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2805",
        "name": "with_weight",
        "docs": [
          "See [`Pallet::with_weight`]."
        ],
        "args": [
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          },
          {
            "name": "weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 341
    },
    "events": [
      {
        "lookup": "2800",
        "name": "BatchInterrupted",
        "docs": [
          "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
          "well as the error."
        ],
        "args": [
          "U32",
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "index",
          "error"
        ],
        "args_type_name": [
          "u32",
          "DispatchError"
        ]
      },
      {
        "lookup": "2801",
        "name": "BatchCompleted",
        "docs": [
          "Batch of dispatches completed fully with no error."
        ],
        "args": null
      },
      {
        "lookup": "2802",
        "name": "BatchCompletedWithErrors",
        "docs": [
          "Batch of dispatches completed but has errors."
        ],
        "args": null
      },
      {
        "lookup": "2803",
        "name": "ItemCompleted",
        "docs": [
          "A single item within a Batch of dispatches has completed with no error."
        ],
        "args": null
      },
      {
        "lookup": "2804",
        "name": "ItemFailed",
        "docs": [
          "A single item within a Batch of dispatches has completed with error."
        ],
        "args": [
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "error"
        ],
        "args_type_name": [
          "DispatchError"
        ]
      },
      {
        "lookup": "2805",
        "name": "DispatchedAs",
        "docs": [
          "A call was dispatched."
        ],
        "args": [
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "result"
        ],
        "args_type_name": [
          "DispatchResult"
        ]
      }
    ],
    "events_value": {
      "type": 122
    },
    "constants": [
      {
        "name": "batched_calls_limit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "aa2a0000",
        "docs": [
          " The limit on the number of batched calls."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooManyCalls",
        "doc": [
          "Too many calls batched."
        ]
      }
    ],
    "errors_value": {
      "type": 386
    },
    "index": 40
  },
  {
    "name": "Multisig",
    "prefix": "Multisig",
    "storage": [
      {
        "name": "Multisigs",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "[U8; 32]"
            ],
            "value": "pallet_multisig:Multisig",
            "keys_id": 387,
            "value_id": 388
          }
        },
        "fallback": "0x00",
        "docs": [
          " The set of open multisig operations."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "2900",
        "name": "as_multi_threshold_1",
        "docs": [
          "See [`Pallet::as_multi_threshold_1`]."
        ],
        "args": [
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2901",
        "name": "as_multi",
        "docs": [
          "See [`Pallet::as_multi`]."
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "maybe_timepoint",
            "type": "option<pallet_multisig:Timepoint>",
            "type_name": "Option<Timepoint<BlockNumberFor>>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          },
          {
            "name": "max_weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "2902",
        "name": "approve_as_multi",
        "docs": [
          "See [`Pallet::approve_as_multi`]."
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "maybe_timepoint",
            "type": "option<pallet_multisig:Timepoint>",
            "type_name": "Option<Timepoint<BlockNumberFor>>"
          },
          {
            "name": "call_hash",
            "type": "[U8; 32]",
            "type_name": "[u8; 32]"
          },
          {
            "name": "max_weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "2903",
        "name": "cancel_as_multi",
        "docs": [
          "See [`Pallet::cancel_as_multi`]."
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "timepoint",
            "type": "pallet_multisig:Timepoint",
            "type_name": "Timepoint<BlockNumberFor>"
          },
          {
            "name": "call_hash",
            "type": "[U8; 32]",
            "type_name": "[u8; 32]"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 344
    },
    "events": [
      {
        "lookup": "2900",
        "name": "NewMultisig",
        "docs": [
          "A new multisig operation has begun."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "approving",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "CallHash"
        ]
      },
      {
        "lookup": "2901",
        "name": "MultisigApproval",
        "docs": [
          "A multisig operation has been approved by someone."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "approving",
          "timepoint",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumberFor>",
          "AccountId",
          "CallHash"
        ]
      },
      {
        "lookup": "2902",
        "name": "MultisigExecuted",
        "docs": [
          "A multisig operation has been executed."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "approving",
          "timepoint",
          "multisig",
          "call_hash",
          "result"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumberFor>",
          "AccountId",
          "CallHash",
          "DispatchResult"
        ]
      },
      {
        "lookup": "2903",
        "name": "MultisigCancelled",
        "docs": [
          "A multisig operation has been cancelled."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "cancelling",
          "timepoint",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumberFor>",
          "AccountId",
          "CallHash"
        ]
      }
    ],
    "events_value": {
      "type": 125
    },
    "constants": [
      {
        "name": "DepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00dbbb77000000000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating a multisig execution or to",
          " store a dispatch call for later.",
          "",
          " This is held for an additional storage item whose value size is",
          " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
          " `32 + sizeof(AccountId)` bytes."
        ]
      },
      {
        "name": "DepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00d43000000000000000000000000000",
        "docs": [
          " The amount of currency needed per unit threshold when creating a multisig execution.",
          "",
          " This is held for adding 32 bytes more into a pre-existing storage value."
        ]
      },
      {
        "name": "MaxSignatories",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum amount of signatories allowed in the multisig."
        ]
      }
    ],
    "errors": [
      {
        "name": "MinimumThreshold",
        "doc": [
          "Threshold must be 2 or greater."
        ]
      },
      {
        "name": "AlreadyApproved",
        "doc": [
          "Call is already approved by this signatory."
        ]
      },
      {
        "name": "NoApprovalsNeeded",
        "doc": [
          "Call doesn't need any (more) approvals."
        ]
      },
      {
        "name": "TooFewSignatories",
        "doc": [
          "There are too few signatories in the list."
        ]
      },
      {
        "name": "TooManySignatories",
        "doc": [
          "There are too many signatories in the list."
        ]
      },
      {
        "name": "SignatoriesOutOfOrder",
        "doc": [
          "The signatories were provided out of order; they should be ordered."
        ]
      },
      {
        "name": "SenderInSignatories",
        "doc": [
          "The sender was contained in the other signatories; it shouldn't be."
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Multisig operation not found when attempting to cancel."
        ]
      },
      {
        "name": "NotOwner",
        "doc": [
          "Only the account that originally created the multisig is able to cancel it."
        ]
      },
      {
        "name": "NoTimepoint",
        "doc": [
          "No timepoint was given, yet the multisig operation is already underway."
        ]
      },
      {
        "name": "WrongTimepoint",
        "doc": [
          "A different timepoint was given to the multisig operation that is underway."
        ]
      },
      {
        "name": "UnexpectedTimepoint",
        "doc": [
          "A timepoint was given, yet no multisig operation is underway."
        ]
      },
      {
        "name": "MaxWeightTooLow",
        "doc": [
          "The maximum weight information provided was too low."
        ]
      },
      {
        "name": "AlreadyStored",
        "doc": [
          "The data to be stored is already stored."
        ]
      }
    ],
    "errors_value": {
      "type": 390
    },
    "index": 41
  },
  {
    "name": "Proxy",
    "prefix": "Proxy",
    "storage": [
      {
        "name": "Proxies",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@392U128",
            "keys_id": 0,
            "value_id": 391
          }
        },
        "fallback": "0x0000000000000000000000000000000000",
        "docs": [
          " The set of account proxies. Maps the account which has delegated to the accounts",
          " which are being delegated to, together with the amount held on deposit."
        ]
      },
      {
        "name": "Announcements",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@396U128",
            "keys_id": 0,
            "value_id": 395
          }
        },
        "fallback": "0x0000000000000000000000000000000000",
        "docs": [
          " The announcements made by the proxy (key)."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "2a00",
        "name": "proxy",
        "docs": [
          "See [`Pallet::proxy`]."
        ],
        "args": [
          {
            "name": "real",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "force_proxy_type",
            "type": "option<asset_hub_polkadot_runtime:ProxyType>",
            "type_name": "Option<ProxyType>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2a01",
        "name": "add_proxy",
        "docs": [
          "See [`Pallet::add_proxy`]."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "proxy_type",
            "type": "asset_hub_polkadot_runtime:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumberFor"
          }
        ]
      },
      {
        "lookup": "2a02",
        "name": "remove_proxy",
        "docs": [
          "See [`Pallet::remove_proxy`]."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "proxy_type",
            "type": "asset_hub_polkadot_runtime:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumberFor"
          }
        ]
      },
      {
        "lookup": "2a03",
        "name": "remove_proxies",
        "docs": [
          "See [`Pallet::remove_proxies`]."
        ],
        "args": null
      },
      {
        "lookup": "2a04",
        "name": "create_pure",
        "docs": [
          "See [`Pallet::create_pure`]."
        ],
        "args": [
          {
            "name": "proxy_type",
            "type": "asset_hub_polkadot_runtime:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          }
        ]
      },
      {
        "lookup": "2a05",
        "name": "kill_pure",
        "docs": [
          "See [`Pallet::kill_pure`]."
        ],
        "args": [
          {
            "name": "spawner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "proxy_type",
            "type": "asset_hub_polkadot_runtime:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "height",
            "type": "compact<U32>",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "ext_index",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "2a06",
        "name": "announce",
        "docs": [
          "See [`Pallet::announce`]."
        ],
        "args": [
          {
            "name": "real",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "2a07",
        "name": "remove_announcement",
        "docs": [
          "See [`Pallet::remove_announcement`]."
        ],
        "args": [
          {
            "name": "real",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "2a08",
        "name": "reject_announcement",
        "docs": [
          "See [`Pallet::reject_announcement`]."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "2a09",
        "name": "proxy_announced",
        "docs": [
          "See [`Pallet::proxy_announced`]."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "real",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "force_proxy_type",
            "type": "option<asset_hub_polkadot_runtime:ProxyType>",
            "type_name": "Option<ProxyType>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 346
    },
    "events": [
      {
        "lookup": "2a00",
        "name": "ProxyExecuted",
        "docs": [
          "A proxy was executed correctly, with the given."
        ],
        "args": [
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "result"
        ],
        "args_type_name": [
          "DispatchResult"
        ]
      },
      {
        "lookup": "2a01",
        "name": "PureCreated",
        "docs": [
          "A pure account has been created by new proxy with given",
          "disambiguation index and proxy type."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "asset_hub_polkadot_runtime:ProxyType",
          "U16"
        ],
        "args_name": [
          "pure",
          "who",
          "proxy_type",
          "disambiguation_index"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "u16"
        ]
      },
      {
        "lookup": "2a02",
        "name": "Announced",
        "docs": [
          "An announcement was placed to make a call in the future."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "H256"
        ],
        "args_name": [
          "real",
          "proxy",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "CallHashOf"
        ]
      },
      {
        "lookup": "2a03",
        "name": "ProxyAdded",
        "docs": [
          "A proxy was added."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "asset_hub_polkadot_runtime:ProxyType",
          "U32"
        ],
        "args_name": [
          "delegator",
          "delegatee",
          "proxy_type",
          "delay"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "2a04",
        "name": "ProxyRemoved",
        "docs": [
          "A proxy was removed."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "asset_hub_polkadot_runtime:ProxyType",
          "U32"
        ],
        "args_name": [
          "delegator",
          "delegatee",
          "proxy_type",
          "delay"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "BlockNumberFor"
        ]
      }
    ],
    "events_value": {
      "type": 127
    },
    "constants": [
      {
        "name": "ProxyDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "009d7277000000000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating a proxy.",
          "",
          " This is held for an additional storage item whose value size is",
          " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
        ]
      },
      {
        "name": "ProxyDepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "a05a3200000000000000000000000000",
        "docs": [
          " The amount of currency needed per proxy added.",
          "",
          " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
          " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
          " into account `32 + proxy_type.encode().len()` bytes of data."
        ]
      },
      {
        "name": "MaxProxies",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum amount of proxies allowed for a single account."
        ]
      },
      {
        "name": "MaxPending",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum amount of time-delayed announcements that are allowed to be pending."
        ]
      },
      {
        "name": "AnnouncementDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00d27e77000000000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating an announcement.",
          "",
          " This is held when a new storage item holding a `Balance` is created (typically 16",
          " bytes)."
        ]
      },
      {
        "name": "AnnouncementDepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40b56400000000000000000000000000",
        "docs": [
          " The amount of currency needed per announcement made.",
          "",
          " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
          " into a pre-existing storage value."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooMany",
        "doc": [
          "There are too many proxies registered or too many announcements pending."
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Proxy registration not found."
        ]
      },
      {
        "name": "NotProxy",
        "doc": [
          "Sender is not a proxy of the account to be proxied."
        ]
      },
      {
        "name": "Unproxyable",
        "doc": [
          "A call which is incompatible with the proxy type's filter was attempted."
        ]
      },
      {
        "name": "Duplicate",
        "doc": [
          "Account is already a proxy."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "Call may not be made by proxy because it may escalate its privileges."
        ]
      },
      {
        "name": "Unannounced",
        "doc": [
          "Announcement, if made at all, was made too recently."
        ]
      },
      {
        "name": "NoSelfProxy",
        "doc": [
          "Cannot add self as proxy."
        ]
      }
    ],
    "errors_value": {
      "type": 399
    },
    "index": 42
  },
  {
    "name": "Assets",
    "prefix": "Assets",
    "storage": [
      {
        "name": "Asset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_assets:types:AssetDetails",
            "keys_id": 4,
            "value_id": 400
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of an asset."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId"
            ],
            "value": "pallet_assets:types:AssetAccount",
            "keys_id": 402,
            "value_id": 403
          }
        },
        "fallback": "0x00",
        "docs": [
          " The holdings of a specific account for a specific asset."
        ]
      },
      {
        "name": "Approvals",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId",
              "AccountId"
            ],
            "value": "pallet_assets:types:Approval",
            "keys_id": 406,
            "value_id": 407
          }
        },
        "fallback": "0x00",
        "docs": [
          " Approved balance transfers. First balance is the amount approved for transfer. Second",
          " is the amount of `T::Currency` reserved for storing this.",
          " First key is the asset ID, second key is the owner and third key is the delegate."
        ]
      },
      {
        "name": "Metadata",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_assets:types:AssetMetadata@408",
            "keys_id": 4,
            "value_id": 408
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000",
        "docs": [
          " Metadata of an asset."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3200",
        "name": "create",
        "docs": [
          "See [`Pallet::create`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "min_balance",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3201",
        "name": "force_create",
        "docs": [
          "See [`Pallet::force_create`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3202",
        "name": "start_destroy",
        "docs": [
          "See [`Pallet::start_destroy`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3203",
        "name": "destroy_accounts",
        "docs": [
          "See [`Pallet::destroy_accounts`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3204",
        "name": "destroy_approvals",
        "docs": [
          "See [`Pallet::destroy_approvals`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3205",
        "name": "finish_destroy",
        "docs": [
          "See [`Pallet::finish_destroy`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3206",
        "name": "mint",
        "docs": [
          "See [`Pallet::mint`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "beneficiary",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3207",
        "name": "burn",
        "docs": [
          "See [`Pallet::burn`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3208",
        "name": "transfer",
        "docs": [
          "See [`Pallet::transfer`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3209",
        "name": "transfer_keep_alive",
        "docs": [
          "See [`Pallet::transfer_keep_alive`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "320a",
        "name": "force_transfer",
        "docs": [
          "See [`Pallet::force_transfer`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "source",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "320b",
        "name": "freeze",
        "docs": [
          "See [`Pallet::freeze`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "320c",
        "name": "thaw",
        "docs": [
          "See [`Pallet::thaw`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "320d",
        "name": "freeze_asset",
        "docs": [
          "See [`Pallet::freeze_asset`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "320e",
        "name": "thaw_asset",
        "docs": [
          "See [`Pallet::thaw_asset`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "320f",
        "name": "transfer_ownership",
        "docs": [
          "See [`Pallet::transfer_ownership`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3210",
        "name": "set_team",
        "docs": [
          "See [`Pallet::set_team`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3211",
        "name": "set_metadata",
        "docs": [
          "See [`Pallet::set_metadata`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          }
        ]
      },
      {
        "lookup": "3212",
        "name": "clear_metadata",
        "docs": [
          "See [`Pallet::clear_metadata`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3213",
        "name": "force_set_metadata",
        "docs": [
          "See [`Pallet::force_set_metadata`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3214",
        "name": "force_clear_metadata",
        "docs": [
          "See [`Pallet::force_clear_metadata`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3215",
        "name": "force_asset_status",
        "docs": [
          "See [`Pallet::force_asset_status`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3216",
        "name": "approve_transfer",
        "docs": [
          "See [`Pallet::approve_transfer`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3217",
        "name": "cancel_approval",
        "docs": [
          "See [`Pallet::cancel_approval`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3218",
        "name": "force_cancel_approval",
        "docs": [
          "See [`Pallet::force_cancel_approval`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3219",
        "name": "transfer_approved",
        "docs": [
          "See [`Pallet::transfer_approved`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "destination",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "321a",
        "name": "touch",
        "docs": [
          "See [`Pallet::touch`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "321b",
        "name": "refund",
        "docs": [
          "See [`Pallet::refund`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "allow_burn",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "321c",
        "name": "set_min_balance",
        "docs": [
          "See [`Pallet::set_min_balance`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "min_balance",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "321d",
        "name": "touch_other",
        "docs": [
          "See [`Pallet::touch_other`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "321e",
        "name": "refund_other",
        "docs": [
          "See [`Pallet::refund_other`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "321f",
        "name": "block",
        "docs": [
          "See [`Pallet::block`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 348
    },
    "events": [
      {
        "lookup": "3200",
        "name": "Created",
        "docs": [
          "Some asset class was created."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3201",
        "name": "Issued",
        "docs": [
          "Some assets were issued."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3202",
        "name": "Transferred",
        "docs": [
          "Some assets were transferred."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3203",
        "name": "Burned",
        "docs": [
          "Some assets were destroyed."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "balance"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3204",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3205",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3206",
        "name": "Frozen",
        "docs": [
          "Some account `who` was frozen."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3207",
        "name": "Thawed",
        "docs": [
          "Some account `who` was thawed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3208",
        "name": "AssetFrozen",
        "docs": [
          "Some asset `asset_id` was frozen."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3209",
        "name": "AssetThawed",
        "docs": [
          "Some asset `asset_id` was thawed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "320a",
        "name": "AccountsDestroyed",
        "docs": [
          "Accounts were destroyed for given asset."
        ],
        "args": [
          "U32",
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "accounts_destroyed",
          "accounts_remaining"
        ],
        "args_type_name": [
          "AssetId",
          "u32",
          "u32"
        ]
      },
      {
        "lookup": "320b",
        "name": "ApprovalsDestroyed",
        "docs": [
          "Approvals were destroyed for given asset."
        ],
        "args": [
          "U32",
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "approvals_destroyed",
          "approvals_remaining"
        ],
        "args_type_name": [
          "AssetId",
          "u32",
          "u32"
        ]
      },
      {
        "lookup": "320c",
        "name": "DestructionStarted",
        "docs": [
          "An asset class is in the process of being destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "320d",
        "name": "Destroyed",
        "docs": [
          "An asset class was destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "320e",
        "name": "ForceCreated",
        "docs": [
          "Some asset class was force-created."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "320f",
        "name": "MetadataSet",
        "docs": [
          "New metadata has been set for an asset."
        ],
        "args": [
          "U32",
          "Vec<U8>",
          "Vec<U8>",
          "U8",
          "Bool"
        ],
        "args_name": [
          "asset_id",
          "name",
          "symbol",
          "decimals",
          "is_frozen"
        ],
        "args_type_name": [
          "AssetId",
          "Bytes",
          "Bytes",
          "u8",
          "bool"
        ]
      },
      {
        "lookup": "3210",
        "name": "MetadataCleared",
        "docs": [
          "Metadata has been cleared for an asset."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3211",
        "name": "ApprovedTransfer",
        "docs": [
          "(Additional) funds have been approved for transfer to a destination account."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "source",
          "delegate",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3212",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for account `delegate` was cancelled by `owner`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3213",
        "name": "TransferredApproved",
        "docs": [
          "An `amount` was transferred in its entirety from `owner` to `destination` by",
          "the approved `delegate`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate",
          "destination",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3214",
        "name": "AssetStatusChanged",
        "docs": [
          "An asset has had its attributes changed by the `Force` origin."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3215",
        "name": "AssetMinBalanceChanged",
        "docs": [
          "The min_balance of an asset has been updated by the asset owner."
        ],
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "new_min_balance"
        ],
        "args_type_name": [
          "AssetId",
          "Balance"
        ]
      },
      {
        "lookup": "3216",
        "name": "Touched",
        "docs": [
          "Some account `who` was created with a deposit from `depositor`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who",
          "depositor"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3217",
        "name": "Blocked",
        "docs": [
          "Some account `who` was blocked."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 130
    },
    "constants": [
      {
        "name": "RemoveItemsLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "e8030000",
        "docs": [
          " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
          "",
          " Must be configured to result in a weight that makes each call fit in a block."
        ]
      },
      {
        "name": "AssetDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "c07e5778000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an asset."
        ]
      },
      {
        "name": "AssetAccountDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00fe4d77000000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved for a non-provider asset account to be",
          " maintained."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "80569d77000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your asset."
        ]
      },
      {
        "name": "MetadataDepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "a0860100000000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes you store in your",
          " metadata."
        ]
      },
      {
        "name": "ApprovalDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e1f505000000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved when creating a new approval."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum length of a name or symbol stored on-chain."
        ]
      }
    ],
    "errors": [
      {
        "name": "BalanceLow",
        "doc": [
          "Account balance must be greater than or equal to the transfer amount."
        ]
      },
      {
        "name": "NoAccount",
        "doc": [
          "The account to alter does not exist."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "Unknown",
        "doc": [
          "The given asset ID is unknown."
        ]
      },
      {
        "name": "Frozen",
        "doc": [
          "The origin account is frozen."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The asset ID is already taken."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "Invalid witness data given."
        ]
      },
      {
        "name": "MinBalanceZero",
        "doc": [
          "Minimum balance should be non-zero."
        ]
      },
      {
        "name": "UnavailableConsumer",
        "doc": [
          "Unable to increment the consumer reference counters on the account. Either no provider",
          "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
          "fewer then the maximum number of consumers has been reached."
        ]
      },
      {
        "name": "BadMetadata",
        "doc": [
          "Invalid metadata given."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      },
      {
        "name": "WouldDie",
        "doc": [
          "The source account would not survive the transfer and it needs to stay alive."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The asset-account already exists."
        ]
      },
      {
        "name": "NoDeposit",
        "doc": [
          "The asset-account doesn't have an associated deposit."
        ]
      },
      {
        "name": "WouldBurn",
        "doc": [
          "The operation would result in funds being burned."
        ]
      },
      {
        "name": "LiveAsset",
        "doc": [
          "The asset is a live asset and is actively being used. Usually emit for operations such",
          "as `start_destroy` which require the asset to be in a destroying state."
        ]
      },
      {
        "name": "AssetNotLive",
        "doc": [
          "The asset is not live, and likely being destroyed."
        ]
      },
      {
        "name": "IncorrectStatus",
        "doc": [
          "The asset status is not the expected status."
        ]
      },
      {
        "name": "NotFrozen",
        "doc": [
          "The asset should be frozen before the given operation."
        ]
      },
      {
        "name": "CallbackFailed",
        "doc": [
          "Callback action resulted in error"
        ]
      }
    ],
    "errors_value": {
      "type": 410
    },
    "index": 50
  },
  {
    "name": "Uniques",
    "prefix": "Uniques",
    "storage": [
      {
        "name": "Class",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_uniques:types:CollectionDetails",
            "keys_id": 4,
            "value_id": 411
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of a collection."
        ]
      },
      {
        "name": "OwnershipAcceptance",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U32",
            "keys_id": 0,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " The collection, if any, of which an account is willing to take ownership."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32",
              "U32"
            ],
            "value": "NULL",
            "keys_id": 412,
            "value_id": 124
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items held by any given account; set out this way so that items owned by a single",
          " account can be enumerated."
        ]
      },
      {
        "name": "ClassAccount",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "NULL",
            "keys_id": 413,
            "value_id": 124
          }
        },
        "fallback": "0x00",
        "docs": [
          " The collections owned by any given account; set out this way so that collections owned by",
          " a single account can be enumerated."
        ]
      },
      {
        "name": "Asset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "pallet_uniques:types:ItemDetails",
            "keys_id": 155,
            "value_id": 414
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items in existence and their ownership details."
        ]
      },
      {
        "name": "ClassMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_uniques:types:CollectionMetadata",
            "keys_id": 4,
            "value_id": 415
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of a collection."
        ]
      },
      {
        "name": "InstanceMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "pallet_uniques:types:ItemMetadata",
            "keys_id": 155,
            "value_id": 416
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of an item."
        ]
      },
      {
        "name": "Attribute",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "option<U32>",
              "Vec<U8>"
            ],
            "value": "Tuple:Vec<U8>U128",
            "keys_id": 417,
            "value_id": 418
          }
        },
        "fallback": "0x00",
        "docs": [
          " Attributes of a collection."
        ]
      },
      {
        "name": "ItemPriceOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "Tuple:U128option<AccountId>",
            "keys_id": 155,
            "value_id": 419
          }
        },
        "fallback": "0x00",
        "docs": [
          " Price of an asset instance."
        ]
      },
      {
        "name": "CollectionMaxSupply",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U32",
            "keys_id": 4,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Keeps track of the number of items a collection might have."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3300",
        "name": "create",
        "docs": [
          "See [`Pallet::create`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3301",
        "name": "force_create",
        "docs": [
          "See [`Pallet::force_create`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "free_holding",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3302",
        "name": "destroy",
        "docs": [
          "See [`Pallet::destroy`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "witness",
            "type": "pallet_uniques:types:DestroyWitness",
            "type_name": "DestroyWitness"
          }
        ]
      },
      {
        "lookup": "3303",
        "name": "mint",
        "docs": [
          "See [`Pallet::mint`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3304",
        "name": "burn",
        "docs": [
          "See [`Pallet::burn`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "check_owner",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "3305",
        "name": "transfer",
        "docs": [
          "See [`Pallet::transfer`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3306",
        "name": "redeposit",
        "docs": [
          "See [`Pallet::redeposit`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "items",
            "type": "Vec<U32>",
            "type_name": "Vec<ItemId>"
          }
        ]
      },
      {
        "lookup": "3307",
        "name": "freeze",
        "docs": [
          "See [`Pallet::freeze`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3308",
        "name": "thaw",
        "docs": [
          "See [`Pallet::thaw`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3309",
        "name": "freeze_collection",
        "docs": [
          "See [`Pallet::freeze_collection`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "330a",
        "name": "thaw_collection",
        "docs": [
          "See [`Pallet::thaw_collection`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "330b",
        "name": "transfer_ownership",
        "docs": [
          "See [`Pallet::transfer_ownership`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "new_owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "330c",
        "name": "set_team",
        "docs": [
          "See [`Pallet::set_team`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "330d",
        "name": "approve_transfer",
        "docs": [
          "See [`Pallet::approve_transfer`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "330e",
        "name": "cancel_approval",
        "docs": [
          "See [`Pallet::cancel_approval`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "maybe_check_delegate",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "330f",
        "name": "force_item_status",
        "docs": [
          "See [`Pallet::force_item_status`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "free_holding",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3310",
        "name": "set_attribute",
        "docs": [
          "See [`Pallet::set_attribute`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U32>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          },
          {
            "name": "value",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, ValueLimit>"
          }
        ]
      },
      {
        "lookup": "3311",
        "name": "clear_attribute",
        "docs": [
          "See [`Pallet::clear_attribute`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U32>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          }
        ]
      },
      {
        "lookup": "3312",
        "name": "set_metadata",
        "docs": [
          "See [`Pallet::set_metadata`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3313",
        "name": "clear_metadata",
        "docs": [
          "See [`Pallet::clear_metadata`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3314",
        "name": "set_collection_metadata",
        "docs": [
          "See [`Pallet::set_collection_metadata`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3315",
        "name": "clear_collection_metadata",
        "docs": [
          "See [`Pallet::clear_collection_metadata`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "3316",
        "name": "set_accept_ownership",
        "docs": [
          "See [`Pallet::set_accept_ownership`]."
        ],
        "args": [
          {
            "name": "maybe_collection",
            "type": "option<U32>",
            "type_name": "Option<CollectionId>"
          }
        ]
      },
      {
        "lookup": "3317",
        "name": "set_collection_max_supply",
        "docs": [
          "See [`Pallet::set_collection_max_supply`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "max_supply",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "3318",
        "name": "set_price",
        "docs": [
          "See [`Pallet::set_price`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "price",
            "type": "option<U128>",
            "type_name": "Option<ItemPrice>"
          },
          {
            "name": "whitelisted_buyer",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "3319",
        "name": "buy_item",
        "docs": [
          "See [`Pallet::buy_item`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "bid_price",
            "type": "U128",
            "type_name": "ItemPrice"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 349
    },
    "events": [
      {
        "lookup": "3300",
        "name": "Created",
        "docs": [
          "A `collection` was created."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3301",
        "name": "ForceCreated",
        "docs": [
          "A `collection` was force-created."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId"
        ]
      },
      {
        "lookup": "3302",
        "name": "Destroyed",
        "docs": [
          "A `collection` was destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "3303",
        "name": "Issued",
        "docs": [
          "An `item` was issued."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3304",
        "name": "Transferred",
        "docs": [
          "An `item` was transferred."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "from",
          "to"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3305",
        "name": "Burned",
        "docs": [
          "An `item` was destroyed."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3306",
        "name": "Frozen",
        "docs": [
          "Some `item` was frozen."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "3307",
        "name": "Thawed",
        "docs": [
          "Some `item` was thawed."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "3308",
        "name": "CollectionFrozen",
        "docs": [
          "Some `collection` was frozen."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "3309",
        "name": "CollectionThawed",
        "docs": [
          "Some `collection` was thawed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "330a",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "new_owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId"
        ]
      },
      {
        "lookup": "330b",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "330c",
        "name": "ApprovedTransfer",
        "docs": [
          "An `item` of a `collection` has been approved by the `owner` for transfer by",
          "a `delegate`."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "330d",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for a `delegate` account to transfer the `item` of an item",
          "`collection` was cancelled by its `owner`."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "330e",
        "name": "ItemStatusChanged",
        "docs": [
          "A `collection` has had its attributes changed by the `Force` origin."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "330f",
        "name": "CollectionMetadataSet",
        "docs": [
          "New metadata has been set for a `collection`."
        ],
        "args": [
          "U32",
          "Vec<U8>",
          "Bool"
        ],
        "args_name": [
          "collection",
          "data",
          "is_frozen"
        ],
        "args_type_name": [
          "CollectionId",
          "BoundedVec<u8, StringLimit>",
          "bool"
        ]
      },
      {
        "lookup": "3310",
        "name": "CollectionMetadataCleared",
        "docs": [
          "Metadata has been cleared for a `collection`."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "3311",
        "name": "MetadataSet",
        "docs": [
          "New metadata has been set for an item."
        ],
        "args": [
          "U32",
          "U32",
          "Vec<U8>",
          "Bool"
        ],
        "args_name": [
          "collection",
          "item",
          "data",
          "is_frozen"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "BoundedVec<u8, StringLimit>",
          "bool"
        ]
      },
      {
        "lookup": "3312",
        "name": "MetadataCleared",
        "docs": [
          "Metadata has been cleared for an item."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "3313",
        "name": "Redeposited",
        "docs": [
          "Metadata has been cleared for an item."
        ],
        "args": [
          "U32",
          "Vec<U32>"
        ],
        "args_name": [
          "collection",
          "successful_items"
        ],
        "args_type_name": [
          "CollectionId",
          "Vec<ItemId>"
        ]
      },
      {
        "lookup": "3314",
        "name": "AttributeSet",
        "docs": [
          "New attribute metadata has been set for a `collection` or `item`."
        ],
        "args": [
          "U32",
          "option<U32>",
          "Vec<U8>",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "maybe_item",
          "key",
          "value"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "BoundedVec<u8, KeyLimit>",
          "BoundedVec<u8, ValueLimit>"
        ]
      },
      {
        "lookup": "3315",
        "name": "AttributeCleared",
        "docs": [
          "Attribute metadata has been cleared for a `collection` or `item`."
        ],
        "args": [
          "U32",
          "option<U32>",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "maybe_item",
          "key"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "BoundedVec<u8, KeyLimit>"
        ]
      },
      {
        "lookup": "3316",
        "name": "OwnershipAcceptanceChanged",
        "docs": [
          "Ownership acceptance has changed for an account."
        ],
        "args": [
          "AccountId",
          "option<U32>"
        ],
        "args_name": [
          "who",
          "maybe_collection"
        ],
        "args_type_name": [
          "AccountId",
          "Option<CollectionId>"
        ]
      },
      {
        "lookup": "3317",
        "name": "CollectionMaxSupplySet",
        "docs": [
          "Max supply has been set for a collection."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "max_supply"
        ],
        "args_type_name": [
          "CollectionId",
          "u32"
        ]
      },
      {
        "lookup": "3318",
        "name": "ItemPriceSet",
        "docs": [
          "The price was set for the instance."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "option<AccountId>"
        ],
        "args_name": [
          "collection",
          "item",
          "price",
          "whitelisted_buyer"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "ItemPrice",
          "Option<AccountId>"
        ]
      },
      {
        "lookup": "3319",
        "name": "ItemPriceRemoved",
        "docs": [
          "The price for the instance was removed."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "331a",
        "name": "ItemBought",
        "docs": [
          "An item was bought."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "price",
          "seller",
          "buyer"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "ItemPrice",
          "AccountId",
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 131
    },
    "constants": [
      {
        "name": "CollectionDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e87648170000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for collection."
        ]
      },
      {
        "name": "ItemDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e1f505000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an item."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "a06afa77000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your item."
        ]
      },
      {
        "name": "AttributeDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00943577000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding an attribute to an item."
        ]
      },
      {
        "name": "DepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "a0860100000000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes store in metadata,",
          " either \"normal\" metadata or attribute metadata."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "80000000",
        "docs": [
          " The maximum length of data stored on-chain."
        ]
      },
      {
        "name": "KeyLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum length of an attribute key."
        ]
      },
      {
        "name": "ValueLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "40000000",
        "docs": [
          " The maximum length of an attribute value."
        ]
      }
    ],
    "errors": [
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "UnknownCollection",
        "doc": [
          "The given item ID is unknown."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The item ID has already been used for an item."
        ]
      },
      {
        "name": "WrongOwner",
        "doc": [
          "The owner turned out to be different to what was expected."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "Invalid witness data given."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The item ID is already taken."
        ]
      },
      {
        "name": "Frozen",
        "doc": [
          "The item or collection is frozen."
        ]
      },
      {
        "name": "WrongDelegate",
        "doc": [
          "The delegate turned out to be different to what was expected."
        ]
      },
      {
        "name": "NoDelegate",
        "doc": [
          "There is no delegate approved."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      },
      {
        "name": "Unaccepted",
        "doc": [
          "The named owner has not signed ownership of the collection is acceptable."
        ]
      },
      {
        "name": "Locked",
        "doc": [
          "The item is locked."
        ]
      },
      {
        "name": "MaxSupplyReached",
        "doc": [
          "All items have been minted."
        ]
      },
      {
        "name": "MaxSupplyAlreadySet",
        "doc": [
          "The max supply has already been set."
        ]
      },
      {
        "name": "MaxSupplyTooSmall",
        "doc": [
          "The provided max supply is less to the amount of items a collection already has."
        ]
      },
      {
        "name": "UnknownItem",
        "doc": [
          "The given item ID is unknown."
        ]
      },
      {
        "name": "NotForSale",
        "doc": [
          "Item is not for sale."
        ]
      },
      {
        "name": "BidTooLow",
        "doc": [
          "The provided bid is too low."
        ]
      }
    ],
    "errors_value": {
      "type": 420
    },
    "index": 51
  },
  {
    "name": "Nfts",
    "prefix": "Nfts",
    "storage": [
      {
        "name": "Collection",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_nfts:types:CollectionDetails",
            "keys_id": 4,
            "value_id": 421
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of a collection."
        ]
      },
      {
        "name": "OwnershipAcceptance",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U32",
            "keys_id": 0,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " The collection, if any, of which an account is willing to take ownership."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32",
              "U32"
            ],
            "value": "NULL",
            "keys_id": 412,
            "value_id": 124
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items held by any given account; set out this way so that items owned by a single",
          " account can be enumerated."
        ]
      },
      {
        "name": "CollectionAccount",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "NULL",
            "keys_id": 413,
            "value_id": 124
          }
        },
        "fallback": "0x00",
        "docs": [
          " The collections owned by any given account; set out this way so that collections owned by",
          " a single account can be enumerated."
        ]
      },
      {
        "name": "CollectionRoleOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId"
            ],
            "value": "U8",
            "keys_id": 402,
            "value_id": 422
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items in existence and their ownership details.",
          " Stores collection roles as per account."
        ]
      },
      {
        "name": "Item",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "pallet_nfts:types:ItemDetails",
            "keys_id": 155,
            "value_id": 424
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items in existence and their ownership details."
        ]
      },
      {
        "name": "CollectionMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_nfts:types:CollectionMetadata",
            "keys_id": 4,
            "value_id": 430
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of a collection."
        ]
      },
      {
        "name": "ItemMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "pallet_nfts:types:ItemMetadata",
            "keys_id": 155,
            "value_id": 431
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of an item."
        ]
      },
      {
        "name": "Attribute",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "option<U32>",
              "pallet_nfts:types:AttributeNamespace",
              "Vec<U8>"
            ],
            "value": "Tuple:Vec<U8>pallet_nfts:types:AttributeDeposit",
            "keys_id": 433,
            "value_id": 434
          }
        },
        "fallback": "0x00",
        "docs": [
          " Attributes of a collection."
        ]
      },
      {
        "name": "ItemPriceOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "Tuple:U128option<AccountId>",
            "keys_id": 155,
            "value_id": 419
          }
        },
        "fallback": "0x00",
        "docs": [
          " A price of an item."
        ]
      },
      {
        "name": "ItemAttributesApprovalsOf",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "Vec<AccountId>",
            "keys_id": 155,
            "value_id": 436
          }
        },
        "fallback": "0x00",
        "docs": [
          " Item attribute approvals."
        ]
      },
      {
        "name": "NextCollectionId",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Stores the `CollectionId` that is going to be used for the next collection.",
          " This gets incremented whenever a new collection is created."
        ]
      },
      {
        "name": "PendingSwapOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "pallet_nfts:types:PendingSwap",
            "keys_id": 155,
            "value_id": 438
          }
        },
        "fallback": "0x00",
        "docs": [
          " Handles all the pending swaps."
        ]
      },
      {
        "name": "CollectionConfigOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_nfts:types:CollectionConfig",
            "keys_id": 4,
            "value_id": 354
          }
        },
        "fallback": "0x00",
        "docs": [
          " Config of a collection."
        ]
      },
      {
        "name": "ItemConfigOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "U64",
            "keys_id": 155,
            "value_id": 364
          }
        },
        "fallback": "0x00",
        "docs": [
          " Config of an item."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3400",
        "name": "create",
        "docs": [
          "See [`Pallet::create`]."
        ],
        "args": [
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "config",
            "type": "pallet_nfts:types:CollectionConfig",
            "type_name": "CollectionConfigFor"
          }
        ]
      },
      {
        "lookup": "3401",
        "name": "force_create",
        "docs": [
          "See [`Pallet::force_create`]."
        ],
        "args": [
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "config",
            "type": "pallet_nfts:types:CollectionConfig",
            "type_name": "CollectionConfigFor"
          }
        ]
      },
      {
        "lookup": "3402",
        "name": "destroy",
        "docs": [
          "See [`Pallet::destroy`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "witness",
            "type": "pallet_nfts:types:DestroyWitness",
            "type_name": "DestroyWitness"
          }
        ]
      },
      {
        "lookup": "3403",
        "name": "mint",
        "docs": [
          "See [`Pallet::mint`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "mint_to",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "witness_data",
            "type": "option<pallet_nfts:types:MintWitness>",
            "type_name": "Option<MintWitness<ItemId, DepositBalanceOf>>"
          }
        ]
      },
      {
        "lookup": "3404",
        "name": "force_mint",
        "docs": [
          "See [`Pallet::force_mint`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "mint_to",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "item_config",
            "type": "U64",
            "type_name": "ItemConfig"
          }
        ]
      },
      {
        "lookup": "3405",
        "name": "burn",
        "docs": [
          "See [`Pallet::burn`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3406",
        "name": "transfer",
        "docs": [
          "See [`Pallet::transfer`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3407",
        "name": "redeposit",
        "docs": [
          "See [`Pallet::redeposit`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "items",
            "type": "Vec<U32>",
            "type_name": "Vec<ItemId>"
          }
        ]
      },
      {
        "lookup": "3408",
        "name": "lock_item_transfer",
        "docs": [
          "See [`Pallet::lock_item_transfer`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3409",
        "name": "unlock_item_transfer",
        "docs": [
          "See [`Pallet::unlock_item_transfer`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "340a",
        "name": "lock_collection",
        "docs": [
          "See [`Pallet::lock_collection`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "lock_settings",
            "type": "U64",
            "type_name": "CollectionSettings"
          }
        ]
      },
      {
        "lookup": "340b",
        "name": "transfer_ownership",
        "docs": [
          "See [`Pallet::transfer_ownership`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "new_owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "340c",
        "name": "set_team",
        "docs": [
          "See [`Pallet::set_team`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "issuer",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          },
          {
            "name": "admin",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          },
          {
            "name": "freezer",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "340d",
        "name": "force_collection_owner",
        "docs": [
          "See [`Pallet::force_collection_owner`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "340e",
        "name": "force_collection_config",
        "docs": [
          "See [`Pallet::force_collection_config`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "config",
            "type": "pallet_nfts:types:CollectionConfig",
            "type_name": "CollectionConfigFor"
          }
        ]
      },
      {
        "lookup": "340f",
        "name": "approve_transfer",
        "docs": [
          "See [`Pallet::approve_transfer`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "maybe_deadline",
            "type": "option<U32>",
            "type_name": "Option<BlockNumberFor>"
          }
        ]
      },
      {
        "lookup": "3410",
        "name": "cancel_approval",
        "docs": [
          "See [`Pallet::cancel_approval`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3411",
        "name": "clear_all_transfer_approvals",
        "docs": [
          "See [`Pallet::clear_all_transfer_approvals`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3412",
        "name": "lock_item_properties",
        "docs": [
          "See [`Pallet::lock_item_properties`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "lock_metadata",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "lock_attributes",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3413",
        "name": "set_attribute",
        "docs": [
          "See [`Pallet::set_attribute`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U32>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "namespace",
            "type": "pallet_nfts:types:AttributeNamespace",
            "type_name": "AttributeNamespace<AccountId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          },
          {
            "name": "value",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, ValueLimit>"
          }
        ]
      },
      {
        "lookup": "3414",
        "name": "force_set_attribute",
        "docs": [
          "See [`Pallet::force_set_attribute`]."
        ],
        "args": [
          {
            "name": "set_as",
            "type": "option<AccountId>",
            "type_name": "Option<AccountId>"
          },
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U32>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "namespace",
            "type": "pallet_nfts:types:AttributeNamespace",
            "type_name": "AttributeNamespace<AccountId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          },
          {
            "name": "value",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, ValueLimit>"
          }
        ]
      },
      {
        "lookup": "3415",
        "name": "clear_attribute",
        "docs": [
          "See [`Pallet::clear_attribute`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U32>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "namespace",
            "type": "pallet_nfts:types:AttributeNamespace",
            "type_name": "AttributeNamespace<AccountId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          }
        ]
      },
      {
        "lookup": "3416",
        "name": "approve_item_attributes",
        "docs": [
          "See [`Pallet::approve_item_attributes`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3417",
        "name": "cancel_item_attributes_approval",
        "docs": [
          "See [`Pallet::cancel_item_attributes_approval`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "witness",
            "type": "U32",
            "type_name": "CancelAttributesApprovalWitness"
          }
        ]
      },
      {
        "lookup": "3418",
        "name": "set_metadata",
        "docs": [
          "See [`Pallet::set_metadata`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          }
        ]
      },
      {
        "lookup": "3419",
        "name": "clear_metadata",
        "docs": [
          "See [`Pallet::clear_metadata`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "341a",
        "name": "set_collection_metadata",
        "docs": [
          "See [`Pallet::set_collection_metadata`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          }
        ]
      },
      {
        "lookup": "341b",
        "name": "clear_collection_metadata",
        "docs": [
          "See [`Pallet::clear_collection_metadata`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "341c",
        "name": "set_accept_ownership",
        "docs": [
          "See [`Pallet::set_accept_ownership`]."
        ],
        "args": [
          {
            "name": "maybe_collection",
            "type": "option<U32>",
            "type_name": "Option<CollectionId>"
          }
        ]
      },
      {
        "lookup": "341d",
        "name": "set_collection_max_supply",
        "docs": [
          "See [`Pallet::set_collection_max_supply`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "max_supply",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "341e",
        "name": "update_mint_settings",
        "docs": [
          "See [`Pallet::update_mint_settings`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "mint_settings",
            "type": "pallet_nfts:types:MintSettings",
            "type_name": "MintSettings<BalanceOf, BlockNumberFor, CollectionId>"
          }
        ]
      },
      {
        "lookup": "341f",
        "name": "set_price",
        "docs": [
          "See [`Pallet::set_price`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "price",
            "type": "option<U128>",
            "type_name": "Option<ItemPrice>"
          },
          {
            "name": "whitelisted_buyer",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "3420",
        "name": "buy_item",
        "docs": [
          "See [`Pallet::buy_item`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "bid_price",
            "type": "U128",
            "type_name": "ItemPrice"
          }
        ]
      },
      {
        "lookup": "3421",
        "name": "pay_tips",
        "docs": [
          "See [`Pallet::pay_tips`]."
        ],
        "args": [
          {
            "name": "tips",
            "type": "Vec<pallet_nfts:types:ItemTip>",
            "type_name": "BoundedVec<ItemTipOf, MaxTips>"
          }
        ]
      },
      {
        "lookup": "3422",
        "name": "create_swap",
        "docs": [
          "See [`Pallet::create_swap`]."
        ],
        "args": [
          {
            "name": "offered_collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "offered_item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "desired_collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_desired_item",
            "type": "option<U32>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "maybe_price",
            "type": "option<pallet_nfts:types:PriceWithDirection>",
            "type_name": "Option<PriceWithDirection<ItemPrice>>"
          },
          {
            "name": "duration",
            "type": "U32",
            "type_name": "BlockNumberFor"
          }
        ]
      },
      {
        "lookup": "3423",
        "name": "cancel_swap",
        "docs": [
          "See [`Pallet::cancel_swap`]."
        ],
        "args": [
          {
            "name": "offered_collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "offered_item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3424",
        "name": "claim_swap",
        "docs": [
          "See [`Pallet::claim_swap`]."
        ],
        "args": [
          {
            "name": "send_collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "send_item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "receive_collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "receive_item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "witness_price",
            "type": "option<pallet_nfts:types:PriceWithDirection>",
            "type_name": "Option<PriceWithDirection<ItemPrice>>"
          }
        ]
      },
      {
        "lookup": "3425",
        "name": "mint_pre_signed",
        "docs": [
          "See [`Pallet::mint_pre_signed`]."
        ],
        "args": [
          {
            "name": "mint_data",
            "type": "pallet_nfts:types:PreSignedMint",
            "type_name": "Box<PreSignedMintOf>"
          },
          {
            "name": "signature",
            "type": "sp_runtime:MultiSignature",
            "type_name": "OffchainSignature"
          },
          {
            "name": "signer",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3426",
        "name": "set_attributes_pre_signed",
        "docs": [
          "See [`Pallet::set_attributes_pre_signed`]."
        ],
        "args": [
          {
            "name": "data",
            "type": "pallet_nfts:types:PreSignedAttributes",
            "type_name": "PreSignedAttributesOf"
          },
          {
            "name": "signature",
            "type": "sp_runtime:MultiSignature",
            "type_name": "OffchainSignature"
          },
          {
            "name": "signer",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 353
    },
    "events": [
      {
        "lookup": "3400",
        "name": "Created",
        "docs": [
          "A `collection` was created."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3401",
        "name": "ForceCreated",
        "docs": [
          "A `collection` was force-created."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId"
        ]
      },
      {
        "lookup": "3402",
        "name": "Destroyed",
        "docs": [
          "A `collection` was destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "3403",
        "name": "Issued",
        "docs": [
          "An `item` was issued."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3404",
        "name": "Transferred",
        "docs": [
          "An `item` was transferred."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "from",
          "to"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3405",
        "name": "Burned",
        "docs": [
          "An `item` was destroyed."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3406",
        "name": "ItemTransferLocked",
        "docs": [
          "An `item` became non-transferable."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "3407",
        "name": "ItemTransferUnlocked",
        "docs": [
          "An `item` became transferable."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "3408",
        "name": "ItemPropertiesLocked",
        "docs": [
          "`item` metadata or attributes were locked."
        ],
        "args": [
          "U32",
          "U32",
          "Bool",
          "Bool"
        ],
        "args_name": [
          "collection",
          "item",
          "lock_metadata",
          "lock_attributes"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "bool",
          "bool"
        ]
      },
      {
        "lookup": "3409",
        "name": "CollectionLocked",
        "docs": [
          "Some `collection` was locked."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "340a",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "new_owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId"
        ]
      },
      {
        "lookup": "340b",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "U32",
          "option<AccountId>",
          "option<AccountId>",
          "option<AccountId>"
        ],
        "args_name": [
          "collection",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<AccountId>",
          "Option<AccountId>",
          "Option<AccountId>"
        ]
      },
      {
        "lookup": "340c",
        "name": "TransferApproved",
        "docs": [
          "An `item` of a `collection` has been approved by the `owner` for transfer by",
          "a `delegate`."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId",
          "option<U32>"
        ],
        "args_name": [
          "collection",
          "item",
          "owner",
          "delegate",
          "deadline"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId",
          "Option<BlockNumberFor>"
        ]
      },
      {
        "lookup": "340d",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for a `delegate` account to transfer the `item` of an item",
          "`collection` was cancelled by its `owner`."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "340e",
        "name": "AllApprovalsCancelled",
        "docs": [
          "All approvals of an item got cancelled."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "340f",
        "name": "CollectionConfigChanged",
        "docs": [
          "A `collection` has had its config changed by the `Force` origin."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "3410",
        "name": "CollectionMetadataSet",
        "docs": [
          "New metadata has been set for a `collection`."
        ],
        "args": [
          "U32",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "data"
        ],
        "args_type_name": [
          "CollectionId",
          "BoundedVec<u8, StringLimit>"
        ]
      },
      {
        "lookup": "3411",
        "name": "CollectionMetadataCleared",
        "docs": [
          "Metadata has been cleared for a `collection`."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "3412",
        "name": "ItemMetadataSet",
        "docs": [
          "New metadata has been set for an item."
        ],
        "args": [
          "U32",
          "U32",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "item",
          "data"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "BoundedVec<u8, StringLimit>"
        ]
      },
      {
        "lookup": "3413",
        "name": "ItemMetadataCleared",
        "docs": [
          "Metadata has been cleared for an item."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "3414",
        "name": "Redeposited",
        "docs": [
          "The deposit for a set of `item`s within a `collection` has been updated."
        ],
        "args": [
          "U32",
          "Vec<U32>"
        ],
        "args_name": [
          "collection",
          "successful_items"
        ],
        "args_type_name": [
          "CollectionId",
          "Vec<ItemId>"
        ]
      },
      {
        "lookup": "3415",
        "name": "AttributeSet",
        "docs": [
          "New attribute metadata has been set for a `collection` or `item`."
        ],
        "args": [
          "U32",
          "option<U32>",
          "Vec<U8>",
          "Vec<U8>",
          "pallet_nfts:types:AttributeNamespace"
        ],
        "args_name": [
          "collection",
          "maybe_item",
          "key",
          "value",
          "namespace"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "BoundedVec<u8, KeyLimit>",
          "BoundedVec<u8, ValueLimit>",
          "AttributeNamespace<AccountId>"
        ]
      },
      {
        "lookup": "3416",
        "name": "AttributeCleared",
        "docs": [
          "Attribute metadata has been cleared for a `collection` or `item`."
        ],
        "args": [
          "U32",
          "option<U32>",
          "Vec<U8>",
          "pallet_nfts:types:AttributeNamespace"
        ],
        "args_name": [
          "collection",
          "maybe_item",
          "key",
          "namespace"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "BoundedVec<u8, KeyLimit>",
          "AttributeNamespace<AccountId>"
        ]
      },
      {
        "lookup": "3417",
        "name": "ItemAttributesApprovalAdded",
        "docs": [
          "A new approval to modify item attributes was added."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3418",
        "name": "ItemAttributesApprovalRemoved",
        "docs": [
          "A new approval to modify item attributes was removed."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3419",
        "name": "OwnershipAcceptanceChanged",
        "docs": [
          "Ownership acceptance has changed for an account."
        ],
        "args": [
          "AccountId",
          "option<U32>"
        ],
        "args_name": [
          "who",
          "maybe_collection"
        ],
        "args_type_name": [
          "AccountId",
          "Option<CollectionId>"
        ]
      },
      {
        "lookup": "341a",
        "name": "CollectionMaxSupplySet",
        "docs": [
          "Max supply has been set for a collection."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "max_supply"
        ],
        "args_type_name": [
          "CollectionId",
          "u32"
        ]
      },
      {
        "lookup": "341b",
        "name": "CollectionMintSettingsUpdated",
        "docs": [
          "Mint settings for a collection had changed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "341c",
        "name": "NextCollectionIdIncremented",
        "docs": [
          "Event gets emitted when the `NextCollectionId` gets incremented."
        ],
        "args": [
          "option<U32>"
        ],
        "args_name": [
          "next_id"
        ],
        "args_type_name": [
          "Option<CollectionId>"
        ]
      },
      {
        "lookup": "341d",
        "name": "ItemPriceSet",
        "docs": [
          "The price was set for the item."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "option<AccountId>"
        ],
        "args_name": [
          "collection",
          "item",
          "price",
          "whitelisted_buyer"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "ItemPrice",
          "Option<AccountId>"
        ]
      },
      {
        "lookup": "341e",
        "name": "ItemPriceRemoved",
        "docs": [
          "The price for the item was removed."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "341f",
        "name": "ItemBought",
        "docs": [
          "An item was bought."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "price",
          "seller",
          "buyer"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "ItemPrice",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3420",
        "name": "TipSent",
        "docs": [
          "A tip was sent."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "collection",
          "item",
          "sender",
          "receiver",
          "amount"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId",
          "DepositBalanceOf"
        ]
      },
      {
        "lookup": "3421",
        "name": "SwapCreated",
        "docs": [
          "An `item` swap intent was created."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "option<U32>",
          "option<pallet_nfts:types:PriceWithDirection>",
          "U32"
        ],
        "args_name": [
          "offered_collection",
          "offered_item",
          "desired_collection",
          "desired_item",
          "price",
          "deadline"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "CollectionId",
          "Option<ItemId>",
          "Option<PriceWithDirection<ItemPrice>>",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "3422",
        "name": "SwapCancelled",
        "docs": [
          "The swap was cancelled."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "option<U32>",
          "option<pallet_nfts:types:PriceWithDirection>",
          "U32"
        ],
        "args_name": [
          "offered_collection",
          "offered_item",
          "desired_collection",
          "desired_item",
          "price",
          "deadline"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "CollectionId",
          "Option<ItemId>",
          "Option<PriceWithDirection<ItemPrice>>",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "3423",
        "name": "SwapClaimed",
        "docs": [
          "The swap has been claimed."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "U32",
          "U32",
          "AccountId",
          "option<pallet_nfts:types:PriceWithDirection>",
          "U32"
        ],
        "args_name": [
          "sent_collection",
          "sent_item",
          "sent_item_owner",
          "received_collection",
          "received_item",
          "received_item_owner",
          "price",
          "deadline"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "CollectionId",
          "ItemId",
          "AccountId",
          "Option<PriceWithDirection<ItemPrice>>",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "3424",
        "name": "PreSignedAttributesSet",
        "docs": [
          "New attributes have been set for an `item` of the `collection`."
        ],
        "args": [
          "U32",
          "U32",
          "pallet_nfts:types:AttributeNamespace"
        ],
        "args_name": [
          "collection",
          "item",
          "namespace"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AttributeNamespace<AccountId>"
        ]
      },
      {
        "lookup": "3425",
        "name": "PalletAttributeSet",
        "docs": [
          "A new attribute in the `Pallet` namespace was set for the `collection` or an `item`",
          "within that `collection`."
        ],
        "args": [
          "U32",
          "option<U32>",
          "pallet_nfts:types:PalletAttributes",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "item",
          "attribute",
          "value"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "PalletAttributes<CollectionId>",
          "BoundedVec<u8, ValueLimit>"
        ]
      }
    ],
    "events_value": {
      "type": 138
    },
    "constants": [
      {
        "name": "CollectionDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40f1fb77000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for collection."
        ]
      },
      {
        "name": "ItemDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "10320103000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an item."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "1071ff0b000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your item."
        ]
      },
      {
        "name": "AttributeDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00c2eb0b000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding an attribute to an item."
        ]
      },
      {
        "name": "DepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "a0860100000000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes store in metadata,",
          " either \"normal\" metadata or attribute metadata."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00010000",
        "docs": [
          " The maximum length of data stored on-chain."
        ]
      },
      {
        "name": "KeyLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "40000000",
        "docs": [
          " The maximum length of an attribute key."
        ]
      },
      {
        "name": "ValueLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00010000",
        "docs": [
          " The maximum length of an attribute value."
        ]
      },
      {
        "name": "ApprovalsLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "14000000",
        "docs": [
          " The maximum approvals an item could have."
        ]
      },
      {
        "name": "ItemAttributesApprovalsLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "1e000000",
        "docs": [
          " The maximum attributes approvals an item could have."
        ]
      },
      {
        "name": "MaxTips",
        "type": "U32",
        "type_value": 4,
        "constants_value": "0a000000",
        "docs": [
          " The max number of tips a user could send."
        ]
      },
      {
        "name": "MaxDeadlineDuration",
        "type": "U32",
        "type_value": 4,
        "constants_value": "008d2700",
        "docs": [
          " The max duration in blocks for deadlines."
        ]
      },
      {
        "name": "MaxAttributesPerCall",
        "type": "U32",
        "type_value": 4,
        "constants_value": "0a000000",
        "docs": [
          " The max number of attributes a user could set per call."
        ]
      },
      {
        "name": "Features",
        "type": "U64",
        "type_value": 439,
        "constants_value": "0000000000000000",
        "docs": [
          " Disables some of pallet's features."
        ]
      }
    ],
    "errors": [
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "UnknownCollection",
        "doc": [
          "The given item ID is unknown."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The item ID has already been used for an item."
        ]
      },
      {
        "name": "ApprovalExpired",
        "doc": [
          "The approval had a deadline that expired, so the approval isn't valid anymore."
        ]
      },
      {
        "name": "WrongOwner",
        "doc": [
          "The owner turned out to be different to what was expected."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "The witness data given does not match the current state of the chain."
        ]
      },
      {
        "name": "CollectionIdInUse",
        "doc": [
          "Collection ID is already taken."
        ]
      },
      {
        "name": "ItemsNonTransferable",
        "doc": [
          "Items within that collection are non-transferable."
        ]
      },
      {
        "name": "NotDelegate",
        "doc": [
          "The provided account is not a delegate."
        ]
      },
      {
        "name": "WrongDelegate",
        "doc": [
          "The delegate turned out to be different to what was expected."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      },
      {
        "name": "Unaccepted",
        "doc": [
          "The named owner has not signed ownership acceptance of the collection."
        ]
      },
      {
        "name": "ItemLocked",
        "doc": [
          "The item is locked (non-transferable)."
        ]
      },
      {
        "name": "LockedItemAttributes",
        "doc": [
          "Item's attributes are locked."
        ]
      },
      {
        "name": "LockedCollectionAttributes",
        "doc": [
          "Collection's attributes are locked."
        ]
      },
      {
        "name": "LockedItemMetadata",
        "doc": [
          "Item's metadata is locked."
        ]
      },
      {
        "name": "LockedCollectionMetadata",
        "doc": [
          "Collection's metadata is locked."
        ]
      },
      {
        "name": "MaxSupplyReached",
        "doc": [
          "All items have been minted."
        ]
      },
      {
        "name": "MaxSupplyLocked",
        "doc": [
          "The max supply is locked and can't be changed."
        ]
      },
      {
        "name": "MaxSupplyTooSmall",
        "doc": [
          "The provided max supply is less than the number of items a collection already has."
        ]
      },
      {
        "name": "UnknownItem",
        "doc": [
          "The given item ID is unknown."
        ]
      },
      {
        "name": "UnknownSwap",
        "doc": [
          "Swap doesn't exist."
        ]
      },
      {
        "name": "MetadataNotFound",
        "doc": [
          "The given item has no metadata set."
        ]
      },
      {
        "name": "AttributeNotFound",
        "doc": [
          "The provided attribute can't be found."
        ]
      },
      {
        "name": "NotForSale",
        "doc": [
          "Item is not for sale."
        ]
      },
      {
        "name": "BidTooLow",
        "doc": [
          "The provided bid is too low."
        ]
      },
      {
        "name": "ReachedApprovalLimit",
        "doc": [
          "The item has reached its approval limit."
        ]
      },
      {
        "name": "DeadlineExpired",
        "doc": [
          "The deadline has already expired."
        ]
      },
      {
        "name": "WrongDuration",
        "doc": [
          "The duration provided should be less than or equal to `MaxDeadlineDuration`."
        ]
      },
      {
        "name": "MethodDisabled",
        "doc": [
          "The method is disabled by system settings."
        ]
      },
      {
        "name": "WrongSetting",
        "doc": [
          "The provided setting can't be set."
        ]
      },
      {
        "name": "InconsistentItemConfig",
        "doc": [
          "Item's config already exists and should be equal to the provided one."
        ]
      },
      {
        "name": "NoConfig",
        "doc": [
          "Config for a collection or an item can't be found."
        ]
      },
      {
        "name": "RolesNotCleared",
        "doc": [
          "Some roles were not cleared."
        ]
      },
      {
        "name": "MintNotStarted",
        "doc": [
          "Mint has not started yet."
        ]
      },
      {
        "name": "MintEnded",
        "doc": [
          "Mint has already ended."
        ]
      },
      {
        "name": "AlreadyClaimed",
        "doc": [
          "The provided Item was already used for claiming."
        ]
      },
      {
        "name": "IncorrectData",
        "doc": [
          "The provided data is incorrect."
        ]
      },
      {
        "name": "WrongOrigin",
        "doc": [
          "The extrinsic was sent by the wrong origin."
        ]
      },
      {
        "name": "WrongSignature",
        "doc": [
          "The provided signature is incorrect."
        ]
      },
      {
        "name": "IncorrectMetadata",
        "doc": [
          "The provided metadata might be too long."
        ]
      },
      {
        "name": "MaxAttributesLimitReached",
        "doc": [
          "Can't set more attributes per one call."
        ]
      },
      {
        "name": "WrongNamespace",
        "doc": [
          "The provided namespace isn't supported in this call."
        ]
      },
      {
        "name": "CollectionNotEmpty",
        "doc": [
          "Can't delete non-empty collections."
        ]
      },
      {
        "name": "WitnessRequired",
        "doc": [
          "The witness data should be provided."
        ]
      }
    ],
    "errors_value": {
      "type": 441
    },
    "index": 52
  },
  {
    "name": "ForeignAssets",
    "prefix": "ForeignAssets",
    "storage": [
      {
        "name": "Asset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "staging_xcm:v3:multilocation:MultiLocation"
            ],
            "value": "pallet_assets:types:AssetDetails",
            "keys_id": 37,
            "value_id": 400
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of an asset."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "staging_xcm:v3:multilocation:MultiLocation",
              "AccountId"
            ],
            "value": "pallet_assets:types:AssetAccount",
            "keys_id": 442,
            "value_id": 403
          }
        },
        "fallback": "0x00",
        "docs": [
          " The holdings of a specific account for a specific asset."
        ]
      },
      {
        "name": "Approvals",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "staging_xcm:v3:multilocation:MultiLocation",
              "AccountId",
              "AccountId"
            ],
            "value": "pallet_assets:types:Approval",
            "keys_id": 443,
            "value_id": 407
          }
        },
        "fallback": "0x00",
        "docs": [
          " Approved balance transfers. First balance is the amount approved for transfer. Second",
          " is the amount of `T::Currency` reserved for storing this.",
          " First key is the asset ID, second key is the owner and third key is the delegate."
        ]
      },
      {
        "name": "Metadata",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "staging_xcm:v3:multilocation:MultiLocation"
            ],
            "value": "pallet_assets:types:AssetMetadata@444",
            "keys_id": 37,
            "value_id": 444
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000",
        "docs": [
          " Metadata of an asset."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3500",
        "name": "create",
        "docs": [
          "See [`Pallet::create`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "min_balance",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3501",
        "name": "force_create",
        "docs": [
          "See [`Pallet::force_create`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3502",
        "name": "start_destroy",
        "docs": [
          "See [`Pallet::start_destroy`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3503",
        "name": "destroy_accounts",
        "docs": [
          "See [`Pallet::destroy_accounts`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3504",
        "name": "destroy_approvals",
        "docs": [
          "See [`Pallet::destroy_approvals`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3505",
        "name": "finish_destroy",
        "docs": [
          "See [`Pallet::finish_destroy`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3506",
        "name": "mint",
        "docs": [
          "See [`Pallet::mint`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "beneficiary",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3507",
        "name": "burn",
        "docs": [
          "See [`Pallet::burn`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3508",
        "name": "transfer",
        "docs": [
          "See [`Pallet::transfer`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3509",
        "name": "transfer_keep_alive",
        "docs": [
          "See [`Pallet::transfer_keep_alive`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "350a",
        "name": "force_transfer",
        "docs": [
          "See [`Pallet::force_transfer`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "source",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "350b",
        "name": "freeze",
        "docs": [
          "See [`Pallet::freeze`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "350c",
        "name": "thaw",
        "docs": [
          "See [`Pallet::thaw`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "350d",
        "name": "freeze_asset",
        "docs": [
          "See [`Pallet::freeze_asset`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "350e",
        "name": "thaw_asset",
        "docs": [
          "See [`Pallet::thaw_asset`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "350f",
        "name": "transfer_ownership",
        "docs": [
          "See [`Pallet::transfer_ownership`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3510",
        "name": "set_team",
        "docs": [
          "See [`Pallet::set_team`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3511",
        "name": "set_metadata",
        "docs": [
          "See [`Pallet::set_metadata`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          }
        ]
      },
      {
        "lookup": "3512",
        "name": "clear_metadata",
        "docs": [
          "See [`Pallet::clear_metadata`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3513",
        "name": "force_set_metadata",
        "docs": [
          "See [`Pallet::force_set_metadata`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3514",
        "name": "force_clear_metadata",
        "docs": [
          "See [`Pallet::force_clear_metadata`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3515",
        "name": "force_asset_status",
        "docs": [
          "See [`Pallet::force_asset_status`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3516",
        "name": "approve_transfer",
        "docs": [
          "See [`Pallet::approve_transfer`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3517",
        "name": "cancel_approval",
        "docs": [
          "See [`Pallet::cancel_approval`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3518",
        "name": "force_cancel_approval",
        "docs": [
          "See [`Pallet::force_cancel_approval`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3519",
        "name": "transfer_approved",
        "docs": [
          "See [`Pallet::transfer_approved`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "destination",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "351a",
        "name": "touch",
        "docs": [
          "See [`Pallet::touch`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "351b",
        "name": "refund",
        "docs": [
          "See [`Pallet::refund`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "allow_burn",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "351c",
        "name": "set_min_balance",
        "docs": [
          "See [`Pallet::set_min_balance`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "min_balance",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "351d",
        "name": "touch_other",
        "docs": [
          "See [`Pallet::touch_other`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "351e",
        "name": "refund_other",
        "docs": [
          "See [`Pallet::refund_other`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "351f",
        "name": "block",
        "docs": [
          "See [`Pallet::block`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 377
    },
    "events": [
      {
        "lookup": "3500",
        "name": "Created",
        "docs": [
          "Some asset class was created."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3501",
        "name": "Issued",
        "docs": [
          "Some assets were issued."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3502",
        "name": "Transferred",
        "docs": [
          "Some assets were transferred."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3503",
        "name": "Burned",
        "docs": [
          "Some assets were destroyed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "balance"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3504",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3505",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3506",
        "name": "Frozen",
        "docs": [
          "Some account `who` was frozen."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3507",
        "name": "Thawed",
        "docs": [
          "Some account `who` was thawed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3508",
        "name": "AssetFrozen",
        "docs": [
          "Some asset `asset_id` was frozen."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3509",
        "name": "AssetThawed",
        "docs": [
          "Some asset `asset_id` was thawed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "350a",
        "name": "AccountsDestroyed",
        "docs": [
          "Accounts were destroyed for given asset."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "accounts_destroyed",
          "accounts_remaining"
        ],
        "args_type_name": [
          "AssetId",
          "u32",
          "u32"
        ]
      },
      {
        "lookup": "350b",
        "name": "ApprovalsDestroyed",
        "docs": [
          "Approvals were destroyed for given asset."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "approvals_destroyed",
          "approvals_remaining"
        ],
        "args_type_name": [
          "AssetId",
          "u32",
          "u32"
        ]
      },
      {
        "lookup": "350c",
        "name": "DestructionStarted",
        "docs": [
          "An asset class is in the process of being destroyed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "350d",
        "name": "Destroyed",
        "docs": [
          "An asset class was destroyed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "350e",
        "name": "ForceCreated",
        "docs": [
          "Some asset class was force-created."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "350f",
        "name": "MetadataSet",
        "docs": [
          "New metadata has been set for an asset."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "Vec<U8>",
          "Vec<U8>",
          "U8",
          "Bool"
        ],
        "args_name": [
          "asset_id",
          "name",
          "symbol",
          "decimals",
          "is_frozen"
        ],
        "args_type_name": [
          "AssetId",
          "Bytes",
          "Bytes",
          "u8",
          "bool"
        ]
      },
      {
        "lookup": "3510",
        "name": "MetadataCleared",
        "docs": [
          "Metadata has been cleared for an asset."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3511",
        "name": "ApprovedTransfer",
        "docs": [
          "(Additional) funds have been approved for transfer to a destination account."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "source",
          "delegate",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3512",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for account `delegate` was cancelled by `owner`."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3513",
        "name": "TransferredApproved",
        "docs": [
          "An `amount` was transferred in its entirety from `owner` to `destination` by",
          "the approved `delegate`."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate",
          "destination",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3514",
        "name": "AssetStatusChanged",
        "docs": [
          "An asset has had its attributes changed by the `Force` origin."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3515",
        "name": "AssetMinBalanceChanged",
        "docs": [
          "The min_balance of an asset has been updated by the asset owner."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "new_min_balance"
        ],
        "args_type_name": [
          "AssetId",
          "Balance"
        ]
      },
      {
        "lookup": "3516",
        "name": "Touched",
        "docs": [
          "Some account `who` was created with a deposit from `depositor`."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who",
          "depositor"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3517",
        "name": "Blocked",
        "docs": [
          "Some account `who` was blocked."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 145
    },
    "constants": [
      {
        "name": "RemoveItemsLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "e8030000",
        "docs": [
          " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
          "",
          " Must be configured to result in a weight that makes each call fit in a block."
        ]
      },
      {
        "name": "AssetDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "c07e5778000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an asset."
        ]
      },
      {
        "name": "AssetAccountDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00fe4d77000000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved for a non-provider asset account to be",
          " maintained."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "80569d77000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your asset."
        ]
      },
      {
        "name": "MetadataDepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "a0860100000000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes you store in your",
          " metadata."
        ]
      },
      {
        "name": "ApprovalDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e1f505000000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved when creating a new approval."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum length of a name or symbol stored on-chain."
        ]
      }
    ],
    "errors": [
      {
        "name": "BalanceLow",
        "doc": [
          "Account balance must be greater than or equal to the transfer amount."
        ]
      },
      {
        "name": "NoAccount",
        "doc": [
          "The account to alter does not exist."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "Unknown",
        "doc": [
          "The given asset ID is unknown."
        ]
      },
      {
        "name": "Frozen",
        "doc": [
          "The origin account is frozen."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The asset ID is already taken."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "Invalid witness data given."
        ]
      },
      {
        "name": "MinBalanceZero",
        "doc": [
          "Minimum balance should be non-zero."
        ]
      },
      {
        "name": "UnavailableConsumer",
        "doc": [
          "Unable to increment the consumer reference counters on the account. Either no provider",
          "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
          "fewer then the maximum number of consumers has been reached."
        ]
      },
      {
        "name": "BadMetadata",
        "doc": [
          "Invalid metadata given."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      },
      {
        "name": "WouldDie",
        "doc": [
          "The source account would not survive the transfer and it needs to stay alive."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The asset-account already exists."
        ]
      },
      {
        "name": "NoDeposit",
        "doc": [
          "The asset-account doesn't have an associated deposit."
        ]
      },
      {
        "name": "WouldBurn",
        "doc": [
          "The operation would result in funds being burned."
        ]
      },
      {
        "name": "LiveAsset",
        "doc": [
          "The asset is a live asset and is actively being used. Usually emit for operations such",
          "as `start_destroy` which require the asset to be in a destroying state."
        ]
      },
      {
        "name": "AssetNotLive",
        "doc": [
          "The asset is not live, and likely being destroyed."
        ]
      },
      {
        "name": "IncorrectStatus",
        "doc": [
          "The asset status is not the expected status."
        ]
      },
      {
        "name": "NotFrozen",
        "doc": [
          "The asset should be frozen before the given operation."
        ]
      },
      {
        "name": "CallbackFailed",
        "doc": [
          "Callback action resulted in error"
        ]
      }
    ],
    "errors_value": {
      "type": 446
    },
    "index": 53
  },
  {
    "name": "PoolAssets",
    "prefix": "PoolAssets",
    "storage": [
      {
        "name": "Asset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_assets:types:AssetDetails",
            "keys_id": 4,
            "value_id": 400
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of an asset."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId"
            ],
            "value": "pallet_assets:types:AssetAccount",
            "keys_id": 402,
            "value_id": 403
          }
        },
        "fallback": "0x00",
        "docs": [
          " The holdings of a specific account for a specific asset."
        ]
      },
      {
        "name": "Approvals",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId",
              "AccountId"
            ],
            "value": "pallet_assets:types:Approval",
            "keys_id": 406,
            "value_id": 407
          }
        },
        "fallback": "0x00",
        "docs": [
          " Approved balance transfers. First balance is the amount approved for transfer. Second",
          " is the amount of `T::Currency` reserved for storing this.",
          " First key is the asset ID, second key is the owner and third key is the delegate."
        ]
      },
      {
        "name": "Metadata",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_assets:types:AssetMetadata@447",
            "keys_id": 4,
            "value_id": 447
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000",
        "docs": [
          " Metadata of an asset."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3600",
        "name": "create",
        "docs": [
          "See [`Pallet::create`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "min_balance",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3601",
        "name": "force_create",
        "docs": [
          "See [`Pallet::force_create`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3602",
        "name": "start_destroy",
        "docs": [
          "See [`Pallet::start_destroy`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3603",
        "name": "destroy_accounts",
        "docs": [
          "See [`Pallet::destroy_accounts`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3604",
        "name": "destroy_approvals",
        "docs": [
          "See [`Pallet::destroy_approvals`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3605",
        "name": "finish_destroy",
        "docs": [
          "See [`Pallet::finish_destroy`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3606",
        "name": "mint",
        "docs": [
          "See [`Pallet::mint`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "beneficiary",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3607",
        "name": "burn",
        "docs": [
          "See [`Pallet::burn`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3608",
        "name": "transfer",
        "docs": [
          "See [`Pallet::transfer`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3609",
        "name": "transfer_keep_alive",
        "docs": [
          "See [`Pallet::transfer_keep_alive`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "360a",
        "name": "force_transfer",
        "docs": [
          "See [`Pallet::force_transfer`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "source",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "360b",
        "name": "freeze",
        "docs": [
          "See [`Pallet::freeze`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "360c",
        "name": "thaw",
        "docs": [
          "See [`Pallet::thaw`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "360d",
        "name": "freeze_asset",
        "docs": [
          "See [`Pallet::freeze_asset`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "360e",
        "name": "thaw_asset",
        "docs": [
          "See [`Pallet::thaw_asset`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "360f",
        "name": "transfer_ownership",
        "docs": [
          "See [`Pallet::transfer_ownership`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3610",
        "name": "set_team",
        "docs": [
          "See [`Pallet::set_team`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3611",
        "name": "set_metadata",
        "docs": [
          "See [`Pallet::set_metadata`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          }
        ]
      },
      {
        "lookup": "3612",
        "name": "clear_metadata",
        "docs": [
          "See [`Pallet::clear_metadata`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3613",
        "name": "force_set_metadata",
        "docs": [
          "See [`Pallet::force_set_metadata`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3614",
        "name": "force_clear_metadata",
        "docs": [
          "See [`Pallet::force_clear_metadata`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3615",
        "name": "force_asset_status",
        "docs": [
          "See [`Pallet::force_asset_status`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3616",
        "name": "approve_transfer",
        "docs": [
          "See [`Pallet::approve_transfer`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3617",
        "name": "cancel_approval",
        "docs": [
          "See [`Pallet::cancel_approval`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3618",
        "name": "force_cancel_approval",
        "docs": [
          "See [`Pallet::force_cancel_approval`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3619",
        "name": "transfer_approved",
        "docs": [
          "See [`Pallet::transfer_approved`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "destination",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "361a",
        "name": "touch",
        "docs": [
          "See [`Pallet::touch`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "361b",
        "name": "refund",
        "docs": [
          "See [`Pallet::refund`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "allow_burn",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "361c",
        "name": "set_min_balance",
        "docs": [
          "See [`Pallet::set_min_balance`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "min_balance",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "361d",
        "name": "touch_other",
        "docs": [
          "See [`Pallet::touch_other`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "361e",
        "name": "refund_other",
        "docs": [
          "See [`Pallet::refund_other`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "361f",
        "name": "block",
        "docs": [
          "See [`Pallet::block`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 378
    },
    "events": [
      {
        "lookup": "3600",
        "name": "Created",
        "docs": [
          "Some asset class was created."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3601",
        "name": "Issued",
        "docs": [
          "Some assets were issued."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3602",
        "name": "Transferred",
        "docs": [
          "Some assets were transferred."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3603",
        "name": "Burned",
        "docs": [
          "Some assets were destroyed."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "balance"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3604",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3605",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3606",
        "name": "Frozen",
        "docs": [
          "Some account `who` was frozen."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3607",
        "name": "Thawed",
        "docs": [
          "Some account `who` was thawed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3608",
        "name": "AssetFrozen",
        "docs": [
          "Some asset `asset_id` was frozen."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3609",
        "name": "AssetThawed",
        "docs": [
          "Some asset `asset_id` was thawed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "360a",
        "name": "AccountsDestroyed",
        "docs": [
          "Accounts were destroyed for given asset."
        ],
        "args": [
          "U32",
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "accounts_destroyed",
          "accounts_remaining"
        ],
        "args_type_name": [
          "AssetId",
          "u32",
          "u32"
        ]
      },
      {
        "lookup": "360b",
        "name": "ApprovalsDestroyed",
        "docs": [
          "Approvals were destroyed for given asset."
        ],
        "args": [
          "U32",
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "approvals_destroyed",
          "approvals_remaining"
        ],
        "args_type_name": [
          "AssetId",
          "u32",
          "u32"
        ]
      },
      {
        "lookup": "360c",
        "name": "DestructionStarted",
        "docs": [
          "An asset class is in the process of being destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "360d",
        "name": "Destroyed",
        "docs": [
          "An asset class was destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "360e",
        "name": "ForceCreated",
        "docs": [
          "Some asset class was force-created."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "360f",
        "name": "MetadataSet",
        "docs": [
          "New metadata has been set for an asset."
        ],
        "args": [
          "U32",
          "Vec<U8>",
          "Vec<U8>",
          "U8",
          "Bool"
        ],
        "args_name": [
          "asset_id",
          "name",
          "symbol",
          "decimals",
          "is_frozen"
        ],
        "args_type_name": [
          "AssetId",
          "Bytes",
          "Bytes",
          "u8",
          "bool"
        ]
      },
      {
        "lookup": "3610",
        "name": "MetadataCleared",
        "docs": [
          "Metadata has been cleared for an asset."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3611",
        "name": "ApprovedTransfer",
        "docs": [
          "(Additional) funds have been approved for transfer to a destination account."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "source",
          "delegate",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3612",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for account `delegate` was cancelled by `owner`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3613",
        "name": "TransferredApproved",
        "docs": [
          "An `amount` was transferred in its entirety from `owner` to `destination` by",
          "the approved `delegate`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate",
          "destination",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3614",
        "name": "AssetStatusChanged",
        "docs": [
          "An asset has had its attributes changed by the `Force` origin."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3615",
        "name": "AssetMinBalanceChanged",
        "docs": [
          "The min_balance of an asset has been updated by the asset owner."
        ],
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "new_min_balance"
        ],
        "args_type_name": [
          "AssetId",
          "Balance"
        ]
      },
      {
        "lookup": "3616",
        "name": "Touched",
        "docs": [
          "Some account `who` was created with a deposit from `depositor`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who",
          "depositor"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3617",
        "name": "Blocked",
        "docs": [
          "Some account `who` was blocked."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 146
    },
    "constants": [
      {
        "name": "RemoveItemsLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "e8030000",
        "docs": [
          " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
          "",
          " Must be configured to result in a weight that makes each call fit in a block."
        ]
      },
      {
        "name": "AssetDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00000000000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an asset."
        ]
      },
      {
        "name": "AssetAccountDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00fe4d77000000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved for a non-provider asset account to be",
          " maintained."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00000000000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your asset."
        ]
      },
      {
        "name": "MetadataDepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00000000000000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes you store in your",
          " metadata."
        ]
      },
      {
        "name": "ApprovalDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e1f505000000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved when creating a new approval."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum length of a name or symbol stored on-chain."
        ]
      }
    ],
    "errors": [
      {
        "name": "BalanceLow",
        "doc": [
          "Account balance must be greater than or equal to the transfer amount."
        ]
      },
      {
        "name": "NoAccount",
        "doc": [
          "The account to alter does not exist."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "Unknown",
        "doc": [
          "The given asset ID is unknown."
        ]
      },
      {
        "name": "Frozen",
        "doc": [
          "The origin account is frozen."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The asset ID is already taken."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "Invalid witness data given."
        ]
      },
      {
        "name": "MinBalanceZero",
        "doc": [
          "Minimum balance should be non-zero."
        ]
      },
      {
        "name": "UnavailableConsumer",
        "doc": [
          "Unable to increment the consumer reference counters on the account. Either no provider",
          "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
          "fewer then the maximum number of consumers has been reached."
        ]
      },
      {
        "name": "BadMetadata",
        "doc": [
          "Invalid metadata given."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      },
      {
        "name": "WouldDie",
        "doc": [
          "The source account would not survive the transfer and it needs to stay alive."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The asset-account already exists."
        ]
      },
      {
        "name": "NoDeposit",
        "doc": [
          "The asset-account doesn't have an associated deposit."
        ]
      },
      {
        "name": "WouldBurn",
        "doc": [
          "The operation would result in funds being burned."
        ]
      },
      {
        "name": "LiveAsset",
        "doc": [
          "The asset is a live asset and is actively being used. Usually emit for operations such",
          "as `start_destroy` which require the asset to be in a destroying state."
        ]
      },
      {
        "name": "AssetNotLive",
        "doc": [
          "The asset is not live, and likely being destroyed."
        ]
      },
      {
        "name": "IncorrectStatus",
        "doc": [
          "The asset status is not the expected status."
        ]
      },
      {
        "name": "NotFrozen",
        "doc": [
          "The asset should be frozen before the given operation."
        ]
      },
      {
        "name": "CallbackFailed",
        "doc": [
          "Callback action resulted in error"
        ]
      }
    ],
    "errors_value": {
      "type": 449
    },
    "index": 54
  },
  {
    "name": "AssetConversion",
    "prefix": "AssetConversion",
    "storage": [
      {
        "name": "Pools",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "Tuple:staging_xcm:v3:multilocation:MultiLocationstaging_xcm:v3:multilocation:MultiLocation"
            ],
            "value": "U32",
            "keys_id": 148,
            "value_id": 450
          }
        },
        "fallback": "0x00",
        "docs": [
          " Map from `PoolAssetId` to `PoolInfo`. This establishes whether a pool has been officially",
          " created rather than people sending tokens directly to a pool's public account."
        ]
      },
      {
        "name": "NextPoolAssetId",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Stores the `PoolAssetId` that is going to be used for the next lp token.",
          " This gets incremented whenever a new lp pool is created."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3700",
        "name": "create_pool",
        "docs": [
          "See [`Pallet::create_pool`]."
        ],
        "args": [
          {
            "name": "asset1",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          },
          {
            "name": "asset2",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          }
        ]
      },
      {
        "lookup": "3701",
        "name": "add_liquidity",
        "docs": [
          "See [`Pallet::add_liquidity`]."
        ],
        "args": [
          {
            "name": "asset1",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          },
          {
            "name": "asset2",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          },
          {
            "name": "amount1_desired",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount2_desired",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount1_min",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount2_min",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "mint_to",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3702",
        "name": "remove_liquidity",
        "docs": [
          "See [`Pallet::remove_liquidity`]."
        ],
        "args": [
          {
            "name": "asset1",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          },
          {
            "name": "asset2",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          },
          {
            "name": "lp_token_burn",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount1_min_receive",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount2_min_receive",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "withdraw_to",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3703",
        "name": "swap_exact_tokens_for_tokens",
        "docs": [
          "See [`Pallet::swap_exact_tokens_for_tokens`]."
        ],
        "args": [
          {
            "name": "path",
            "type": "Vec<staging_xcm:v3:multilocation:MultiLocation>",
            "type_name": "Vec<Box<AssetKind>>"
          },
          {
            "name": "amount_in",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount_out_min",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "send_to",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "keep_alive",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3704",
        "name": "swap_tokens_for_exact_tokens",
        "docs": [
          "See [`Pallet::swap_tokens_for_exact_tokens`]."
        ],
        "args": [
          {
            "name": "path",
            "type": "Vec<staging_xcm:v3:multilocation:MultiLocation>",
            "type_name": "Vec<Box<AssetKind>>"
          },
          {
            "name": "amount_out",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount_in_max",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "send_to",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "keep_alive",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 379
    },
    "events": [
      {
        "lookup": "3700",
        "name": "PoolCreated",
        "docs": [
          "A successful call of the `CretaPool` extrinsic will create this event."
        ],
        "args": [
          "AccountId",
          "Tuple:staging_xcm:v3:multilocation:MultiLocationstaging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "U32"
        ],
        "args_name": [
          "creator",
          "pool_id",
          "pool_account",
          "lp_token"
        ],
        "args_type_name": [
          "AccountId",
          "PoolId",
          "AccountId",
          "PoolAssetId"
        ]
      },
      {
        "lookup": "3701",
        "name": "LiquidityAdded",
        "docs": [
          "A successful call of the `AddLiquidity` extrinsic will create this event."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "Tuple:staging_xcm:v3:multilocation:MultiLocationstaging_xcm:v3:multilocation:MultiLocation",
          "U128",
          "U128",
          "U32",
          "U128"
        ],
        "args_name": [
          "who",
          "mint_to",
          "pool_id",
          "amount1_provided",
          "amount2_provided",
          "lp_token",
          "lp_token_minted"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "PoolId",
          "Balance",
          "Balance",
          "PoolAssetId",
          "Balance"
        ]
      },
      {
        "lookup": "3702",
        "name": "LiquidityRemoved",
        "docs": [
          "A successful call of the `RemoveLiquidity` extrinsic will create this event."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "Tuple:staging_xcm:v3:multilocation:MultiLocationstaging_xcm:v3:multilocation:MultiLocation",
          "U128",
          "U128",
          "U32",
          "U128",
          "U32"
        ],
        "args_name": [
          "who",
          "withdraw_to",
          "pool_id",
          "amount1",
          "amount2",
          "lp_token",
          "lp_token_burned",
          "withdrawal_fee"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "PoolId",
          "Balance",
          "Balance",
          "PoolAssetId",
          "Balance",
          "Permill"
        ]
      },
      {
        "lookup": "3703",
        "name": "SwapExecuted",
        "docs": [
          "Assets have been converted from one to another. Both `SwapExactTokenForToken`",
          "and `SwapTokenForExactToken` will generate this event."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128",
          "U128",
          "Vec<Tuple:staging_xcm:v3:multilocation:MultiLocationU128>"
        ],
        "args_name": [
          "who",
          "send_to",
          "amount_in",
          "amount_out",
          "path"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "Balance",
          "Balance",
          "BalancePath"
        ]
      },
      {
        "lookup": "3704",
        "name": "SwapCreditExecuted",
        "docs": [
          "Assets have been converted from one to another."
        ],
        "args": [
          "U128",
          "U128",
          "Vec<Tuple:staging_xcm:v3:multilocation:MultiLocationU128>"
        ],
        "args_name": [
          "amount_in",
          "amount_out",
          "path"
        ],
        "args_type_name": [
          "Balance",
          "Balance",
          "BalancePath"
        ]
      }
    ],
    "events_value": {
      "type": 147
    },
    "constants": [
      {
        "name": "LPFee",
        "type": "U32",
        "type_value": 4,
        "constants_value": "03000000",
        "docs": [
          " A % the liquidity providers will take of every swap. Represents 10ths of a percent."
        ]
      },
      {
        "name": "PoolSetupFee",
        "type": "U128",
        "type_value": 6,
        "constants_value": "402d93ef000000000000000000000000",
        "docs": [
          " A one-time fee to setup the pool."
        ]
      },
      {
        "name": "PoolSetupFeeAsset",
        "type": "staging_xcm:v3:multilocation:MultiLocation",
        "type_value": 37,
        "constants_value": "0100",
        "docs": [
          " Asset class from [`Config::Assets`] used to pay the [`Config::PoolSetupFee`]."
        ]
      },
      {
        "name": "LiquidityWithdrawalFee",
        "type": "U32",
        "type_value": 149,
        "constants_value": "00000000",
        "docs": [
          " A fee to withdraw the liquidity."
        ]
      },
      {
        "name": "MintMinLiquidity",
        "type": "U128",
        "type_value": 6,
        "constants_value": "64000000000000000000000000000000",
        "docs": [
          " The minimum LP token amount that could be minted. Ameliorates rounding errors."
        ]
      },
      {
        "name": "MaxSwapPathLength",
        "type": "U32",
        "type_value": 4,
        "constants_value": "03000000",
        "docs": [
          " The max number of hops in a swap."
        ]
      },
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 451,
        "constants_value": "70792f6173636f6e",
        "docs": [
          " The pallet's id, used for deriving its sovereign account ID."
        ]
      }
    ],
    "errors": [
      {
        "name": "InvalidAssetPair",
        "doc": [
          "Provided asset pair is not supported for pool."
        ]
      },
      {
        "name": "PoolExists",
        "doc": [
          "Pool already exists."
        ]
      },
      {
        "name": "WrongDesiredAmount",
        "doc": [
          "Desired amount can't be zero."
        ]
      },
      {
        "name": "AmountOneLessThanMinimal",
        "doc": [
          "Provided amount should be greater than or equal to the existential deposit/asset's",
          "minimal amount."
        ]
      },
      {
        "name": "AmountTwoLessThanMinimal",
        "doc": [
          "Provided amount should be greater than or equal to the existential deposit/asset's",
          "minimal amount."
        ]
      },
      {
        "name": "ReserveLeftLessThanMinimal",
        "doc": [
          "Reserve needs to always be greater than or equal to the existential deposit/asset's",
          "minimal amount."
        ]
      },
      {
        "name": "AmountOutTooHigh",
        "doc": [
          "Desired amount can't be equal to the pool reserve."
        ]
      },
      {
        "name": "PoolNotFound",
        "doc": [
          "The pool doesn't exist."
        ]
      },
      {
        "name": "Overflow",
        "doc": [
          "An overflow happened."
        ]
      },
      {
        "name": "AssetOneDepositDidNotMeetMinimum",
        "doc": [
          "The minimal amount requirement for the first token in the pair wasn't met."
        ]
      },
      {
        "name": "AssetTwoDepositDidNotMeetMinimum",
        "doc": [
          "The minimal amount requirement for the second token in the pair wasn't met."
        ]
      },
      {
        "name": "AssetOneWithdrawalDidNotMeetMinimum",
        "doc": [
          "The minimal amount requirement for the first token in the pair wasn't met."
        ]
      },
      {
        "name": "AssetTwoWithdrawalDidNotMeetMinimum",
        "doc": [
          "The minimal amount requirement for the second token in the pair wasn't met."
        ]
      },
      {
        "name": "OptimalAmountLessThanDesired",
        "doc": [
          "Optimal calculated amount is less than desired."
        ]
      },
      {
        "name": "InsufficientLiquidityMinted",
        "doc": [
          "Insufficient liquidity minted."
        ]
      },
      {
        "name": "ZeroLiquidity",
        "doc": [
          "Requested liquidity can't be zero."
        ]
      },
      {
        "name": "ZeroAmount",
        "doc": [
          "Amount can't be zero."
        ]
      },
      {
        "name": "ProvidedMinimumNotSufficientForSwap",
        "doc": [
          "Calculated amount out is less than provided minimum amount."
        ]
      },
      {
        "name": "ProvidedMaximumNotSufficientForSwap",
        "doc": [
          "Provided maximum amount is not sufficient for swap."
        ]
      },
      {
        "name": "InvalidPath",
        "doc": [
          "The provided path must consists of 2 assets at least."
        ]
      },
      {
        "name": "NonUniquePath",
        "doc": [
          "The provided path must consists of unique assets."
        ]
      },
      {
        "name": "IncorrectPoolAssetId",
        "doc": [
          "It was not possible to get or increment the Id of the pool."
        ]
      },
      {
        "name": "BelowMinimum",
        "doc": [
          "The destination account cannot exist with the swapped funds."
        ]
      }
    ],
    "errors_value": {
      "type": 452
    },
    "index": 55
  }
]