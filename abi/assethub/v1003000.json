[
  {
    "name": "System",
    "prefix": "System",
    "storage": [
      {
        "name": "Account",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "frame_system:AccountInfo",
            "keys_id": 0,
            "value_id": 3
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
        "docs": [
          " The full account information for a particular account ID."
        ]
      },
      {
        "name": "ExtrinsicCount",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Total extrinsics count for the current block."
        ]
      },
      {
        "name": "InherentsApplied",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " Whether all inherents have been applied."
        ]
      },
      {
        "name": "BlockWeight",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_support:dispatch:PerDispatchClass@9",
          "PlainTypeValue": 9
        },
        "fallback": "0x000000000000",
        "docs": [
          " The current weight for the block."
        ]
      },
      {
        "name": "AllExtrinsicsLen",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Total length (in bytes) for all extrinsics put together, for the current block."
        ]
      },
      {
        "name": "BlockHash",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "H256",
            "keys_id": 4,
            "value_id": 13
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Map of block numbers to block hashes."
        ]
      },
      {
        "name": "ExtrinsicData",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 4,
            "value_id": 14
          }
        },
        "fallback": "0x00",
        "docs": [
          " Extrinsics data for the current block (maps an extrinsic's index to its data)."
        ]
      },
      {
        "name": "Number",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The current block number being processed. Set by `execute_block`."
        ]
      },
      {
        "name": "ParentHash",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 13
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Hash of the previous block."
        ]
      },
      {
        "name": "Digest",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<sp_runtime:generic:digest:DigestItem>",
          "PlainTypeValue": 15
        },
        "fallback": "0x00",
        "docs": [
          " Digest of the current block, also part of the block header."
        ]
      },
      {
        "name": "Events",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<frame_system:EventRecord>",
          "PlainTypeValue": 19
        },
        "fallback": "0x00",
        "docs": [
          " Events deposited for the current block.",
          "",
          " NOTE: The item is unbound and should therefore never be read on chain.",
          " It could otherwise inflate the PoV size of a block.",
          "",
          " Events have a large in-memory size. Box the events to not go out-of-memory",
          " just in case someone still reads them from within the runtime."
        ]
      },
      {
        "name": "EventCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of events in the `Events<T>` list."
        ]
      },
      {
        "name": "EventTopics",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Vec<Tuple:U32U32>",
            "keys_id": 13,
            "value_id": 154
          }
        },
        "fallback": "0x00",
        "docs": [
          " Mapping between a topic (represented by T::Hash) and a vector of indexes",
          " of events in the `<Events<T>>` list.",
          "",
          " All topic vectors have deterministic storage locations depending on the topic. This",
          " allows light-clients to leverage the changes trie storage tracking mechanism and",
          " in case of changes fetch the list of events of interest.",
          "",
          " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
          " the `EventIndex` then in case if the topic has the same contents on the next block",
          " no notification will be triggered thus the event might be lost."
        ]
      },
      {
        "name": "LastRuntimeUpgrade",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:LastRuntimeUpgradeInfo",
          "PlainTypeValue": 156
        },
        "fallback": "0x00",
        "docs": [
          " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
        ]
      },
      {
        "name": "UpgradedToU32RefCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
        ]
      },
      {
        "name": "UpgradedToTripleRefCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
          " (default) if not."
        ]
      },
      {
        "name": "ExecutionPhase",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:Phase",
          "PlainTypeValue": 152
        },
        "fallback": "0x00",
        "docs": [
          " The execution phase of the block."
        ]
      },
      {
        "name": "AuthorizedUpgrade",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:CodeUpgradeAuthorization",
          "PlainTypeValue": 158
        },
        "fallback": "0x00",
        "docs": [
          " `Some` if a code upgrade has been authorized."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0000",
        "name": "remark",
        "docs": [
          "Make some on-chain remark.",
          "",
          "Can be executed by every `origin`."
        ],
        "args": [
          {
            "name": "remark",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0001",
        "name": "set_heap_pages",
        "docs": [
          "Set the number of pages in the WebAssembly environment's heap."
        ],
        "args": [
          {
            "name": "pages",
            "type": "U64",
            "type_name": "u64"
          }
        ]
      },
      {
        "lookup": "0002",
        "name": "set_code",
        "docs": [
          "Set the new runtime code."
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0003",
        "name": "set_code_without_checks",
        "docs": [
          "Set the new runtime code without doing any checks of the given `code`.",
          "",
          "Note that runtime upgrades will not run if this is called with a not-increasing spec",
          "version!"
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0004",
        "name": "set_storage",
        "docs": [
          "Set some items of storage."
        ],
        "args": [
          {
            "name": "items",
            "type": "Vec<Tuple:Vec<U8>Vec<U8>>",
            "type_name": "Vec<KeyValue>"
          }
        ]
      },
      {
        "lookup": "0005",
        "name": "kill_storage",
        "docs": [
          "Kill some items from storage."
        ],
        "args": [
          {
            "name": "keys",
            "type": "Vec<Vec<U8>>",
            "type_name": "Vec<Key>"
          }
        ]
      },
      {
        "lookup": "0006",
        "name": "kill_prefix",
        "docs": [
          "Kill all storage items with a key that starts with the given prefix.",
          "",
          "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
          "the prefix we are removing to accurately calculate the weight of this function."
        ],
        "args": [
          {
            "name": "prefix",
            "type": "Vec<U8>",
            "type_name": "Key"
          },
          {
            "name": "subkeys",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "0007",
        "name": "remark_with_event",
        "docs": [
          "Make some on-chain remark and emit event."
        ],
        "args": [
          {
            "name": "remark",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0009",
        "name": "authorize_upgrade",
        "docs": [
          "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
          "later.",
          "",
          "This call requires Root origin."
        ],
        "args": [
          {
            "name": "code_hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "000a",
        "name": "authorize_upgrade_without_checks",
        "docs": [
          "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
          "later.",
          "",
          "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
          "example that the spec name remains the same and that the version number increases. Not",
          "recommended for normal use. Use `authorize_upgrade` instead.",
          "",
          "This call requires Root origin."
        ],
        "args": [
          {
            "name": "code_hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "000b",
        "name": "apply_authorized_upgrade",
        "docs": [
          "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
          "",
          "If the authorization required a version check, this call will ensure the spec name",
          "remains unchanged and that the spec version has increased.",
          "",
          "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
          "the new `code` in the same block or attempt to schedule the upgrade.",
          "",
          "All origins are allowed."
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 159
    },
    "events": [
      {
        "lookup": "0000",
        "name": "ExtrinsicSuccess",
        "docs": [
          "An extrinsic completed successfully."
        ],
        "args": [
          "frame_support:dispatch:DispatchInfo"
        ],
        "args_name": [
          "dispatch_info"
        ],
        "args_type_name": [
          "DispatchInfo"
        ]
      },
      {
        "lookup": "0001",
        "name": "ExtrinsicFailed",
        "docs": [
          "An extrinsic failed."
        ],
        "args": [
          "sp_runtime:DispatchError",
          "frame_support:dispatch:DispatchInfo"
        ],
        "args_name": [
          "dispatch_error",
          "dispatch_info"
        ],
        "args_type_name": [
          "DispatchError",
          "DispatchInfo"
        ]
      },
      {
        "lookup": "0002",
        "name": "CodeUpdated",
        "docs": [
          "`:code` was updated."
        ],
        "args": null
      },
      {
        "lookup": "0003",
        "name": "NewAccount",
        "docs": [
          "A new account was created."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0004",
        "name": "KilledAccount",
        "docs": [
          "An account was reaped."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0005",
        "name": "Remarked",
        "docs": [
          "On on-chain remark happened."
        ],
        "args": [
          "AccountId",
          "H256"
        ],
        "args_name": [
          "sender",
          "hash"
        ],
        "args_type_name": [
          "AccountId",
          "Hash"
        ]
      },
      {
        "lookup": "0006",
        "name": "UpgradeAuthorized",
        "docs": [
          "An upgrade was authorized."
        ],
        "args": [
          "H256",
          "Bool"
        ],
        "args_name": [
          "code_hash",
          "check_version"
        ],
        "args_type_name": [
          "Hash",
          "bool"
        ]
      }
    ],
    "events_value": {
      "type": 22
    },
    "constants": [
      {
        "name": "BlockWeights",
        "type": "frame_system:limits:BlockWeights",
        "type_value": 163,
        "constants_value": "0700f2052a0100070088526a74020040010265cd1d000107c0d22c76510200e000010700e6bd4f570200f0000100000265cd1d000107c074c1906e0200300101070088526a7402004001010700a2941a1d020050000265cd1d00000000",
        "docs": [
          " Block & extrinsics weights: base values and limits."
        ]
      },
      {
        "name": "BlockLength",
        "type": "frame_support:dispatch:PerDispatchClass@168",
        "type_value": 167,
        "constants_value": "00003c000000500000005000",
        "docs": [
          " The maximum length of a block (in bytes)."
        ]
      },
      {
        "name": "BlockHashCount",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00100000",
        "docs": [
          " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
        ]
      },
      {
        "name": "DbWeight",
        "type": "sp_weights:RuntimeDbWeight",
        "type_value": 169,
        "constants_value": "40787d010000000000e1f50500000000",
        "docs": [
          " The weight of runtime database operations the runtime can invoke."
        ]
      },
      {
        "name": "Version",
        "type": "sp_version:RuntimeVersion",
        "type_value": 170,
        "constants_value": "2473746174656d696e742473746174656d696e7401000000f84d0f000000000048dd718d5cc53262d401000000d7bdd8a272ca0d6501000000df6acb689907609b0500000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000f3ff14d5ab527059030000006ff52ee858e6c5bd0100000091b1c8b16328eb92010000009ffb505aa738d69c01000000de92b8a0426b9bf602000000ea93e3f16f3d696202000000fbc577b9d747efd6010000008a8047a53a8277ec010000000f00000000",
        "docs": [
          " Get the chain's in-code version."
        ]
      },
      {
        "name": "SS58Prefix",
        "type": "U16",
        "type_value": 129,
        "constants_value": "0000",
        "docs": [
          " The designated SS58 prefix of this chain.",
          "",
          " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
          " that the runtime should know about the prefix in order to make use of it as",
          " an identifier of the chain."
        ]
      }
    ],
    "errors": [
      {
        "name": "InvalidSpecName",
        "doc": [
          "The name of specification does not match between the current runtime",
          "and the new runtime."
        ]
      },
      {
        "name": "SpecVersionNeedsToIncrease",
        "doc": [
          "The specification version is not allowed to decrease between the current runtime",
          "and the new runtime."
        ]
      },
      {
        "name": "FailedToExtractRuntimeVersion",
        "doc": [
          "Failed to extract the runtime version from the new runtime.",
          "",
          "Either calling `Core_version` or decoding `RuntimeVersion` failed."
        ]
      },
      {
        "name": "NonDefaultComposite",
        "doc": [
          "Suicide called when the account has non-default composite data."
        ]
      },
      {
        "name": "NonZeroRefCount",
        "doc": [
          "There is a non-zero reference count preventing the account from being purged."
        ]
      },
      {
        "name": "CallFiltered",
        "doc": [
          "The origin filter prevent the call to be dispatched."
        ]
      },
      {
        "name": "MultiBlockMigrationsOngoing",
        "doc": [
          "A multi-block migration is ongoing and prevents the current code from being replaced."
        ]
      },
      {
        "name": "NothingAuthorized",
        "doc": [
          "No upgrade authorized."
        ]
      },
      {
        "name": "Unauthorized",
        "doc": [
          "The submitted code is not authorized."
        ]
      }
    ],
    "errors_value": {
      "type": 174
    },
    "index": 0
  },
  {
    "name": "ParachainSystem",
    "prefix": "ParachainSystem",
    "storage": [
      {
        "name": "UnincludedSegment",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<cumulus_pallet_parachain_system:unincluded_segment:Ancestor>",
          "PlainTypeValue": 175
        },
        "fallback": "0x00",
        "docs": [
          " Latest included block descendants the runtime accepted. In other words, these are",
          " ancestors of the currently executing block which have not been included in the observed",
          " relay-chain state.",
          "",
          " The segment length is limited by the capacity returned from the [`ConsensusHook`] configured",
          " in the pallet."
        ]
      },
      {
        "name": "AggregatedUnincludedSegment",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_parachain_system:unincluded_segment:SegmentTracker",
          "PlainTypeValue": 185
        },
        "fallback": "0x00",
        "docs": [
          " Storage field that keeps track of bandwidth used by the unincluded segment along with the",
          " latest HRMP watermark. Used for limiting the acceptance of new blocks with",
          " respect to relay chain constraints."
        ]
      },
      {
        "name": "PendingValidationCode",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 14
        },
        "fallback": "0x00",
        "docs": [
          " In case of a scheduled upgrade, this storage field contains the validation code to be",
          " applied.",
          "",
          " As soon as the relay chain gives us the go-ahead signal, we will overwrite the",
          " [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process",
          " with the new validation code. This concludes the upgrade process."
        ]
      },
      {
        "name": "NewValidationCode",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 14
        },
        "fallback": "0x00",
        "docs": [
          " Validation code that is set by the parachain and is to be communicated to collator and",
          " consequently the relay-chain.",
          "",
          " This will be cleared in `on_initialize` of each new block if no other pallet already set",
          " the value."
        ]
      },
      {
        "name": "ValidationData",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "polkadot_primitives:v7:PersistedValidationData",
          "PlainTypeValue": 186
        },
        "fallback": "0x00",
        "docs": [
          " The [`PersistedValidationData`] set for this block.",
          " This value is expected to be set only once per block and it's never stored",
          " in the trie."
        ]
      },
      {
        "name": "DidSetValidationCode",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " Were the validation data set to notify the relay chain?"
        ]
      },
      {
        "name": "LastRelayChainBlockNumber",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The relay chain block number associated with the last parachain block.",
          "",
          " This is updated in `on_finalize`."
        ]
      },
      {
        "name": "UpgradeRestrictionSignal",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "option<polkadot_primitives:v7:UpgradeRestriction>",
          "PlainTypeValue": 188
        },
        "fallback": "0x00",
        "docs": [
          " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
          " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
          " candidate will be invalid.",
          "",
          " This storage item is a mirror of the corresponding value for the current parachain from the",
          " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
          " set after the inherent."
        ]
      },
      {
        "name": "UpgradeGoAhead",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "option<polkadot_primitives:v7:UpgradeGoAhead>",
          "PlainTypeValue": 183
        },
        "fallback": "0x00",
        "docs": [
          " Optional upgrade go-ahead signal from the relay-chain.",
          "",
          " This storage item is a mirror of the corresponding value for the current parachain from the",
          " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
          " set after the inherent."
        ]
      },
      {
        "name": "RelayStateProof",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 190
        },
        "fallback": "0x00",
        "docs": [
          " The state proof for the last relay parent block.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "RelevantMessagingState",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_parachain_system:relay_state_snapshot:MessagingStateSnapshot",
          "PlainTypeValue": 192
        },
        "fallback": "0x00",
        "docs": [
          " The snapshot of some state related to messaging relevant to the current parachain as per",
          " the relay parent.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "HostConfiguration",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "polkadot_primitives:v7:AbridgedHostConfiguration",
          "PlainTypeValue": 197
        },
        "fallback": "0x00",
        "docs": [
          " The parachain host configuration that was obtained from the relay parent.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "LastDmqMqcHead",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 199
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The last downward message queue chain head we have observed.",
          "",
          " This value is loaded before and saved after processing inbound downward messages carried",
          " by the system inherent."
        ]
      },
      {
        "name": "LastHrmpMqcHeads",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:U32H256>",
          "PlainTypeValue": 200
        },
        "fallback": "0x00",
        "docs": [
          " The message queue chain heads we have observed per each channel incoming channel.",
          "",
          " This value is loaded before and saved after processing inbound downward messages carried",
          " by the system inherent."
        ]
      },
      {
        "name": "ProcessedDownwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Number of downward messages processed in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "HrmpWatermark",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " HRMP watermark that was set in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "HrmpOutboundMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<polkadot_core_primitives:OutboundHrmpMessage>",
          "PlainTypeValue": 203
        },
        "fallback": "0x00",
        "docs": [
          " HRMP messages that were sent in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "UpwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 162
        },
        "fallback": "0x00",
        "docs": [
          " Upward messages that were sent in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "PendingUpwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 162
        },
        "fallback": "0x00",
        "docs": [
          " Upward messages that are still pending and not yet send to the relay chain."
        ]
      },
      {
        "name": "UpwardDeliveryFeeFactor",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 205
        },
        "fallback": "0x000064a7b3b6e00d0000000000000000",
        "docs": [
          " The factor to multiply the base delivery fee by for UMP."
        ]
      },
      {
        "name": "AnnouncedHrmpMessagesPerCandidate",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
          " announcing the weight of `on_initialize` and `on_finalize`."
        ]
      },
      {
        "name": "ReservedXcmpWeightOverride",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "sp_weights:weight_v2:Weight",
          "PlainTypeValue": 10
        },
        "fallback": "0x00",
        "docs": [
          " The weight we reserve at the beginning of the block for processing XCMP messages. This",
          " overrides the amount set in the Config trait."
        ]
      },
      {
        "name": "ReservedDmpWeightOverride",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "sp_weights:weight_v2:Weight",
          "PlainTypeValue": 10
        },
        "fallback": "0x00",
        "docs": [
          " The weight we reserve at the beginning of the block for processing DMP messages. This",
          " overrides the amount set in the Config trait."
        ]
      },
      {
        "name": "CustomValidationHeadData",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 14
        },
        "fallback": "0x00",
        "docs": [
          " A custom head data that should be returned as result of `validate_block`.",
          "",
          " See `Pallet::set_custom_validation_head_data` for more information."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0100",
        "name": "set_validation_data",
        "docs": [
          "Set the current validation data.",
          "",
          "This should be invoked exactly once per block. It will panic at the finalization",
          "phase if the call was not invoked.",
          "",
          "The dispatch origin for this call must be `Inherent`",
          "",
          "As a side effect, this function upgrades the current validation function",
          "if the appropriate time has come."
        ],
        "args": [
          {
            "name": "data",
            "type": "cumulus_primitives_parachain_inherent:ParachainInherentData",
            "type_name": "ParachainInherentData"
          }
        ]
      },
      {
        "lookup": "0101",
        "name": "sudo_send_upward_message",
        "docs": null,
        "args": [
          {
            "name": "message",
            "type": "Vec<U8>",
            "type_name": "UpwardMessage"
          }
        ]
      },
      {
        "lookup": "0102",
        "name": "authorize_upgrade",
        "docs": [
          "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
          "later.",
          "",
          "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec",
          "version and name should be verified on upgrade. Since the authorization only has a hash,",
          "it cannot actually perform the verification.",
          "",
          "This call requires Root origin."
        ],
        "args": [
          {
            "name": "code_hash",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "check_version",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "0103",
        "name": "enact_authorized_upgrade",
        "docs": [
          "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
          "",
          "If the authorization required a version check, this call will ensure the spec name",
          "remains unchanged and that the spec version has increased.",
          "",
          "Note that this function will not apply the new `code`, but only attempt to schedule the",
          "upgrade with the Relay Chain.",
          "",
          "All origins are allowed."
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 206
    },
    "events": [
      {
        "lookup": "0100",
        "name": "ValidationFunctionStored",
        "docs": [
          "The validation function has been scheduled to apply."
        ],
        "args": null
      },
      {
        "lookup": "0101",
        "name": "ValidationFunctionApplied",
        "docs": [
          "The validation function was applied as of the contained relay chain block number."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "relay_chain_block_num"
        ],
        "args_type_name": [
          "RelayChainBlockNumber"
        ]
      },
      {
        "lookup": "0102",
        "name": "ValidationFunctionDiscarded",
        "docs": [
          "The relay-chain aborted the upgrade process."
        ],
        "args": null
      },
      {
        "lookup": "0103",
        "name": "DownwardMessagesReceived",
        "docs": [
          "Some downward messages have been received and will be processed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "count"
        ],
        "args_type_name": [
          "u32"
        ]
      },
      {
        "lookup": "0104",
        "name": "DownwardMessagesProcessed",
        "docs": [
          "Downward messages were processed using the given weight."
        ],
        "args": [
          "sp_weights:weight_v2:Weight",
          "H256"
        ],
        "args_name": [
          "weight_used",
          "dmq_head"
        ],
        "args_type_name": [
          "Weight",
          "relay_chain::Hash"
        ]
      },
      {
        "lookup": "0105",
        "name": "UpwardMessageSent",
        "docs": [
          "An upward message was sent to the relay chain."
        ],
        "args": [
          "option<[U8; 32]>"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "Option<XcmHash>"
        ]
      }
    ],
    "events_value": {
      "type": 31
    },
    "constants": [
      {
        "name": "SelfParaId",
        "type": "U32",
        "type_value": 120,
        "constants_value": "e8030000",
        "docs": [
          " Returns the parachain ID we are running with."
        ]
      }
    ],
    "errors": [
      {
        "name": "OverlappingUpgrades",
        "doc": [
          "Attempt to upgrade validation function while existing upgrade pending."
        ]
      },
      {
        "name": "ProhibitedByPolkadot",
        "doc": [
          "Polkadot currently prohibits this parachain from upgrading its validation function."
        ]
      },
      {
        "name": "TooBig",
        "doc": [
          "The supplied validation function has compiled into a blob larger than Polkadot is",
          "willing to run."
        ]
      },
      {
        "name": "ValidationDataNotAvailable",
        "doc": [
          "The inherent which supplies the validation data did not run this block."
        ]
      },
      {
        "name": "HostConfigurationNotAvailable",
        "doc": [
          "The inherent which supplies the host configuration did not run this block."
        ]
      },
      {
        "name": "NotScheduled",
        "doc": [
          "No validation function upgrade is currently scheduled."
        ]
      },
      {
        "name": "NothingAuthorized",
        "doc": [
          "No code upgrade has been authorized."
        ]
      },
      {
        "name": "Unauthorized",
        "doc": [
          "The given code upgrade has not been authorized."
        ]
      }
    ],
    "errors_value": {
      "type": 215
    },
    "index": 1
  },
  {
    "name": "Timestamp",
    "prefix": "Timestamp",
    "storage": [
      {
        "name": "Now",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 12
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The current time for the current block."
        ]
      },
      {
        "name": "DidUpdate",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " Whether the timestamp has been updated in this block.",
          "",
          " This value is updated to `true` upon successful submission of a timestamp by a node.",
          " It is then checked at the end of each block execution in the `on_finalize` hook."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0300",
        "name": "set",
        "docs": [
          "Set the current time.",
          "",
          "This call should be invoked exactly once per block. It will panic at the finalization",
          "phase, if this call hasn't been invoked by that time.",
          "",
          "The timestamp should be greater than the previous one by the amount specified by",
          "[`Config::MinimumPeriod`].",
          "",
          "The dispatch origin for this call must be _None_.",
          "",
          "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
          "that changing the complexity of this call could result exhausting the resources in a",
          "block to execute any other calls.",
          "",
          "## Complexity",
          "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
          "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
          "  `on_finalize`)",
          "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
        ],
        "args": [
          {
            "name": "now",
            "type": "compact<U64>",
            "type_name": "Moment"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 216
    },
    "constants": [
      {
        "name": "MinimumPeriod",
        "type": "U64",
        "type_value": 12,
        "constants_value": "7017000000000000",
        "docs": [
          " The minimum period between blocks.",
          "",
          " Be aware that this is different to the *expected* period that the block production",
          " apparatus provides. Your chosen consensus system will generally work with this to",
          " determine a sensible block time. For example, in the Aura pallet it will be double this",
          " period on default settings."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 3
  },
  {
    "name": "ParachainInfo",
    "prefix": "ParachainInfo",
    "storage": [
      {
        "name": "ParachainId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 120
        },
        "fallback": "0x64000000",
        "docs": null
      }
    ],
    "calls_value": {
      "type": 217
    },
    "errors": null,
    "errors_value": null,
    "index": 4
  },
  {
    "name": "Balances",
    "prefix": "Balances",
    "storage": [
      {
        "name": "TotalIssuance",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The total units issued in the system."
        ]
      },
      {
        "name": "InactiveIssuance",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The total units of outstanding deactivated balance in the system."
        ]
      },
      {
        "name": "Account",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "pallet_balances:types:AccountData",
            "keys_id": 0,
            "value_id": 5
          }
        },
        "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
        "docs": [
          " The Balances pallet example of storing the balance of an account.",
          "",
          " # Example",
          "",
          " ```nocompile",
          "  impl pallet_balances::Config for Runtime {",
          "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
          "  }",
          " ```",
          "",
          " You can also store the balance of an account in the `System` pallet.",
          "",
          " # Example",
          "",
          " ```nocompile",
          "  impl pallet_balances::Config for Runtime {",
          "   type AccountStore = System",
          "  }",
          " ```",
          "",
          " But this comes with tradeoffs, storing account balances in the system pallet stores",
          " `frame_system` data alongside the account data contrary to storing account balances in the",
          " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
          " NOTE: This is only used in the case that this pallet is used to store balances."
        ]
      },
      {
        "name": "Locks",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:types:BalanceLock>",
            "keys_id": 0,
            "value_id": 218
          }
        },
        "fallback": "0x00",
        "docs": [
          " Any liquidity locks on some account balances.",
          " NOTE: Should only be accessed when setting, changing and freeing a lock.",
          "",
          " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
        ]
      },
      {
        "name": "Reserves",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:types:ReserveData>",
            "keys_id": 0,
            "value_id": 222
          }
        },
        "fallback": "0x00",
        "docs": [
          " Named reserves on some account balances.",
          "",
          " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
        ]
      },
      {
        "name": "Holds",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<frame_support:traits:tokens:misc:IdAmount@226>",
            "keys_id": 0,
            "value_id": 225
          }
        },
        "fallback": "0x00",
        "docs": [
          " Holds on account balances."
        ]
      },
      {
        "name": "Freezes",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<frame_support:traits:tokens:misc:IdAmount@230>",
            "keys_id": 0,
            "value_id": 229
          }
        },
        "fallback": "0x00",
        "docs": [
          " Freeze locks on account balances."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0a00",
        "name": "transfer_allow_death",
        "docs": [
          "Transfer some liquid free balance to another account.",
          "",
          "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
          "If the sender's account is below the existential deposit as a result",
          "of the transfer, the account will be reaped.",
          "",
          "The dispatch origin for this call must be `Signed` by the transactor."
        ],
        "args": [
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a02",
        "name": "force_transfer",
        "docs": [
          "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
          "may be specified."
        ],
        "args": [
          {
            "name": "source",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a03",
        "name": "transfer_keep_alive",
        "docs": [
          "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
          "kill the origin account.",
          "",
          "99% of the time you want [`transfer_allow_death`] instead.",
          "",
          "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
        ],
        "args": [
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a04",
        "name": "transfer_all",
        "docs": [
          "Transfer the entire transferable balance from the caller account.",
          "",
          "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
          "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
          "transferred by this function. To ensure that this function results in a killed account,",
          "you might need to prepare the account by removing any reference counters, storage",
          "deposits, etc...",
          "",
          "The dispatch origin of this call must be Signed.",
          "",
          "- `dest`: The recipient of the transfer.",
          "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
          "  of the funds the account has, causing the sender account to be killed (false), or",
          "  transfer everything except at least the existential deposit, which will guarantee to",
          "  keep the sender account alive (true)."
        ],
        "args": [
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "keep_alive",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "0a05",
        "name": "force_unreserve",
        "docs": [
          "Unreserve some balance from a user by force.",
          "",
          "Can only be called by ROOT."
        ],
        "args": [
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a06",
        "name": "upgrade_accounts",
        "docs": [
          "Upgrade a specified account.",
          "",
          "- `origin`: Must be `Signed`.",
          "- `who`: The account to be upgraded.",
          "",
          "This will waive the transaction fee if at least all but 10% of the accounts needed to",
          "be upgraded. (We let some not have to be upgraded just in order to allow for the",
          "possibility of churn)."
        ],
        "args": [
          {
            "name": "who",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          }
        ]
      },
      {
        "lookup": "0a08",
        "name": "force_set_balance",
        "docs": [
          "Set the regular balance of a given account.",
          "",
          "The dispatch origin for this call is `root`."
        ],
        "args": [
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "new_free",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a09",
        "name": "force_adjust_total_issuance",
        "docs": [
          "Adjust the total issuance in a saturating way.",
          "",
          "Can only be called by root and always needs a positive `delta`.",
          "",
          "# Example"
        ],
        "args": [
          {
            "name": "direction",
            "type": "pallet_balances:types:AdjustmentDirection",
            "type_name": "AdjustmentDirection"
          },
          {
            "name": "delta",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0a0a",
        "name": "burn",
        "docs": [
          "Burn the specified liquid free balance from the origin account.",
          "",
          "If the origin's account ends up below the existential deposit as a result",
          "of the burn and `keep_alive` is false, the account will be reaped.",
          "",
          "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
          "this `burn` operation will reduce total issuance by the amount _burned_."
        ],
        "args": [
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          },
          {
            "name": "keep_alive",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 232
    },
    "events": [
      {
        "lookup": "0a00",
        "name": "Endowed",
        "docs": [
          "An account was created with some free balance."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account",
          "free_balance"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a01",
        "name": "DustLost",
        "docs": [
          "An account was removed whose balance was non-zero but below ExistentialDeposit,",
          "resulting in an outright loss."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a02",
        "name": "Transfer",
        "docs": [
          "Transfer succeeded."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a03",
        "name": "BalanceSet",
        "docs": [
          "A balance was set by root."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "free"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a04",
        "name": "Reserved",
        "docs": [
          "Some balance was reserved (moved from free to reserved)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a05",
        "name": "Unreserved",
        "docs": [
          "Some balance was unreserved (moved from reserved to free)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a06",
        "name": "ReserveRepatriated",
        "docs": [
          "Some balance was moved from the reserve of the first account to the second account.",
          "Final argument indicates the destination balance type."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128",
          "frame_support:traits:tokens:misc:BalanceStatus"
        ],
        "args_name": [
          "from",
          "to",
          "amount",
          "destination_status"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "Balance",
          "Status"
        ]
      },
      {
        "lookup": "0a07",
        "name": "Deposit",
        "docs": [
          "Some amount was deposited (e.g. for transaction fees)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a08",
        "name": "Withdraw",
        "docs": [
          "Some amount was withdrawn from the account (e.g. for transaction fees)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a09",
        "name": "Slashed",
        "docs": [
          "Some amount was removed from the account (e.g. for misbehavior)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a0a",
        "name": "Minted",
        "docs": [
          "Some amount was minted into an account."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a0b",
        "name": "Burned",
        "docs": [
          "Some amount was burned from an account."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a0c",
        "name": "Suspended",
        "docs": [
          "Some amount was suspended from an account (it can be restored later)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a0d",
        "name": "Restored",
        "docs": [
          "Some amount was restored into an account."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a0e",
        "name": "Upgraded",
        "docs": [
          "An account was upgraded."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "who"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0a0f",
        "name": "Issued",
        "docs": [
          "Total issuance was increased by `amount`, creating a credit to be balanced."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "amount"
        ],
        "args_type_name": [
          "Balance"
        ]
      },
      {
        "lookup": "0a10",
        "name": "Rescinded",
        "docs": [
          "Total issuance was decreased by `amount`, creating a debt to be balanced."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "amount"
        ],
        "args_type_name": [
          "Balance"
        ]
      },
      {
        "lookup": "0a11",
        "name": "Locked",
        "docs": [
          "Some balance was locked."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a12",
        "name": "Unlocked",
        "docs": [
          "Some balance was unlocked."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a13",
        "name": "Frozen",
        "docs": [
          "Some balance was frozen."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a14",
        "name": "Thawed",
        "docs": [
          "Some balance was thawed."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0a15",
        "name": "TotalIssuanceForced",
        "docs": [
          "The `TotalIssuance` was forcefully changed."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "old",
          "new"
        ],
        "args_type_name": [
          "Balance",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 33
    },
    "constants": [
      {
        "name": "ExistentialDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e1f505000000000000000000000000",
        "docs": [
          " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
          "",
          " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
          " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
          " In case you have multiple sources of provider references, you may also get unexpected",
          " behaviour if you set this to zero.",
          "",
          " Bottom line: Do yourself a favour and make it at least one!"
        ]
      },
      {
        "name": "MaxLocks",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of locks that should exist on an account.",
          " Not strictly enforced, but used for weight estimation.",
          "",
          " Use of locks is deprecated in favour of freezes. See `https://github.com/paritytech/substrate/pull/12951/`"
        ]
      },
      {
        "name": "MaxReserves",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of named reserves that can exist on an account.",
          "",
          " Use of reserves is deprecated in favour of holds. See `https://github.com/paritytech/substrate/pull/12951/`"
        ]
      },
      {
        "name": "MaxFreezes",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " The maximum number of individual freeze locks that can exist on an account at any time."
        ]
      }
    ],
    "errors": [
      {
        "name": "VestingBalance",
        "doc": [
          "Vesting balance too high to send value."
        ]
      },
      {
        "name": "LiquidityRestrictions",
        "doc": [
          "Account liquidity restrictions prevent withdrawal."
        ]
      },
      {
        "name": "InsufficientBalance",
        "doc": [
          "Balance too low to send value."
        ]
      },
      {
        "name": "ExistentialDeposit",
        "doc": [
          "Value too low to create account due to existential deposit."
        ]
      },
      {
        "name": "Expendability",
        "doc": [
          "Transfer/payment would kill account."
        ]
      },
      {
        "name": "ExistingVestingSchedule",
        "doc": [
          "A vesting schedule already exists for this account."
        ]
      },
      {
        "name": "DeadAccount",
        "doc": [
          "Beneficiary account must pre-exist."
        ]
      },
      {
        "name": "TooManyReserves",
        "doc": [
          "Number of named reserves exceed `MaxReserves`."
        ]
      },
      {
        "name": "TooManyHolds",
        "doc": [
          "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
        ]
      },
      {
        "name": "TooManyFreezes",
        "doc": [
          "Number of freezes exceed `MaxFreezes`."
        ]
      },
      {
        "name": "IssuanceDeactivated",
        "doc": [
          "The issuance cannot be modified since it is already deactivated."
        ]
      },
      {
        "name": "DeltaZero",
        "doc": [
          "The delta cannot be zero."
        ]
      }
    ],
    "errors_value": {
      "type": 236
    },
    "index": 10
  },
  {
    "name": "TransactionPayment",
    "prefix": "TransactionPayment",
    "storage": [
      {
        "name": "NextFeeMultiplier",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 205
        },
        "fallback": "0x000064a7b3b6e00d0000000000000000",
        "docs": null
      },
      {
        "name": "StorageVersion",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_transaction_payment:Releases",
          "PlainTypeValue": 237
        },
        "fallback": "0x00",
        "docs": null
      }
    ],
    "events": [
      {
        "lookup": "0b00",
        "name": "TransactionFeePaid",
        "docs": [
          "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
          "has been paid by `who`."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "actual_fee",
          "tip"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 35
    },
    "constants": [
      {
        "name": "OperationalFeeMultiplier",
        "type": "U8",
        "type_value": 2,
        "constants_value": "05",
        "docs": [
          " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
          " `priority`",
          "",
          " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
          " added to a tip component in regular `priority` calculations.",
          " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
          " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
          "",
          " ```rust,ignore",
          " // For `Normal`",
          " let priority = priority_calc(tip);",
          "",
          " // For `Operational`",
          " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
          " let priority = priority_calc(tip + virtual_tip);",
          " ```",
          "",
          " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
          " sent with the transaction. So, not only does the transaction get a priority bump based",
          " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
          " transactions."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 11
  },
  {
    "name": "AssetTxPayment",
    "prefix": "",
    "storage": null,
    "events": [
      {
        "lookup": "0d00",
        "name": "AssetTxFeePaid",
        "docs": [
          "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
          "has been paid by `who` in an asset `asset_id`."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128",
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "who",
          "actual_fee",
          "tip",
          "asset_id"
        ],
        "args_type_name": [
          "AccountId",
          "AssetBalanceOf",
          "BalanceOf",
          "ChargeAssetIdOf"
        ]
      },
      {
        "lookup": "0d01",
        "name": "AssetRefundFailed",
        "docs": [
          "A swap of the refund in native currency back to asset failed."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "native_amount_kept"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 36
    },
    "errors": null,
    "errors_value": null,
    "index": 13
  },
  {
    "name": "Vesting",
    "prefix": "Vesting",
    "storage": [
      {
        "name": "Vesting",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_vesting:vesting_info:VestingInfo>",
            "keys_id": 0,
            "value_id": 238
          }
        },
        "fallback": "0x00",
        "docs": [
          " Information regarding the vesting of a given account."
        ]
      },
      {
        "name": "StorageVersion",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_vesting:Releases",
          "PlainTypeValue": 241
        },
        "fallback": "0x00",
        "docs": [
          " Storage version of the pallet.",
          "",
          " New networks start with latest version, as determined by the genesis build."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0e00",
        "name": "vest",
        "docs": [
          "Unlock any vested funds of the sender account.",
          "",
          "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
          "locked under this pallet.",
          "",
          "Emits either `VestingCompleted` or `VestingUpdated`.",
          "",
          "## Complexity",
          "- `O(1)`."
        ],
        "args": null
      },
      {
        "lookup": "0e01",
        "name": "vest_other",
        "docs": [
          "Unlock any vested funds of a `target` account.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `target`: The account whose vested funds should be unlocked. Must have funds still",
          "locked under this pallet.",
          "",
          "Emits either `VestingCompleted` or `VestingUpdated`.",
          "",
          "## Complexity",
          "- `O(1)`."
        ],
        "args": [
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "0e02",
        "name": "vested_transfer",
        "docs": [
          "Create a vested transfer.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `target`: The account receiving the vested funds.",
          "- `schedule`: The vesting schedule attached to the transfer.",
          "",
          "Emits `VestingCreated`.",
          "",
          "NOTE: This will unlock all schedules through the current block.",
          "",
          "## Complexity",
          "- `O(1)`."
        ],
        "args": [
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "schedule",
            "type": "pallet_vesting:vesting_info:VestingInfo",
            "type_name": "VestingInfo<BalanceOf, BlockNumberFor>"
          }
        ]
      },
      {
        "lookup": "0e03",
        "name": "force_vested_transfer",
        "docs": [
          "Force a vested transfer.",
          "",
          "The dispatch origin for this call must be _Root_.",
          "",
          "- `source`: The account whose funds should be transferred.",
          "- `target`: The account that should be transferred the vested funds.",
          "- `schedule`: The vesting schedule attached to the transfer.",
          "",
          "Emits `VestingCreated`.",
          "",
          "NOTE: This will unlock all schedules through the current block.",
          "",
          "## Complexity",
          "- `O(1)`."
        ],
        "args": [
          {
            "name": "source",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "schedule",
            "type": "pallet_vesting:vesting_info:VestingInfo",
            "type_name": "VestingInfo<BalanceOf, BlockNumberFor>"
          }
        ]
      },
      {
        "lookup": "0e04",
        "name": "merge_schedules",
        "docs": [
          "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
          "the highest possible start and end blocks. If both schedules have already started the",
          "current block will be used as the schedule start; with the caveat that if one schedule",
          "is finished by the current block, the other will be treated as the new merged schedule,",
          "unmodified.",
          "",
          "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
          "NOTE: This will unlock all schedules through the current block prior to merging.",
          "NOTE: If both schedules have ended by the current block, no new schedule will be created",
          "and both will be removed.",
          "",
          "Merged schedule attributes:",
          "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
          "  current_block)`.",
          "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
          "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `schedule1_index`: index of the first schedule to merge.",
          "- `schedule2_index`: index of the second schedule to merge."
        ],
        "args": [
          {
            "name": "schedule1_index",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "schedule2_index",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "0e05",
        "name": "force_remove_vesting_schedule",
        "docs": [
          "Force remove a vesting schedule",
          "",
          "The dispatch origin for this call must be _Root_.",
          "",
          "- `target`: An account that has a vesting schedule",
          "- `schedule_index`: The vesting schedule index that should be removed"
        ],
        "args": [
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "Address"
          },
          {
            "name": "schedule_index",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 242
    },
    "events": [
      {
        "lookup": "0e00",
        "name": "VestingUpdated",
        "docs": [
          "The amount vested has been updated. This could indicate a change in funds available.",
          "The balance given is the amount which is left unvested (and thus locked)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account",
          "unvested"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "0e01",
        "name": "VestingCompleted",
        "docs": [
          "An \\[account\\] has become fully vested."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account"
        ],
        "args_type_name": [
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 47
    },
    "constants": [
      {
        "name": "MinVestedTransfer",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e1f505000000000000000000000000",
        "docs": [
          " The minimum amount transferred to call `vested_transfer`."
        ]
      },
      {
        "name": "MaxVestingSchedules",
        "type": "U32",
        "type_value": 4,
        "constants_value": "1c000000",
        "docs": null
      }
    ],
    "errors": [
      {
        "name": "NotVesting",
        "doc": [
          "The account given is not vesting."
        ]
      },
      {
        "name": "AtMaxVestingSchedules",
        "doc": [
          "The account already has `MaxVestingSchedules` count of schedules and thus",
          "cannot add another one. Consider merging existing schedules in order to add another."
        ]
      },
      {
        "name": "AmountLow",
        "doc": [
          "Amount being transferred is too low to create a vesting schedule."
        ]
      },
      {
        "name": "ScheduleIndexOutOfBounds",
        "doc": [
          "An index was out of bounds of the vesting schedules."
        ]
      },
      {
        "name": "InvalidScheduleParams",
        "doc": [
          "Failed to create a new schedule because some parameter was invalid."
        ]
      }
    ],
    "errors_value": {
      "type": 243
    },
    "index": 14
  },
  {
    "name": "Authorship",
    "prefix": "Authorship",
    "storage": [
      {
        "name": "Author",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "AccountId",
          "PlainTypeValue": 0
        },
        "fallback": "0x00",
        "docs": [
          " Author of current block."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 20
  },
  {
    "name": "CollatorSelection",
    "prefix": "CollatorSelection",
    "storage": [
      {
        "name": "Invulnerables",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 244
        },
        "fallback": "0x00",
        "docs": [
          " The invulnerable, permissioned collators. This list must be sorted."
        ]
      },
      {
        "name": "CandidateList",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<pallet_collator_selection:pallet:CandidateInfo>",
          "PlainTypeValue": 245
        },
        "fallback": "0x00",
        "docs": [
          " The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be",
          " mutually exclusive.",
          "",
          " This list is sorted in ascending order by deposit and when the deposits are equal, the least",
          " recently updated is considered greater."
        ]
      },
      {
        "name": "LastAuthoredBlock",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U32",
            "keys_id": 0,
            "value_id": 4
          }
        },
        "fallback": "0x00000000",
        "docs": [
          " Last block authored by collator."
        ]
      },
      {
        "name": "DesiredCandidates",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Desired number of candidates.",
          "",
          " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
        ]
      },
      {
        "name": "CandidacyBond",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Fixed amount to deposit to become a collator.",
          "",
          " When a collator calls `leave_intent` they immediately receive the deposit back."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1500",
        "name": "set_invulnerables",
        "docs": [
          "Set the list of invulnerable (fixed) collators. These collators must do some",
          "preparation, namely to have registered session keys.",
          "",
          "The call will remove any accounts that have not registered keys from the set. That is,",
          "it is non-atomic; the caller accepts all `AccountId`s passed in `new` _individually_ as",
          "acceptable Invulnerables, and is not proposing a _set_ of new Invulnerables.",
          "",
          "This call does not maintain mutual exclusivity of `Invulnerables` and `Candidates`. It",
          "is recommended to use a batch of `add_invulnerable` and `remove_invulnerable` instead. A",
          "`batch_all` can also be used to enforce atomicity. If any candidates are included in",
          "`new`, they should be removed with `remove_invulnerable_candidate` after execution.",
          "",
          "Must be called by the `UpdateOrigin`."
        ],
        "args": [
          {
            "name": "new",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          }
        ]
      },
      {
        "lookup": "1501",
        "name": "set_desired_candidates",
        "docs": [
          "Set the ideal number of non-invulnerable collators. If lowering this number, then the",
          "number of running collators could be higher than this figure. Aside from that edge case,",
          "there should be no other way to have more candidates than the desired number.",
          "",
          "The origin for this call must be the `UpdateOrigin`."
        ],
        "args": [
          {
            "name": "max",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1502",
        "name": "set_candidacy_bond",
        "docs": [
          "Set the candidacy bond amount.",
          "",
          "If the candidacy bond is increased by this call, all current candidates which have a",
          "deposit lower than the new bond will be kicked from the list and get their deposits",
          "back.",
          "",
          "The origin for this call must be the `UpdateOrigin`."
        ],
        "args": [
          {
            "name": "bond",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1503",
        "name": "register_as_candidate",
        "docs": [
          "Register this account as a collator candidate. The account must (a) already have",
          "registered session keys and (b) be able to reserve the `CandidacyBond`.",
          "",
          "This call is not available to `Invulnerable` collators."
        ],
        "args": null
      },
      {
        "lookup": "1504",
        "name": "leave_intent",
        "docs": [
          "Deregister `origin` as a collator candidate. Note that the collator can only leave on",
          "session change. The `CandidacyBond` will be unreserved immediately.",
          "",
          "This call will fail if the total number of candidates would drop below",
          "`MinEligibleCollators`."
        ],
        "args": null
      },
      {
        "lookup": "1505",
        "name": "add_invulnerable",
        "docs": [
          "Add a new account `who` to the list of `Invulnerables` collators. `who` must have",
          "registered session keys. If `who` is a candidate, they will be removed.",
          "",
          "The origin for this call must be the `UpdateOrigin`."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "1506",
        "name": "remove_invulnerable",
        "docs": [
          "Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must",
          "be sorted.",
          "",
          "The origin for this call must be the `UpdateOrigin`."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "1507",
        "name": "update_bond",
        "docs": [
          "Update the candidacy bond of collator candidate `origin` to a new amount `new_deposit`.",
          "",
          "Setting a `new_deposit` that is lower than the current deposit while `origin` is",
          "occupying a top-`DesiredCandidates` slot is not allowed.",
          "",
          "This call will fail if `origin` is not a collator candidate, the updated bond is lower",
          "than the minimum candidacy bond, and/or the amount cannot be reserved."
        ],
        "args": [
          {
            "name": "new_deposit",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1508",
        "name": "take_candidate_slot",
        "docs": [
          "The caller `origin` replaces a candidate `target` in the collator candidate list by",
          "reserving `deposit`. The amount `deposit` reserved by the caller must be greater than",
          "the existing bond of the target it is trying to replace.",
          "",
          "This call will fail if the caller is already a collator candidate or invulnerable, the",
          "caller does not have registered session keys, the target is not a collator candidate,",
          "and/or the `deposit` amount cannot be reserved."
        ],
        "args": [
          {
            "name": "deposit",
            "type": "U128",
            "type_name": "BalanceOf"
          },
          {
            "name": "target",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 248
    },
    "events": [
      {
        "lookup": "1500",
        "name": "NewInvulnerables",
        "docs": [
          "New Invulnerables were set."
        ],
        "args": [
          "Vec<AccountId>"
        ],
        "args_name": [
          "invulnerables"
        ],
        "args_type_name": [
          "Vec<AccountId>"
        ]
      },
      {
        "lookup": "1501",
        "name": "InvulnerableAdded",
        "docs": [
          "A new Invulnerable was added."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account_id"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "1502",
        "name": "InvulnerableRemoved",
        "docs": [
          "An Invulnerable was removed."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account_id"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "1503",
        "name": "NewDesiredCandidates",
        "docs": [
          "The number of desired candidates was set."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "desired_candidates"
        ],
        "args_type_name": [
          "u32"
        ]
      },
      {
        "lookup": "1504",
        "name": "NewCandidacyBond",
        "docs": [
          "The candidacy bond was set."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "bond_amount"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      },
      {
        "lookup": "1505",
        "name": "CandidateAdded",
        "docs": [
          "A new candidate joined."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account_id",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1506",
        "name": "CandidateBondUpdated",
        "docs": [
          "Bond of a candidate updated."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account_id",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1507",
        "name": "CandidateRemoved",
        "docs": [
          "A candidate was removed."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account_id"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "1508",
        "name": "CandidateReplaced",
        "docs": [
          "An account was replaced in the candidate list by another one."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "old",
          "new",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1509",
        "name": "InvalidInvulnerableSkipped",
        "docs": [
          "An account was unable to be added to the Invulnerables because they did not have keys",
          "registered. Other Invulnerables may have been set."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account_id"
        ],
        "args_type_name": [
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 48
    },
    "errors": [
      {
        "name": "TooManyCandidates",
        "doc": [
          "The pallet has too many candidates."
        ]
      },
      {
        "name": "TooFewEligibleCollators",
        "doc": [
          "Leaving would result in too few candidates."
        ]
      },
      {
        "name": "AlreadyCandidate",
        "doc": [
          "Account is already a candidate."
        ]
      },
      {
        "name": "NotCandidate",
        "doc": [
          "Account is not a candidate."
        ]
      },
      {
        "name": "TooManyInvulnerables",
        "doc": [
          "There are too many Invulnerables."
        ]
      },
      {
        "name": "AlreadyInvulnerable",
        "doc": [
          "Account is already an Invulnerable."
        ]
      },
      {
        "name": "NotInvulnerable",
        "doc": [
          "Account is not an Invulnerable."
        ]
      },
      {
        "name": "NoAssociatedValidatorId",
        "doc": [
          "Account has no associated validator ID."
        ]
      },
      {
        "name": "ValidatorNotRegistered",
        "doc": [
          "Validator ID is not yet registered."
        ]
      },
      {
        "name": "InsertToCandidateListFailed",
        "doc": [
          "Could not insert in the candidate list."
        ]
      },
      {
        "name": "RemoveFromCandidateListFailed",
        "doc": [
          "Could not remove from the candidate list."
        ]
      },
      {
        "name": "DepositTooLow",
        "doc": [
          "New deposit amount would be below the minimum candidacy bond."
        ]
      },
      {
        "name": "UpdateCandidateListFailed",
        "doc": [
          "Could not update the candidate list."
        ]
      },
      {
        "name": "InsufficientBond",
        "doc": [
          "Deposit amount is too low to take the target's slot in the candidate list."
        ]
      },
      {
        "name": "TargetIsNotCandidate",
        "doc": [
          "The target account to be replaced in the candidate list is not a candidate."
        ]
      },
      {
        "name": "IdenticalDeposit",
        "doc": [
          "The updated deposit amount is equal to the amount already reserved."
        ]
      },
      {
        "name": "InvalidUnreserve",
        "doc": [
          "Cannot lower candidacy bond while occupying a future collator slot in the list."
        ]
      }
    ],
    "errors_value": {
      "type": 249
    },
    "index": 21
  },
  {
    "name": "Session",
    "prefix": "Session",
    "storage": [
      {
        "name": "Validators",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 49
        },
        "fallback": "0x00",
        "docs": [
          " The current set of validators."
        ]
      },
      {
        "name": "CurrentIndex",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Current index of the session."
        ]
      },
      {
        "name": "QueuedChanged",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " True if the underlying economic identities or weighting behind the validators",
          " has changed in the queued validator set."
        ]
      },
      {
        "name": "QueuedKeys",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:AccountIdasset_hub_polkadot_runtime:SessionKeys>",
          "PlainTypeValue": 250
        },
        "fallback": "0x00",
        "docs": [
          " The queued keys for the next session. When the next session begins, these keys",
          " will be used to determine the validator's session keys."
        ]
      },
      {
        "name": "DisabledValidators",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U32>",
          "PlainTypeValue": 133
        },
        "fallback": "0x00",
        "docs": [
          " Indices of disabled validators.",
          "",
          " The vec is always kept sorted so that we can find whether a given validator is",
          " disabled using binary search. It gets cleared when `on_session_ending` returns",
          " a new set of identities."
        ]
      },
      {
        "name": "NextKeys",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "[U8; 32]",
            "keys_id": 0,
            "value_id": 252
          }
        },
        "fallback": "0x00",
        "docs": [
          " The next session keys for a validator."
        ]
      },
      {
        "name": "KeyOwner",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "Tuple:[U8; 4]Vec<U8>"
            ],
            "value": "AccountId",
            "keys_id": 254,
            "value_id": 0
          }
        },
        "fallback": "0x00",
        "docs": [
          " The owner of a key. The key is the `KeyTypeId` + the encoded key."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1600",
        "name": "set_keys",
        "docs": [
          "Sets the session key(s) of the function caller to `keys`.",
          "Allows an account to set its session key prior to becoming a validator.",
          "This doesn't take effect until the next session.",
          "",
          "The dispatch origin of this function must be signed.",
          "",
          "## Complexity",
          "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
          "  fixed."
        ],
        "args": [
          {
            "name": "keys",
            "type": "[U8; 32]",
            "type_name": "Keys"
          },
          {
            "name": "proof",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "1601",
        "name": "purge_keys",
        "docs": [
          "Removes any session key(s) of the function caller.",
          "",
          "This doesn't take effect until the next session.",
          "",
          "The dispatch origin of this function must be Signed and the account must be either be",
          "convertible to a validator ID using the chain's typical addressing system (this usually",
          "means being a controller account) or directly convertible into a validator ID (which",
          "usually means being a stash account).",
          "",
          "## Complexity",
          "- `O(1)` in number of key types. Actual cost depends on the number of length of",
          "  `T::Keys::key_ids()` which is fixed."
        ],
        "args": null
      }
    ],
    "calls_value": {
      "type": 256
    },
    "events": [
      {
        "lookup": "1600",
        "name": "NewSession",
        "docs": [
          "New session has happened. Note that the argument is the session index, not the",
          "block number as the type might suggest."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "session_index"
        ],
        "args_type_name": [
          "SessionIndex"
        ]
      }
    ],
    "events_value": {
      "type": 50
    },
    "errors": [
      {
        "name": "InvalidProof",
        "doc": [
          "Invalid ownership proof."
        ]
      },
      {
        "name": "NoAssociatedValidatorId",
        "doc": [
          "No associated validator ID for account."
        ]
      },
      {
        "name": "DuplicatedKey",
        "doc": [
          "Registered duplicate key."
        ]
      },
      {
        "name": "NoKeys",
        "doc": [
          "No keys are associated with this account."
        ]
      },
      {
        "name": "NoAccount",
        "doc": [
          "Key setting account is not live, so it's impossible to associate keys."
        ]
      }
    ],
    "errors_value": {
      "type": 257
    },
    "index": 22
  },
  {
    "name": "Aura",
    "prefix": "Aura",
    "storage": [
      {
        "name": "Authorities",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<[U8; 32]>",
          "PlainTypeValue": 258
        },
        "fallback": "0x00",
        "docs": [
          " The current authority set."
        ]
      },
      {
        "name": "CurrentSlot",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 260
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The current slot of this block.",
          "",
          " This will be set in `on_initialize`."
        ]
      }
    ],
    "constants": [
      {
        "name": "SlotDuration",
        "type": "U64",
        "type_value": 12,
        "constants_value": "e02e000000000000",
        "docs": [
          " The slot duration Aura should run with, expressed in milliseconds.",
          " The effective value of this type should not change while the chain is running.",
          "",
          " For backwards compatibility either use [`MinimumPeriodTimesTwo`] or a const."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 23
  },
  {
    "name": "AuraExt",
    "prefix": "AuraExt",
    "storage": [
      {
        "name": "Authorities",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<[U8; 32]>",
          "PlainTypeValue": 258
        },
        "fallback": "0x00",
        "docs": [
          " Serves as cache for the authorities.",
          "",
          " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
          " but we require the old authorities to verify the seal when validating a PoV. This will",
          " always be updated to the latest AuRa authorities in `on_finalize`."
        ]
      },
      {
        "name": "SlotInfo",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Tuple:U64U32",
          "PlainTypeValue": 261
        },
        "fallback": "0x00",
        "docs": [
          " Current slot paired with a number of authored blocks.",
          "",
          " Updated on each block initialization."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 24
  },
  {
    "name": "XcmpQueue",
    "prefix": "XcmpQueue",
    "storage": [
      {
        "name": "InboundXcmpSuspended",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U32>",
          "PlainTypeValue": 262
        },
        "fallback": "0x00",
        "docs": [
          " The suspended inbound XCMP channels. All others are not suspended.",
          "",
          " This is a `StorageValue` instead of a `StorageMap` since we expect multiple reads per block",
          " to different keys with a one byte payload. The access to `BoundedBTreeSet` will be cached",
          " within the block and therefore only included once in the proof size.",
          "",
          " NOTE: The PoV benchmarking cannot know this and will over-estimate, but the actual proof",
          " will be smaller."
        ]
      },
      {
        "name": "OutboundXcmpStatus",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<cumulus_pallet_xcmp_queue:OutboundChannelDetails>",
          "PlainTypeValue": 265
        },
        "fallback": "0x00",
        "docs": [
          " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
          " and last outbound message. If the two indices are equal, then it indicates an empty",
          " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
          " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
          " case of the need to send a high-priority signal message this block.",
          " The bool is true if there is a signal message waiting to be sent."
        ]
      },
      {
        "name": "OutboundXcmpMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "U32",
              "U16"
            ],
            "value": "Vec<U8>",
            "keys_id": 269,
            "value_id": 270
          }
        },
        "fallback": "0x00",
        "docs": [
          " The messages outbound in a given XCMP channel."
        ]
      },
      {
        "name": "SignalMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 120,
            "value_id": 270
          }
        },
        "fallback": "0x00",
        "docs": [
          " Any signal messages waiting to be sent."
        ]
      },
      {
        "name": "QueueConfig",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_xcmp_queue:QueueConfigData",
          "PlainTypeValue": 271
        },
        "fallback": "0x200000003000000008000000",
        "docs": [
          " The configuration which controls the dynamics of the outbound queue."
        ]
      },
      {
        "name": "QueueSuspended",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
        ]
      },
      {
        "name": "DeliveryFeeFactor",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U128",
            "keys_id": 120,
            "value_id": 205
          }
        },
        "fallback": "0x000064a7b3b6e00d0000000000000000",
        "docs": [
          " The factor to multiply the base delivery fee by."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1e01",
        "name": "suspend_xcm_execution",
        "docs": [
          "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
          "",
          "- `origin`: Must pass `ControllerOrigin`."
        ],
        "args": null
      },
      {
        "lookup": "1e02",
        "name": "resume_xcm_execution",
        "docs": [
          "Resumes all XCM executions for the XCMP queue.",
          "",
          "Note that this function doesn't change the status of the in/out bound channels.",
          "",
          "- `origin`: Must pass `ControllerOrigin`."
        ],
        "args": null
      },
      {
        "lookup": "1e03",
        "name": "update_suspend_threshold",
        "docs": [
          "Overwrites the number of pages which must be in the queue for the other side to be",
          "told to suspend their sending.",
          "",
          "- `origin`: Must pass `Root`.",
          "- `new`: Desired value for `QueueConfigData.suspend_value`"
        ],
        "args": [
          {
            "name": "new",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1e04",
        "name": "update_drop_threshold",
        "docs": [
          "Overwrites the number of pages which must be in the queue after which we drop any",
          "further messages from the channel.",
          "",
          "- `origin`: Must pass `Root`.",
          "- `new`: Desired value for `QueueConfigData.drop_threshold`"
        ],
        "args": [
          {
            "name": "new",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1e05",
        "name": "update_resume_threshold",
        "docs": [
          "Overwrites the number of pages which the queue must be reduced to before it signals",
          "that message sending may recommence after it has been suspended.",
          "",
          "- `origin`: Must pass `Root`.",
          "- `new`: Desired value for `QueueConfigData.resume_threshold`"
        ],
        "args": [
          {
            "name": "new",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 272
    },
    "events": [
      {
        "lookup": "1e00",
        "name": "XcmpMessageSent",
        "docs": [
          "An HRMP message was sent to a sibling parachain."
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "XcmHash"
        ]
      }
    ],
    "events_value": {
      "type": 51
    },
    "constants": [
      {
        "name": "MaxInboundSuspended",
        "type": "U32",
        "type_value": 4,
        "constants_value": "e8030000",
        "docs": [
          " The maximum number of inbound XCMP channels that can be suspended simultaneously.",
          "",
          " Any further channel suspensions will fail and messages may get dropped without further",
          " notice. Choosing a high value (1000) is okay; the trade-off that is described in",
          " [`InboundXcmpSuspended`] still applies at that scale."
        ]
      },
      {
        "name": "MaxActiveOutboundChannels",
        "type": "U32",
        "type_value": 4,
        "constants_value": "80000000",
        "docs": [
          " Maximal number of outbound XCMP channels that can have messages queued at the same time.",
          "",
          " If this is reached, then no further messages can be sent to channels that do not yet",
          " have a message queued. This should be set to the expected maximum of outbound channels",
          " which is determined by [`Self::ChannelInfo`]. It is important to set this large enough,",
          " since otherwise the congestion control protocol will not work as intended and messages",
          " may be dropped. This value increases the PoV and should therefore not be picked too",
          " high. Governance needs to pay attention to not open more channels than this value."
        ]
      },
      {
        "name": "MaxPageSize",
        "type": "U32",
        "type_value": 4,
        "constants_value": "009c0100",
        "docs": [
          " The maximal page size for HRMP message pages.",
          "",
          " A lower limit can be set dynamically, but this is the hard-limit for the PoV worst case",
          " benchmarking. The limit for the size of a message is slightly below this, since some",
          " overhead is incurred for encoding the format."
        ]
      }
    ],
    "errors": [
      {
        "name": "BadQueueConfig",
        "doc": [
          "Setting the queue config failed since one of its values was invalid."
        ]
      },
      {
        "name": "AlreadySuspended",
        "doc": [
          "The execution is already suspended."
        ]
      },
      {
        "name": "AlreadyResumed",
        "doc": [
          "The execution is already resumed."
        ]
      },
      {
        "name": "TooManyActiveOutboundChannels",
        "doc": [
          "There are too many active outbound channels."
        ]
      },
      {
        "name": "TooBig",
        "doc": [
          "The message is too big."
        ]
      }
    ],
    "errors_value": {
      "type": 273
    },
    "index": 30
  },
  {
    "name": "PolkadotXcm",
    "prefix": "PolkadotXcm",
    "storage": [
      {
        "name": "QueryCounter",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 12
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The latest available query index."
        ]
      },
      {
        "name": "Queries",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U64"
            ],
            "value": "pallet_xcm:pallet:QueryStatus",
            "keys_id": 12,
            "value_id": 274
          }
        },
        "fallback": "0x00",
        "docs": [
          " The ongoing queries."
        ]
      },
      {
        "name": "AssetTraps",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "U32",
            "keys_id": 13,
            "value_id": 4
          }
        },
        "fallback": "0x00000000",
        "docs": [
          " The existing asset traps.",
          "",
          " Key is the blake2 256 hash of (origin, versioned `Assets`) pair. Value is the number of",
          " times this pair has been trapped (usually just 1 if it exists at all)."
        ]
      },
      {
        "name": "SafeXcmVersion",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Default version to encode XCM when latest version of destination is unknown. If `None`,",
          " then the destinations whose XCM version is unknown are considered unreachable."
        ]
      },
      {
        "name": "SupportedVersion",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "xcm:VersionedLocation"
            ],
            "value": "U32",
            "keys_id": 288,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " The Latest versions that we know various locations support."
        ]
      },
      {
        "name": "VersionNotifiers",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "xcm:VersionedLocation"
            ],
            "value": "U64",
            "keys_id": 288,
            "value_id": 12
          }
        },
        "fallback": "0x00",
        "docs": [
          " All locations that we have requested version notifications from."
        ]
      },
      {
        "name": "VersionNotifyTargets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "xcm:VersionedLocation"
            ],
            "value": "Tuple:U64sp_weights:weight_v2:WeightU32",
            "keys_id": 288,
            "value_id": 289
          }
        },
        "fallback": "0x00",
        "docs": [
          " The target locations that are subscribed to our version changes, as well as the most recent",
          " of our versions we informed them of."
        ]
      },
      {
        "name": "VersionDiscoveryQueue",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:xcm:VersionedLocationU32>",
          "PlainTypeValue": 290
        },
        "fallback": "0x00",
        "docs": [
          " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
          " the `u32` counter is the number of times that a send to the destination has been attempted,",
          " which is used as a prioritization."
        ]
      },
      {
        "name": "CurrentMigration",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_xcm:pallet:VersionMigrationStage",
          "PlainTypeValue": 293
        },
        "fallback": "0x00",
        "docs": [
          " The current migration's stage, if any."
        ]
      },
      {
        "name": "RemoteLockedFungibles",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId",
              "xcm:VersionedAssetId"
            ],
            "value": "pallet_xcm:pallet:RemoteLockedFungibleRecord",
            "keys_id": 295,
            "value_id": 297
          }
        },
        "fallback": "0x00",
        "docs": [
          " Fungible assets which we know are locked on a remote chain."
        ]
      },
      {
        "name": "LockedFungibles",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<Tuple:U128xcm:VersionedLocation>",
            "keys_id": 0,
            "value_id": 301
          }
        },
        "fallback": "0x00",
        "docs": [
          " Fungible assets which we know are locked on this chain."
        ]
      },
      {
        "name": "XcmExecutionSuspended",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " Global suspension state of the XCM executor."
        ]
      },
      {
        "name": "ShouldRecordXcm",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " Whether or not incoming XCMs (both executed locally and received) should be recorded.",
          " Only one XCM program will be recorded at a time.",
          " This is meant to be used in runtime APIs, and it's advised it stays false",
          " for all other use cases, so as to not degrade regular performance.",
          "",
          " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
          " implementation in the XCM executor configuration."
        ]
      },
      {
        "name": "RecordedXcm",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<staging_xcm:v4:Instruction@70>",
          "PlainTypeValue": 68
        },
        "fallback": "0x00",
        "docs": [
          " If [`ShouldRecordXcm`] is set to true, then the last XCM program executed locally",
          " will be stored here.",
          " Runtime APIs can fetch the XCM that was executed by accessing this value.",
          "",
          " Only relevant if this pallet is being used as the [`xcm_executor::traits::RecordXcm`]",
          " implementation in the XCM executor configuration."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1f00",
        "name": "send",
        "docs": null,
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "message",
            "type": "xcm:VersionedXcm@305",
            "type_name": "Box<VersionedXcm<()>>"
          }
        ]
      },
      {
        "lookup": "1f01",
        "name": "teleport_assets",
        "docs": [
          "Teleport some assets from the local chain to some destination chain.",
          "",
          "**This function is deprecated: Use `limited_teleport_assets` instead.**",
          "",
          "Fee payment on the destination side is made from the asset in the `assets` vector of",
          "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
          "with all fees taken as needed from the asset.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `[Parent,",
          "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
          "  relay to parachain.",
          "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
          "  generally be an `AccountId32` value.",
          "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
          "  fee on the `dest` chain.",
          "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
          "  fees."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedAssets",
            "type_name": "Box<VersionedAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1f02",
        "name": "reserve_transfer_assets",
        "docs": [
          "Transfer some assets from the local chain to the destination chain through their local,",
          "destination or remote reserve.",
          "",
          "`assets` must have same reserve location and may not be teleportable to `dest`.",
          " - `assets` have local reserve: transfer assets to sovereign account of destination",
          "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
          "   assets to `beneficiary`.",
          " - `assets` have destination reserve: burn local assets and forward a notification to",
          "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
          "   deposit them to `beneficiary`.",
          " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
          "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
          "   to mint and deposit reserve-based assets to `beneficiary`.",
          "",
          "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**",
          "",
          "Fee payment on the destination side is made from the asset in the `assets` vector of",
          "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
          "with all fees taken as needed from the asset.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `[Parent,",
          "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
          "  relay to parachain.",
          "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
          "  generally be an `AccountId32` value.",
          "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
          "  fee on the `dest` (and possibly reserve) chains.",
          "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
          "  fees."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedAssets",
            "type_name": "Box<VersionedAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1f03",
        "name": "execute",
        "docs": [
          "Execute an XCM message from a local, signed, origin.",
          "",
          "An event is deposited indicating whether `msg` could be executed completely or only",
          "partially.",
          "",
          "No more than `max_weight` will be used in its attempted execution. If this is less than",
          "the maximum amount of weight that the message could take to be executed, then no",
          "execution attempt will be made."
        ],
        "args": [
          {
            "name": "message",
            "type": "xcm:VersionedXcm@322",
            "type_name": "Box<VersionedXcm<<T as Config>::RuntimeCall>>"
          },
          {
            "name": "max_weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "1f04",
        "name": "force_xcm_version",
        "docs": [
          "Extoll that a particular destination can be communicated with through a particular",
          "version of XCM.",
          "",
          "- `origin`: Must be an origin specified by AdminOrigin.",
          "- `location`: The destination that is being described.",
          "- `xcm_version`: The latest version of XCM that `location` supports."
        ],
        "args": [
          {
            "name": "location",
            "type": "staging_xcm:v4:location:Location",
            "type_name": "Box<Location>"
          },
          {
            "name": "version",
            "type": "U32",
            "type_name": "XcmVersion"
          }
        ]
      },
      {
        "lookup": "1f05",
        "name": "force_default_xcm_version",
        "docs": [
          "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
          "version a destination can accept is unknown).",
          "",
          "- `origin`: Must be an origin specified by AdminOrigin.",
          "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
        ],
        "args": [
          {
            "name": "maybe_xcm_version",
            "type": "option<U32>",
            "type_name": "Option<XcmVersion>"
          }
        ]
      },
      {
        "lookup": "1f06",
        "name": "force_subscribe_version_notify",
        "docs": [
          "Ask a location to notify us regarding their XCM version and any changes to it.",
          "",
          "- `origin`: Must be an origin specified by AdminOrigin.",
          "- `location`: The location to which we should subscribe for XCM version notifications."
        ],
        "args": [
          {
            "name": "location",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          }
        ]
      },
      {
        "lookup": "1f07",
        "name": "force_unsubscribe_version_notify",
        "docs": [
          "Require that a particular destination should no longer notify us regarding any XCM",
          "version changes.",
          "",
          "- `origin`: Must be an origin specified by AdminOrigin.",
          "- `location`: The location to which we are currently subscribed for XCM version",
          "  notifications which we no longer desire."
        ],
        "args": [
          {
            "name": "location",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          }
        ]
      },
      {
        "lookup": "1f08",
        "name": "limited_reserve_transfer_assets",
        "docs": [
          "Transfer some assets from the local chain to the destination chain through their local,",
          "destination or remote reserve.",
          "",
          "`assets` must have same reserve location and may not be teleportable to `dest`.",
          " - `assets` have local reserve: transfer assets to sovereign account of destination",
          "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
          "   assets to `beneficiary`.",
          " - `assets` have destination reserve: burn local assets and forward a notification to",
          "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
          "   deposit them to `beneficiary`.",
          " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
          "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
          "   to mint and deposit reserve-based assets to `beneficiary`.",
          "",
          "Fee payment on the destination side is made from the asset in the `assets` vector of",
          "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
          "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
          "at risk.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `[Parent,",
          "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
          "  relay to parachain.",
          "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
          "  generally be an `AccountId32` value.",
          "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
          "  fee on the `dest` (and possibly reserve) chains.",
          "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
          "  fees.",
          "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedAssets",
            "type_name": "Box<VersionedAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "1f09",
        "name": "limited_teleport_assets",
        "docs": [
          "Teleport some assets from the local chain to some destination chain.",
          "",
          "Fee payment on the destination side is made from the asset in the `assets` vector of",
          "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
          "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
          "at risk.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `[Parent,",
          "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
          "  relay to parachain.",
          "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
          "  generally be an `AccountId32` value.",
          "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
          "  fee on the `dest` chain.",
          "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
          "  fees.",
          "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedAssets",
            "type_name": "Box<VersionedAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "1f0a",
        "name": "force_suspension",
        "docs": [
          "Set or unset the global suspension state of the XCM executor.",
          "",
          "- `origin`: Must be an origin specified by AdminOrigin.",
          "- `suspended`: `true` to suspend, `false` to resume."
        ],
        "args": [
          {
            "name": "suspended",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "1f0b",
        "name": "transfer_assets",
        "docs": [
          "Transfer some assets from the local chain to the destination chain through their local,",
          "destination or remote reserve, or through teleports.",
          "",
          "Fee payment on the destination side is made from the asset in the `assets` vector of",
          "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for",
          "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the",
          "operation will fail and the sent assets may be at risk.",
          "",
          "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable",
          "to `dest`, no limitations imposed on `fees`.",
          " - for local reserve: transfer assets to sovereign account of destination chain and",
          "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to",
          "   `beneficiary`.",
          " - for destination reserve: burn local assets and forward a notification to `dest` chain",
          "   to withdraw the reserve assets from this chain's sovereign account and deposit them",
          "   to `beneficiary`.",
          " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves",
          "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint",
          "   and deposit reserve-based assets to `beneficiary`.",
          " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport",
          "   assets and deposit them to `beneficiary`.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `X2(Parent,",
          "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send",
          "  from relay to parachain.",
          "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
          "  generally be an `AccountId32` value.",
          "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
          "  fee on the `dest` (and possibly reserve) chains.",
          "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
          "  fees.",
          "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedAssets",
            "type_name": "Box<VersionedAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "1f0c",
        "name": "claim_assets",
        "docs": [
          "Claims assets trapped on this pallet because of leftover assets during XCM execution.",
          "",
          "- `origin`: Anyone can call this extrinsic.",
          "- `assets`: The exact assets that were trapped. Use the version to specify what version",
          "was the latest when they were trapped.",
          "- `beneficiary`: The location/account where the claimed assets will be deposited."
        ],
        "args": [
          {
            "name": "assets",
            "type": "xcm:VersionedAssets",
            "type_name": "Box<VersionedAssets>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          }
        ]
      },
      {
        "lookup": "1f0d",
        "name": "transfer_assets_using_type_and_then",
        "docs": [
          "Transfer assets from the local chain to the destination chain using explicit transfer",
          "types for assets and fees.",
          "",
          "`assets` must have same reserve location or may be teleportable to `dest`. Caller must",
          "provide the `assets_transfer_type` to be used for `assets`:",
          " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination",
          "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
          "   assets to `beneficiary`.",
          " - `TransferType::DestinationReserve`: burn local assets and forward a notification to",
          "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
          "   deposit them to `beneficiary`.",
          " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`",
          "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another",
          "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically",
          "   the remote `reserve` is Asset Hub.",
          " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to",
          "   mint/teleport assets and deposit them to `beneficiary`.",
          "",
          "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to",
          "buy execution using transferred `assets` identified by `remote_fees_id`.",
          "Make sure enough of the specified `remote_fees_id` asset is included in the given list",
          "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight",
          "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
          "at risk.",
          "",
          "`remote_fees_id` may use different transfer type than rest of `assets` and can be",
          "specified through `fees_transfer_type`.",
          "",
          "The caller needs to specify what should happen to the transferred assets once they reach",
          "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which",
          "contains the instructions to execute on `dest` as a final step.",
          "  This is usually as simple as:",
          "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,",
          "  but could be something more exotic like sending the `assets` even further.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `[Parent,",
          "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
          "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from",
          "  parachain across a bridge to another ecosystem destination.",
          "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
          "  fee on the `dest` (and possibly reserve) chains.",
          "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.",
          "- `remote_fees_id`: One of the included `assets` to be used to pay fees.",
          "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.",
          "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the",
          "  transfer, which also determines what happens to the assets on the destination chain.",
          "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedLocation",
            "type_name": "Box<VersionedLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedAssets",
            "type_name": "Box<VersionedAssets>"
          },
          {
            "name": "assets_transfer_type",
            "type": "staging_xcm_executor:traits:asset_transfer:TransferType",
            "type_name": "Box<TransferType>"
          },
          {
            "name": "remote_fees_id",
            "type": "xcm:VersionedAssetId",
            "type_name": "Box<VersionedAssetId>"
          },
          {
            "name": "fees_transfer_type",
            "type": "staging_xcm_executor:traits:asset_transfer:TransferType",
            "type_name": "Box<TransferType>"
          },
          {
            "name": "custom_xcm_on_dest",
            "type": "xcm:VersionedXcm@305",
            "type_name": "Box<VersionedXcm<()>>"
          },
          {
            "name": "weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 304
    },
    "events": [
      {
        "lookup": "1f00",
        "name": "Attempted",
        "docs": [
          "Execution of an XCM message was attempted."
        ],
        "args": [
          "staging_xcm:v4:traits:Outcome"
        ],
        "args_name": [
          "outcome"
        ],
        "args_type_name": [
          "xcm::latest::Outcome"
        ]
      },
      {
        "lookup": "1f01",
        "name": "Sent",
        "docs": [
          "A XCM message was sent."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "staging_xcm:v4:location:Location",
          "Vec<staging_xcm:v4:Instruction@70>",
          "[U8; 32]"
        ],
        "args_name": [
          "origin",
          "destination",
          "message",
          "message_id"
        ],
        "args_type_name": [
          "Location",
          "Location",
          "Xcm<()>",
          "XcmHash"
        ]
      },
      {
        "lookup": "1f02",
        "name": "UnexpectedResponse",
        "docs": [
          "Query response received which does not match a registered query. This may be because a",
          "matching query was never registered, it may be because it is a duplicate response, or",
          "because the query timed out."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U64"
        ],
        "args_name": [
          "origin",
          "query_id"
        ],
        "args_type_name": [
          "Location",
          "QueryId"
        ]
      },
      {
        "lookup": "1f03",
        "name": "ResponseReady",
        "docs": [
          "Query response has been received and is ready for taking with `take_response`. There is",
          "no registered notification call."
        ],
        "args": [
          "U64",
          "staging_xcm:v4:Response"
        ],
        "args_name": [
          "query_id",
          "response"
        ],
        "args_type_name": [
          "QueryId",
          "Response"
        ]
      },
      {
        "lookup": "1f04",
        "name": "Notified",
        "docs": [
          "Query response has been received and query is removed. The registered notification has",
          "been dispatched and executed successfully."
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "query_id",
          "pallet_index",
          "call_index"
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "1f05",
        "name": "NotifyOverweight",
        "docs": [
          "Query response has been received and query is removed. The registered notification",
          "could not be dispatched because the dispatch weight is greater than the maximum weight",
          "originally budgeted by this runtime for the query result."
        ],
        "args": [
          "U64",
          "U8",
          "U8",
          "sp_weights:weight_v2:Weight",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "query_id",
          "pallet_index",
          "call_index",
          "actual_weight",
          "max_budgeted_weight"
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8",
          "Weight",
          "Weight"
        ]
      },
      {
        "lookup": "1f06",
        "name": "NotifyDispatchError",
        "docs": [
          "Query response has been received and query is removed. There was a general error with",
          "dispatching the notification call."
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "query_id",
          "pallet_index",
          "call_index"
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "1f07",
        "name": "NotifyDecodeFailed",
        "docs": [
          "Query response has been received and query is removed. The dispatch was unable to be",
          "decoded into a `Call`; this might be due to dispatch function having a signature which",
          "is not `(origin, QueryId, Response)`."
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "query_id",
          "pallet_index",
          "call_index"
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "1f08",
        "name": "InvalidResponder",
        "docs": [
          "Expected query response has been received but the origin location of the response does",
          "not match that expected. The query remains registered for a later, valid, response to",
          "be received and acted upon."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U64",
          "option<staging_xcm:v4:location:Location>"
        ],
        "args_name": [
          "origin",
          "query_id",
          "expected_location"
        ],
        "args_type_name": [
          "Location",
          "QueryId",
          "Option<Location>"
        ]
      },
      {
        "lookup": "1f09",
        "name": "InvalidResponderVersion",
        "docs": [
          "Expected query response has been received but the expected origin location placed in",
          "storage by this runtime previously cannot be decoded. The query remains registered.",
          "",
          "This is unexpected (since a location placed in storage in a previously executing",
          "runtime should be readable prior to query timeout) and dangerous since the possibly",
          "valid response will be dropped. Manual governance intervention is probably going to be",
          "needed."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U64"
        ],
        "args_name": [
          "origin",
          "query_id"
        ],
        "args_type_name": [
          "Location",
          "QueryId"
        ]
      },
      {
        "lookup": "1f0a",
        "name": "ResponseTaken",
        "docs": [
          "Received query response has been read and removed."
        ],
        "args": [
          "U64"
        ],
        "args_name": [
          "query_id"
        ],
        "args_type_name": [
          "QueryId"
        ]
      },
      {
        "lookup": "1f0b",
        "name": "AssetsTrapped",
        "docs": [
          "Some assets have been placed in an asset trap."
        ],
        "args": [
          "H256",
          "staging_xcm:v4:location:Location",
          "xcm:VersionedAssets"
        ],
        "args_name": [
          "hash",
          "origin",
          "assets"
        ],
        "args_type_name": [
          "H256",
          "Location",
          "VersionedAssets"
        ]
      },
      {
        "lookup": "1f0c",
        "name": "VersionChangeNotified",
        "docs": [
          "An XCM version change notification message has been attempted to be sent.",
          "",
          "The cost of sending it (borne by the chain) is included."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U32",
          "Vec<staging_xcm:v4:asset:Asset>",
          "[U8; 32]"
        ],
        "args_name": [
          "destination",
          "result",
          "cost",
          "message_id"
        ],
        "args_type_name": [
          "Location",
          "XcmVersion",
          "Assets",
          "XcmHash"
        ]
      },
      {
        "lookup": "1f0d",
        "name": "SupportedVersionChanged",
        "docs": [
          "The supported version of a location has been changed. This might be through an",
          "automatic notification or a manual intervention."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U32"
        ],
        "args_name": [
          "location",
          "version"
        ],
        "args_type_name": [
          "Location",
          "XcmVersion"
        ]
      },
      {
        "lookup": "1f0e",
        "name": "NotifyTargetSendFail",
        "docs": [
          "A given location which had a version change subscription was dropped owing to an error",
          "sending the notification to it."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U64",
          "xcm:v3:traits:Error"
        ],
        "args_name": [
          "location",
          "query_id",
          "error"
        ],
        "args_type_name": [
          "Location",
          "QueryId",
          "XcmError"
        ]
      },
      {
        "lookup": "1f0f",
        "name": "NotifyTargetMigrationFail",
        "docs": [
          "A given location which had a version change subscription was dropped owing to an error",
          "migrating the location to our new XCM format."
        ],
        "args": [
          "xcm:VersionedLocation",
          "U64"
        ],
        "args_name": [
          "location",
          "query_id"
        ],
        "args_type_name": [
          "VersionedLocation",
          "QueryId"
        ]
      },
      {
        "lookup": "1f10",
        "name": "InvalidQuerierVersion",
        "docs": [
          "Expected query response has been received but the expected querier location placed in",
          "storage by this runtime previously cannot be decoded. The query remains registered.",
          "",
          "This is unexpected (since a location placed in storage in a previously executing",
          "runtime should be readable prior to query timeout) and dangerous since the possibly",
          "valid response will be dropped. Manual governance intervention is probably going to be",
          "needed."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U64"
        ],
        "args_name": [
          "origin",
          "query_id"
        ],
        "args_type_name": [
          "Location",
          "QueryId"
        ]
      },
      {
        "lookup": "1f11",
        "name": "InvalidQuerier",
        "docs": [
          "Expected query response has been received but the querier location of the response does",
          "not match the expected. The query remains registered for a later, valid, response to",
          "be received and acted upon."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "U64",
          "staging_xcm:v4:location:Location",
          "option<staging_xcm:v4:location:Location>"
        ],
        "args_name": [
          "origin",
          "query_id",
          "expected_querier",
          "maybe_actual_querier"
        ],
        "args_type_name": [
          "Location",
          "QueryId",
          "Location",
          "Option<Location>"
        ]
      },
      {
        "lookup": "1f12",
        "name": "VersionNotifyStarted",
        "docs": [
          "A remote has requested XCM version change notification from us and we have honored it.",
          "A version information message is sent to them and its cost is included."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "Vec<staging_xcm:v4:asset:Asset>",
          "[U8; 32]"
        ],
        "args_name": [
          "destination",
          "cost",
          "message_id"
        ],
        "args_type_name": [
          "Location",
          "Assets",
          "XcmHash"
        ]
      },
      {
        "lookup": "1f13",
        "name": "VersionNotifyRequested",
        "docs": [
          "We have requested that a remote chain send us XCM version change notifications."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "Vec<staging_xcm:v4:asset:Asset>",
          "[U8; 32]"
        ],
        "args_name": [
          "destination",
          "cost",
          "message_id"
        ],
        "args_type_name": [
          "Location",
          "Assets",
          "XcmHash"
        ]
      },
      {
        "lookup": "1f14",
        "name": "VersionNotifyUnrequested",
        "docs": [
          "We have requested that a remote chain stops sending us XCM version change",
          "notifications."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "Vec<staging_xcm:v4:asset:Asset>",
          "[U8; 32]"
        ],
        "args_name": [
          "destination",
          "cost",
          "message_id"
        ],
        "args_type_name": [
          "Location",
          "Assets",
          "XcmHash"
        ]
      },
      {
        "lookup": "1f15",
        "name": "FeesPaid",
        "docs": [
          "Fees were paid from a location for an operation (often for using `SendXcm`)."
        ],
        "args": [
          "staging_xcm:v4:location:Location",
          "Vec<staging_xcm:v4:asset:Asset>"
        ],
        "args_name": [
          "paying",
          "fees"
        ],
        "args_type_name": [
          "Location",
          "Assets"
        ]
      },
      {
        "lookup": "1f16",
        "name": "AssetsClaimed",
        "docs": [
          "Some assets have been claimed from an asset trap"
        ],
        "args": [
          "H256",
          "staging_xcm:v4:location:Location",
          "xcm:VersionedAssets"
        ],
        "args_name": [
          "hash",
          "origin",
          "assets"
        ],
        "args_type_name": [
          "H256",
          "Location",
          "VersionedAssets"
        ]
      },
      {
        "lookup": "1f17",
        "name": "VersionMigrationFinished",
        "docs": [
          "A XCM version migration finished."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "version"
        ],
        "args_type_name": [
          "XcmVersion"
        ]
      }
    ],
    "events_value": {
      "type": 52
    },
    "errors": [
      {
        "name": "Unreachable",
        "doc": [
          "The desired destination was unreachable, generally because there is a no way of routing",
          "to it."
        ]
      },
      {
        "name": "SendFailure",
        "doc": [
          "There was some other issue (i.e. not to do with routing) in sending the message.",
          "Perhaps a lack of space for buffering the message."
        ]
      },
      {
        "name": "Filtered",
        "doc": [
          "The message execution fails the filter."
        ]
      },
      {
        "name": "UnweighableMessage",
        "doc": [
          "The message's weight could not be determined."
        ]
      },
      {
        "name": "DestinationNotInvertible",
        "doc": [
          "The destination `Location` provided cannot be inverted."
        ]
      },
      {
        "name": "Empty",
        "doc": [
          "The assets to be sent are empty."
        ]
      },
      {
        "name": "CannotReanchor",
        "doc": [
          "Could not re-anchor the assets to declare the fees for the destination chain."
        ]
      },
      {
        "name": "TooManyAssets",
        "doc": [
          "Too many assets have been attempted for transfer."
        ]
      },
      {
        "name": "InvalidOrigin",
        "doc": [
          "Origin is invalid for sending."
        ]
      },
      {
        "name": "BadVersion",
        "doc": [
          "The version of the `Versioned` value used is not able to be interpreted."
        ]
      },
      {
        "name": "BadLocation",
        "doc": [
          "The given location could not be used (e.g. because it cannot be expressed in the",
          "desired version of XCM)."
        ]
      },
      {
        "name": "NoSubscription",
        "doc": [
          "The referenced subscription could not be found."
        ]
      },
      {
        "name": "AlreadySubscribed",
        "doc": [
          "The location is invalid since it already has a subscription from us."
        ]
      },
      {
        "name": "CannotCheckOutTeleport",
        "doc": [
          "Could not check-out the assets for teleportation to the destination chain."
        ]
      },
      {
        "name": "LowBalance",
        "doc": [
          "The owner does not own (all) of the asset that they wish to do the operation on."
        ]
      },
      {
        "name": "TooManyLocks",
        "doc": [
          "The asset owner has too many locks on the asset."
        ]
      },
      {
        "name": "AccountNotSovereign",
        "doc": [
          "The given account is not an identifiable sovereign account for any location."
        ]
      },
      {
        "name": "FeesNotMet",
        "doc": [
          "The operation required fees to be paid which the initiator could not meet."
        ]
      },
      {
        "name": "LockNotFound",
        "doc": [
          "A remote lock with the corresponding data could not be found."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The unlock operation cannot succeed because there are still consumers of the lock."
        ]
      },
      {
        "name": "InvalidAssetUnknownReserve",
        "doc": [
          "Invalid asset, reserve chain could not be determined for it."
        ]
      },
      {
        "name": "InvalidAssetUnsupportedReserve",
        "doc": [
          "Invalid asset, do not support remote asset reserves with different fees reserves."
        ]
      },
      {
        "name": "TooManyReserves",
        "doc": [
          "Too many assets with different reserve locations have been attempted for transfer."
        ]
      },
      {
        "name": "LocalExecutionIncomplete",
        "doc": [
          "Local XCM execution incomplete."
        ]
      }
    ],
    "errors_value": {
      "type": 334
    },
    "index": 31
  },
  {
    "name": "CumulusXcm",
    "prefix": "",
    "storage": null,
    "calls_value": {
      "type": 335
    },
    "events": [
      {
        "lookup": "2000",
        "name": "InvalidFormat",
        "docs": [
          "Downward message is invalid XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "[u8; 32]"
        ]
      },
      {
        "lookup": "2001",
        "name": "UnsupportedVersion",
        "docs": [
          "Downward message is unsupported version of XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "[u8; 32]"
        ]
      },
      {
        "lookup": "2002",
        "name": "ExecutedDownward",
        "docs": [
          "Downward message executed with the given outcome.",
          "\\[ id, outcome \\]"
        ],
        "args": [
          "[U8; 32]",
          "staging_xcm:v4:traits:Outcome"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "[u8; 32]",
          "Outcome"
        ]
      }
    ],
    "events_value": {
      "type": 117
    },
    "errors": null,
    "errors_value": null,
    "index": 32
  },
  {
    "name": "ToKusamaXcmRouter",
    "prefix": "ToKusamaXcmRouter",
    "storage": [
      {
        "name": "Bridge",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "bp_xcm_bridge_hub_router:BridgeState",
          "PlainTypeValue": 336
        },
        "fallback": "0x000064a7b3b6e00d000000000000000000",
        "docs": [
          " Bridge that we are using.",
          "",
          " **bridges-v1** assumptions: all outbound messages through this router are using single lane",
          " and to single remote consensus. If there is some other remote consensus that uses the same",
          " bridge hub, the separate pallet instance shall be used, In `v2` we'll have all required",
          " primitives (lane-id aka bridge-id, derived from XCM locations) to support multiple  bridges",
          " by the same pallet instance."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "2200",
        "name": "report_bridge_status",
        "docs": [
          "Notification about congested bridge queue."
        ],
        "args": [
          {
            "name": "bridge_id",
            "type": "H256",
            "type_name": "H256"
          },
          {
            "name": "is_congested",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 337
    },
    "errors": null,
    "errors_value": null,
    "index": 34
  },
  {
    "name": "MessageQueue",
    "prefix": "MessageQueue",
    "storage": [
      {
        "name": "BookStateFor",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "cumulus_primitives_core:AggregateMessageOrigin"
            ],
            "value": "pallet_message_queue:BookState",
            "keys_id": 119,
            "value_id": 338
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The index of the first and last (non-empty) pages."
        ]
      },
      {
        "name": "ServiceHead",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_primitives_core:AggregateMessageOrigin",
          "PlainTypeValue": 119
        },
        "fallback": "0x00",
        "docs": [
          " The origin at which we should begin servicing."
        ]
      },
      {
        "name": "Pages",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "cumulus_primitives_core:AggregateMessageOrigin",
              "U32"
            ],
            "value": "pallet_message_queue:Page",
            "keys_id": 341,
            "value_id": 342
          }
        },
        "fallback": "0x00",
        "docs": [
          " The map of page indices to pages."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "2300",
        "name": "reap_page",
        "docs": [
          "Remove a page which has no more messages remaining to be processed or is stale."
        ],
        "args": [
          {
            "name": "message_origin",
            "type": "cumulus_primitives_core:AggregateMessageOrigin",
            "type_name": "MessageOriginOf"
          },
          {
            "name": "page_index",
            "type": "U32",
            "type_name": "PageIndex"
          }
        ]
      },
      {
        "lookup": "2301",
        "name": "execute_overweight",
        "docs": [
          "Execute an overweight message.",
          "",
          "Temporary processing errors will be propagated whereas permanent errors are treated",
          "as success condition.",
          "",
          "- `origin`: Must be `Signed`.",
          "- `message_origin`: The origin from which the message to be executed arrived.",
          "- `page`: The page in the queue in which the message to be executed is sitting.",
          "- `index`: The index into the queue of the message to be executed.",
          "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
          "  of the message.",
          "",
          "Benchmark complexity considerations: O(index + weight_limit)."
        ],
        "args": [
          {
            "name": "message_origin",
            "type": "cumulus_primitives_core:AggregateMessageOrigin",
            "type_name": "MessageOriginOf"
          },
          {
            "name": "page",
            "type": "U32",
            "type_name": "PageIndex"
          },
          {
            "name": "index",
            "type": "U32",
            "type_name": "Size"
          },
          {
            "name": "weight_limit",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 344
    },
    "events": [
      {
        "lookup": "2300",
        "name": "ProcessingFailed",
        "docs": [
          "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
        ],
        "args": [
          "H256",
          "cumulus_primitives_core:AggregateMessageOrigin",
          "frame_support:traits:messages:ProcessMessageError"
        ],
        "args_name": [
          "id",
          "origin",
          "error"
        ],
        "args_type_name": [
          "H256",
          "MessageOriginOf",
          "ProcessMessageError"
        ]
      },
      {
        "lookup": "2301",
        "name": "Processed",
        "docs": [
          "Message is processed."
        ],
        "args": [
          "H256",
          "cumulus_primitives_core:AggregateMessageOrigin",
          "sp_weights:weight_v2:Weight",
          "Bool"
        ],
        "args_name": [
          "id",
          "origin",
          "weight_used",
          "success"
        ],
        "args_type_name": [
          "H256",
          "MessageOriginOf",
          "Weight",
          "bool"
        ]
      },
      {
        "lookup": "2302",
        "name": "OverweightEnqueued",
        "docs": [
          "Message placed in overweight queue."
        ],
        "args": [
          "[U8; 32]",
          "cumulus_primitives_core:AggregateMessageOrigin",
          "U32",
          "U32"
        ],
        "args_name": [
          "id",
          "origin",
          "page_index",
          "message_index"
        ],
        "args_type_name": [
          "[u8; 32]",
          "MessageOriginOf",
          "PageIndex",
          "Size"
        ]
      },
      {
        "lookup": "2303",
        "name": "PageReaped",
        "docs": [
          "This page was reaped."
        ],
        "args": [
          "cumulus_primitives_core:AggregateMessageOrigin",
          "U32"
        ],
        "args_name": [
          "origin",
          "index"
        ],
        "args_type_name": [
          "MessageOriginOf",
          "PageIndex"
        ]
      }
    ],
    "events_value": {
      "type": 118
    },
    "constants": [
      {
        "name": "HeapSize",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000100",
        "docs": [
          " The size of the page; this implies the maximum message size which can be sent.",
          "",
          " A good value depends on the expected message sizes, their weights, the weight that is",
          " available for processing them and the maximal needed message size. The maximal message",
          " size is slightly lower than this as defined by [`MaxMessageLenOf`]."
        ]
      },
      {
        "name": "MaxStale",
        "type": "U32",
        "type_value": 4,
        "constants_value": "08000000",
        "docs": [
          " The maximum number of stale pages (i.e. of overweight messages) allowed before culling",
          " can happen. Once there are more stale pages than this, then historical pages may be",
          " dropped, even if they contain unprocessed overweight messages."
        ]
      },
      {
        "name": "ServiceWeight",
        "type": "option<sp_weights:weight_v2:Weight>",
        "type_value": 166,
        "constants_value": "01070016d0be2802007000",
        "docs": [
          " The amount of weight (if any) which should be provided to the message queue for",
          " servicing enqueued items `on_initialize`.",
          "",
          " This may be legitimately `None` in the case that you will call",
          " `ServiceQueues::service_queues` manually or set [`Self::IdleMaxServiceWeight`] to have",
          " it run in `on_idle`."
        ]
      },
      {
        "name": "IdleMaxServiceWeight",
        "type": "option<sp_weights:weight_v2:Weight>",
        "type_value": 166,
        "constants_value": "010700e876481702004000",
        "docs": [
          " The maximum amount of weight (if any) to be used from remaining weight `on_idle` which",
          " should be provided to the message queue for servicing enqueued items `on_idle`.",
          " Useful for parachains to process messages at the same block they are received.",
          "",
          " If `None`, it will not call `ServiceQueues::service_queues` in `on_idle`."
        ]
      }
    ],
    "errors": [
      {
        "name": "NotReapable",
        "doc": [
          "Page is not reapable because it has items remaining to be processed and is not old",
          "enough."
        ]
      },
      {
        "name": "NoPage",
        "doc": [
          "Page to be reaped does not exist."
        ]
      },
      {
        "name": "NoMessage",
        "doc": [
          "The referenced message could not be found."
        ]
      },
      {
        "name": "AlreadyProcessed",
        "doc": [
          "The message was already processed and cannot be processed again."
        ]
      },
      {
        "name": "Queued",
        "doc": [
          "The message is queued for future execution."
        ]
      },
      {
        "name": "InsufficientWeight",
        "doc": [
          "There is temporarily not enough weight to continue servicing messages."
        ]
      },
      {
        "name": "TemporarilyUnprocessable",
        "doc": [
          "This message is temporarily unprocessable.",
          "",
          "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
          "retrying."
        ]
      },
      {
        "name": "QueuePaused",
        "doc": [
          "The queue is paused and no message can be executed from it.",
          "",
          "This can change at any time and may resolve in the future by re-trying."
        ]
      },
      {
        "name": "RecursiveDisallowed",
        "doc": [
          "Another call is in progress and needs to finish before this call can happen."
        ]
      }
    ],
    "errors_value": {
      "type": 345
    },
    "index": 35
  },
  {
    "name": "Utility",
    "prefix": "",
    "storage": null,
    "calls": [
      {
        "lookup": "2800",
        "name": "batch",
        "docs": [
          "Send a batch of dispatch calls.",
          "",
          "May be called from any origin except `None`.",
          "",
          "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
          "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
          "",
          "If origin is root then the calls are dispatched without checking origin filter. (This",
          "includes bypassing `frame_system::Config::BaseCallFilter`).",
          "",
          "## Complexity",
          "- O(C) where C is the number of calls to be batched.",
          "",
          "This will return `Ok` in all circumstances. To determine the success of the batch, an",
          "event is deposited. If a call failed and the batch was interrupted, then the",
          "`BatchInterrupted` event is deposited, along with the number of successful calls made",
          "and the error of the failed call. If all were successful, then the `BatchCompleted`",
          "event is deposited."
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<asset_hub_polkadot_runtime:RuntimeCall>",
            "type_name": "Vec<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2801",
        "name": "as_derivative",
        "docs": [
          "Send a call through an indexed pseudonym of the sender.",
          "",
          "Filter from origin are passed along. The call will be dispatched with an origin which",
          "use the same filter as the origin of this call.",
          "",
          "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
          "because you expect `proxy` to have been used prior in the call stack and you do not want",
          "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
          "in the Multisig pallet instead.",
          "",
          "NOTE: Prior to version *12, this was called `as_limited_sub`.",
          "",
          "The dispatch origin for this call must be _Signed_."
        ],
        "args": [
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2802",
        "name": "batch_all",
        "docs": [
          "Send a batch of dispatch calls and atomically execute them.",
          "The whole transaction will rollback and fail if any of the calls failed.",
          "",
          "May be called from any origin except `None`.",
          "",
          "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
          "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
          "",
          "If origin is root then the calls are dispatched without checking origin filter. (This",
          "includes bypassing `frame_system::Config::BaseCallFilter`).",
          "",
          "## Complexity",
          "- O(C) where C is the number of calls to be batched."
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<asset_hub_polkadot_runtime:RuntimeCall>",
            "type_name": "Vec<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2803",
        "name": "dispatch_as",
        "docs": [
          "Dispatches a function call with a provided origin.",
          "",
          "The dispatch origin for this call must be _Root_.",
          "",
          "## Complexity",
          "- O(1)."
        ],
        "args": [
          {
            "name": "as_origin",
            "type": "asset_hub_polkadot_runtime:OriginCaller",
            "type_name": "Box<PalletsOrigin>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2804",
        "name": "force_batch",
        "docs": [
          "Send a batch of dispatch calls.",
          "Unlike `batch`, it allows errors and won't interrupt.",
          "",
          "May be called from any origin except `None`.",
          "",
          "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
          "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
          "",
          "If origin is root then the calls are dispatch without checking origin filter. (This",
          "includes bypassing `frame_system::Config::BaseCallFilter`).",
          "",
          "## Complexity",
          "- O(C) where C is the number of calls to be batched."
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<asset_hub_polkadot_runtime:RuntimeCall>",
            "type_name": "Vec<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2805",
        "name": "with_weight",
        "docs": [
          "Dispatch a function call with a specified weight.",
          "",
          "This function does not check the weight of the call, and instead allows the",
          "Root origin to specify the weight of the call.",
          "",
          "The dispatch origin for this call must be _Root_."
        ],
        "args": [
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          },
          {
            "name": "weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 346
    },
    "events": [
      {
        "lookup": "2800",
        "name": "BatchInterrupted",
        "docs": [
          "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
          "well as the error."
        ],
        "args": [
          "U32",
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "index",
          "error"
        ],
        "args_type_name": [
          "u32",
          "DispatchError"
        ]
      },
      {
        "lookup": "2801",
        "name": "BatchCompleted",
        "docs": [
          "Batch of dispatches completed fully with no error."
        ],
        "args": null
      },
      {
        "lookup": "2802",
        "name": "BatchCompletedWithErrors",
        "docs": [
          "Batch of dispatches completed but has errors."
        ],
        "args": null
      },
      {
        "lookup": "2803",
        "name": "ItemCompleted",
        "docs": [
          "A single item within a Batch of dispatches has completed with no error."
        ],
        "args": null
      },
      {
        "lookup": "2804",
        "name": "ItemFailed",
        "docs": [
          "A single item within a Batch of dispatches has completed with error."
        ],
        "args": [
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "error"
        ],
        "args_type_name": [
          "DispatchError"
        ]
      },
      {
        "lookup": "2805",
        "name": "DispatchedAs",
        "docs": [
          "A call was dispatched."
        ],
        "args": [
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "result"
        ],
        "args_type_name": [
          "DispatchResult"
        ]
      }
    ],
    "events_value": {
      "type": 122
    },
    "constants": [
      {
        "name": "batched_calls_limit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "aa2a0000",
        "docs": [
          " The limit on the number of batched calls."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooManyCalls",
        "doc": [
          "Too many calls batched."
        ]
      }
    ],
    "errors_value": {
      "type": 388
    },
    "index": 40
  },
  {
    "name": "Multisig",
    "prefix": "Multisig",
    "storage": [
      {
        "name": "Multisigs",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "[U8; 32]"
            ],
            "value": "pallet_multisig:Multisig",
            "keys_id": 389,
            "value_id": 390
          }
        },
        "fallback": "0x00",
        "docs": [
          " The set of open multisig operations."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "2900",
        "name": "as_multi_threshold_1",
        "docs": [
          "Immediately dispatch a multi-signature call using a single approval from the caller.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `other_signatories`: The accounts (other than the sender) who are part of the",
          "multi-signature, but do not participate in the approval process.",
          "- `call`: The call to be executed.",
          "",
          "Result is equivalent to the dispatched result.",
          "",
          "## Complexity",
          "O(Z + C) where Z is the length of the call and C its execution weight."
        ],
        "args": [
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2901",
        "name": "as_multi",
        "docs": [
          "Register approval for a dispatch to be made from a deterministic composite account if",
          "approved by a total of `threshold - 1` of `other_signatories`.",
          "",
          "If there are enough, then dispatch the call.",
          "",
          "Payment: `DepositBase` will be reserved if this is the first approval, plus",
          "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
          "is cancelled.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `threshold`: The total number of approvals for this dispatch before it is executed.",
          "- `other_signatories`: The accounts (other than the sender) who can approve this",
          "dispatch. May not be empty.",
          "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
          "not the first approval, then it must be `Some`, with the timepoint (block number and",
          "transaction index) of the first approval transaction.",
          "- `call`: The call to be executed.",
          "",
          "NOTE: Unless this is the final approval, you will generally want to use",
          "`approve_as_multi` instead, since it only requires a hash of the call.",
          "",
          "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
          "on success, result is `Ok` and the result from the interior call, if it was executed,",
          "may be found in the deposited `MultisigExecuted` event.",
          "",
          "## Complexity",
          "- `O(S + Z + Call)`.",
          "- Up to one balance-reserve or unreserve operation.",
          "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
          "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
          "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
          "- One encode & hash, both of complexity `O(S)`.",
          "- Up to one binary search and insert (`O(logS + S)`).",
          "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
          "- One event.",
          "- The weight of the `call`.",
          "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
          "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "maybe_timepoint",
            "type": "option<pallet_multisig:Timepoint>",
            "type_name": "Option<Timepoint<BlockNumberFor>>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          },
          {
            "name": "max_weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "2902",
        "name": "approve_as_multi",
        "docs": [
          "Register approval for a dispatch to be made from a deterministic composite account if",
          "approved by a total of `threshold - 1` of `other_signatories`.",
          "",
          "Payment: `DepositBase` will be reserved if this is the first approval, plus",
          "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
          "is cancelled.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `threshold`: The total number of approvals for this dispatch before it is executed.",
          "- `other_signatories`: The accounts (other than the sender) who can approve this",
          "dispatch. May not be empty.",
          "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
          "not the first approval, then it must be `Some`, with the timepoint (block number and",
          "transaction index) of the first approval transaction.",
          "- `call_hash`: The hash of the call to be executed.",
          "",
          "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
          "",
          "## Complexity",
          "- `O(S)`.",
          "- Up to one balance-reserve or unreserve operation.",
          "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
          "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
          "- One encode & hash, both of complexity `O(S)`.",
          "- Up to one binary search and insert (`O(logS + S)`).",
          "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
          "- One event.",
          "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
          "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "maybe_timepoint",
            "type": "option<pallet_multisig:Timepoint>",
            "type_name": "Option<Timepoint<BlockNumberFor>>"
          },
          {
            "name": "call_hash",
            "type": "[U8; 32]",
            "type_name": "[u8; 32]"
          },
          {
            "name": "max_weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "2903",
        "name": "cancel_as_multi",
        "docs": [
          "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
          "for this operation will be unreserved on success.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `threshold`: The total number of approvals for this dispatch before it is executed.",
          "- `other_signatories`: The accounts (other than the sender) who can approve this",
          "dispatch. May not be empty.",
          "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
          "transaction for this dispatch.",
          "- `call_hash`: The hash of the call to be executed.",
          "",
          "## Complexity",
          "- `O(S)`.",
          "- Up to one balance-reserve or unreserve operation.",
          "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
          "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
          "- One encode & hash, both of complexity `O(S)`.",
          "- One event.",
          "- I/O: 1 read `O(S)`, one remove.",
          "- Storage: removes one item."
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "timepoint",
            "type": "pallet_multisig:Timepoint",
            "type_name": "Timepoint<BlockNumberFor>"
          },
          {
            "name": "call_hash",
            "type": "[U8; 32]",
            "type_name": "[u8; 32]"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 349
    },
    "events": [
      {
        "lookup": "2900",
        "name": "NewMultisig",
        "docs": [
          "A new multisig operation has begun."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "approving",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "CallHash"
        ]
      },
      {
        "lookup": "2901",
        "name": "MultisigApproval",
        "docs": [
          "A multisig operation has been approved by someone."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "approving",
          "timepoint",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumberFor>",
          "AccountId",
          "CallHash"
        ]
      },
      {
        "lookup": "2902",
        "name": "MultisigExecuted",
        "docs": [
          "A multisig operation has been executed."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "approving",
          "timepoint",
          "multisig",
          "call_hash",
          "result"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumberFor>",
          "AccountId",
          "CallHash",
          "DispatchResult"
        ]
      },
      {
        "lookup": "2903",
        "name": "MultisigCancelled",
        "docs": [
          "A multisig operation has been cancelled."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "cancelling",
          "timepoint",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumberFor>",
          "AccountId",
          "CallHash"
        ]
      }
    ],
    "events_value": {
      "type": 125
    },
    "constants": [
      {
        "name": "DepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00dbbb77000000000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating a multisig execution or to",
          " store a dispatch call for later.",
          "",
          " This is held for an additional storage item whose value size is",
          " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
          " `32 + sizeof(AccountId)` bytes."
        ]
      },
      {
        "name": "DepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00d43000000000000000000000000000",
        "docs": [
          " The amount of currency needed per unit threshold when creating a multisig execution.",
          "",
          " This is held for adding 32 bytes more into a pre-existing storage value."
        ]
      },
      {
        "name": "MaxSignatories",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum amount of signatories allowed in the multisig."
        ]
      }
    ],
    "errors": [
      {
        "name": "MinimumThreshold",
        "doc": [
          "Threshold must be 2 or greater."
        ]
      },
      {
        "name": "AlreadyApproved",
        "doc": [
          "Call is already approved by this signatory."
        ]
      },
      {
        "name": "NoApprovalsNeeded",
        "doc": [
          "Call doesn't need any (more) approvals."
        ]
      },
      {
        "name": "TooFewSignatories",
        "doc": [
          "There are too few signatories in the list."
        ]
      },
      {
        "name": "TooManySignatories",
        "doc": [
          "There are too many signatories in the list."
        ]
      },
      {
        "name": "SignatoriesOutOfOrder",
        "doc": [
          "The signatories were provided out of order; they should be ordered."
        ]
      },
      {
        "name": "SenderInSignatories",
        "doc": [
          "The sender was contained in the other signatories; it shouldn't be."
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Multisig operation not found when attempting to cancel."
        ]
      },
      {
        "name": "NotOwner",
        "doc": [
          "Only the account that originally created the multisig is able to cancel it."
        ]
      },
      {
        "name": "NoTimepoint",
        "doc": [
          "No timepoint was given, yet the multisig operation is already underway."
        ]
      },
      {
        "name": "WrongTimepoint",
        "doc": [
          "A different timepoint was given to the multisig operation that is underway."
        ]
      },
      {
        "name": "UnexpectedTimepoint",
        "doc": [
          "A timepoint was given, yet no multisig operation is underway."
        ]
      },
      {
        "name": "MaxWeightTooLow",
        "doc": [
          "The maximum weight information provided was too low."
        ]
      },
      {
        "name": "AlreadyStored",
        "doc": [
          "The data to be stored is already stored."
        ]
      }
    ],
    "errors_value": {
      "type": 392
    },
    "index": 41
  },
  {
    "name": "Proxy",
    "prefix": "Proxy",
    "storage": [
      {
        "name": "Proxies",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@394U128",
            "keys_id": 0,
            "value_id": 393
          }
        },
        "fallback": "0x0000000000000000000000000000000000",
        "docs": [
          " The set of account proxies. Maps the account which has delegated to the accounts",
          " which are being delegated to, together with the amount held on deposit."
        ]
      },
      {
        "name": "Announcements",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@398U128",
            "keys_id": 0,
            "value_id": 397
          }
        },
        "fallback": "0x0000000000000000000000000000000000",
        "docs": [
          " The announcements made by the proxy (key)."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "2a00",
        "name": "proxy",
        "docs": [
          "Dispatch the given `call` from an account that the sender is authorised for through",
          "`add_proxy`.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `real`: The account that the proxy will make a call on behalf of.",
          "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
          "- `call`: The call to be made by the `real` account."
        ],
        "args": [
          {
            "name": "real",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "force_proxy_type",
            "type": "option<asset_hub_polkadot_runtime:ProxyType>",
            "type_name": "Option<ProxyType>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "2a01",
        "name": "add_proxy",
        "docs": [
          "Register a proxy account for the sender that is able to make calls on its behalf.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `proxy`: The account that the `caller` would like to make a proxy.",
          "- `proxy_type`: The permissions allowed for this proxy account.",
          "- `delay`: The announcement period required of the initial proxy. Will generally be",
          "zero."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "proxy_type",
            "type": "asset_hub_polkadot_runtime:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumberFor"
          }
        ]
      },
      {
        "lookup": "2a02",
        "name": "remove_proxy",
        "docs": [
          "Unregister a proxy account for the sender.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `proxy`: The account that the `caller` would like to remove as a proxy.",
          "- `proxy_type`: The permissions currently enabled for the removed proxy account."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "proxy_type",
            "type": "asset_hub_polkadot_runtime:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumberFor"
          }
        ]
      },
      {
        "lookup": "2a03",
        "name": "remove_proxies",
        "docs": [
          "Unregister all proxy accounts for the sender.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "WARNING: This may be called on accounts created by `pure`, however if done, then",
          "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
        ],
        "args": null
      },
      {
        "lookup": "2a04",
        "name": "create_pure",
        "docs": [
          "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
          "initialize it with a proxy of `proxy_type` for `origin` sender.",
          "",
          "Requires a `Signed` origin.",
          "",
          "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
          "new account. This will almost always be the most permissive `ProxyType` possible to",
          "allow for maximum flexibility.",
          "- `index`: A disambiguation index, in case this is called multiple times in the same",
          "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
          "want to use `0`.",
          "- `delay`: The announcement period required of the initial proxy. Will generally be",
          "zero.",
          "",
          "Fails with `Duplicate` if this has already been called in this transaction, from the",
          "same sender, with the same parameters.",
          "",
          "Fails if there are insufficient funds to pay for deposit."
        ],
        "args": [
          {
            "name": "proxy_type",
            "type": "asset_hub_polkadot_runtime:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          }
        ]
      },
      {
        "lookup": "2a05",
        "name": "kill_pure",
        "docs": [
          "Removes a previously spawned pure proxy.",
          "",
          "WARNING: **All access to this account will be lost.** Any funds held in it will be",
          "inaccessible.",
          "",
          "Requires a `Signed` origin, and the sender account must have been created by a call to",
          "`pure` with corresponding parameters.",
          "",
          "- `spawner`: The account that originally called `pure` to create this account.",
          "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
          "- `proxy_type`: The proxy type originally passed to `pure`.",
          "- `height`: The height of the chain when the call to `pure` was processed.",
          "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
          "",
          "Fails with `NoPermission` in case the caller is not a previously created pure",
          "account whose `pure` call has corresponding parameters."
        ],
        "args": [
          {
            "name": "spawner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "proxy_type",
            "type": "asset_hub_polkadot_runtime:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "height",
            "type": "compact<U32>",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "ext_index",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "2a06",
        "name": "announce",
        "docs": [
          "Publish the hash of a proxy-call that will be made in the future.",
          "",
          "This must be called some number of blocks before the corresponding `proxy` is attempted",
          "if the delay associated with the proxy relationship is greater than zero.",
          "",
          "No more than `MaxPending` announcements may be made at any one time.",
          "",
          "This will take a deposit of `AnnouncementDepositFactor` as well as",
          "`AnnouncementDepositBase` if there are no other pending announcements.",
          "",
          "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
          "",
          "Parameters:",
          "- `real`: The account that the proxy will make a call on behalf of.",
          "- `call_hash`: The hash of the call to be made by the `real` account."
        ],
        "args": [
          {
            "name": "real",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "2a07",
        "name": "remove_announcement",
        "docs": [
          "Remove a given announcement.",
          "",
          "May be called by a proxy account to remove a call they previously announced and return",
          "the deposit.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `real`: The account that the proxy will make a call on behalf of.",
          "- `call_hash`: The hash of the call to be made by the `real` account."
        ],
        "args": [
          {
            "name": "real",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "2a08",
        "name": "reject_announcement",
        "docs": [
          "Remove the given announcement of a delegate.",
          "",
          "May be called by a target (proxied) account to remove a call that one of their delegates",
          "(`delegate`) has announced they want to execute. The deposit is returned.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `delegate`: The account that previously announced the call.",
          "- `call_hash`: The hash of the call to be made."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "2a09",
        "name": "proxy_announced",
        "docs": [
          "Dispatch the given `call` from an account that the sender is authorized for through",
          "`add_proxy`.",
          "",
          "Removes any corresponding announcement(s).",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `real`: The account that the proxy will make a call on behalf of.",
          "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
          "- `call`: The call to be made by the `real` account."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "real",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "force_proxy_type",
            "type": "option<asset_hub_polkadot_runtime:ProxyType>",
            "type_name": "Option<ProxyType>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 351
    },
    "events": [
      {
        "lookup": "2a00",
        "name": "ProxyExecuted",
        "docs": [
          "A proxy was executed correctly, with the given."
        ],
        "args": [
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "result"
        ],
        "args_type_name": [
          "DispatchResult"
        ]
      },
      {
        "lookup": "2a01",
        "name": "PureCreated",
        "docs": [
          "A pure account has been created by new proxy with given",
          "disambiguation index and proxy type."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "asset_hub_polkadot_runtime:ProxyType",
          "U16"
        ],
        "args_name": [
          "pure",
          "who",
          "proxy_type",
          "disambiguation_index"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "u16"
        ]
      },
      {
        "lookup": "2a02",
        "name": "Announced",
        "docs": [
          "An announcement was placed to make a call in the future."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "H256"
        ],
        "args_name": [
          "real",
          "proxy",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "CallHashOf"
        ]
      },
      {
        "lookup": "2a03",
        "name": "ProxyAdded",
        "docs": [
          "A proxy was added."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "asset_hub_polkadot_runtime:ProxyType",
          "U32"
        ],
        "args_name": [
          "delegator",
          "delegatee",
          "proxy_type",
          "delay"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "2a04",
        "name": "ProxyRemoved",
        "docs": [
          "A proxy was removed."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "asset_hub_polkadot_runtime:ProxyType",
          "U32"
        ],
        "args_name": [
          "delegator",
          "delegatee",
          "proxy_type",
          "delay"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "BlockNumberFor"
        ]
      }
    ],
    "events_value": {
      "type": 127
    },
    "constants": [
      {
        "name": "ProxyDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "009d7277000000000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating a proxy.",
          "",
          " This is held for an additional storage item whose value size is",
          " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
        ]
      },
      {
        "name": "ProxyDepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "a05a3200000000000000000000000000",
        "docs": [
          " The amount of currency needed per proxy added.",
          "",
          " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
          " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
          " into account `32 + proxy_type.encode().len()` bytes of data."
        ]
      },
      {
        "name": "MaxProxies",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum amount of proxies allowed for a single account."
        ]
      },
      {
        "name": "MaxPending",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum amount of time-delayed announcements that are allowed to be pending."
        ]
      },
      {
        "name": "AnnouncementDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00d27e77000000000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating an announcement.",
          "",
          " This is held when a new storage item holding a `Balance` is created (typically 16",
          " bytes)."
        ]
      },
      {
        "name": "AnnouncementDepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40b56400000000000000000000000000",
        "docs": [
          " The amount of currency needed per announcement made.",
          "",
          " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
          " into a pre-existing storage value."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooMany",
        "doc": [
          "There are too many proxies registered or too many announcements pending."
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Proxy registration not found."
        ]
      },
      {
        "name": "NotProxy",
        "doc": [
          "Sender is not a proxy of the account to be proxied."
        ]
      },
      {
        "name": "Unproxyable",
        "doc": [
          "A call which is incompatible with the proxy type's filter was attempted."
        ]
      },
      {
        "name": "Duplicate",
        "doc": [
          "Account is already a proxy."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "Call may not be made by proxy because it may escalate its privileges."
        ]
      },
      {
        "name": "Unannounced",
        "doc": [
          "Announcement, if made at all, was made too recently."
        ]
      },
      {
        "name": "NoSelfProxy",
        "doc": [
          "Cannot add self as proxy."
        ]
      }
    ],
    "errors_value": {
      "type": 401
    },
    "index": 42
  },
  {
    "name": "Assets",
    "prefix": "Assets",
    "storage": [
      {
        "name": "Asset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_assets:types:AssetDetails",
            "keys_id": 4,
            "value_id": 402
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of an asset."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId"
            ],
            "value": "pallet_assets:types:AssetAccount",
            "keys_id": 404,
            "value_id": 405
          }
        },
        "fallback": "0x00",
        "docs": [
          " The holdings of a specific account for a specific asset."
        ]
      },
      {
        "name": "Approvals",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId",
              "AccountId"
            ],
            "value": "pallet_assets:types:Approval",
            "keys_id": 408,
            "value_id": 409
          }
        },
        "fallback": "0x00",
        "docs": [
          " Approved balance transfers. First balance is the amount approved for transfer. Second",
          " is the amount of `T::Currency` reserved for storing this.",
          " First key is the asset ID, second key is the owner and third key is the delegate."
        ]
      },
      {
        "name": "Metadata",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_assets:types:AssetMetadata@410",
            "keys_id": 4,
            "value_id": 410
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000",
        "docs": [
          " Metadata of an asset."
        ]
      },
      {
        "name": "NextAssetId",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " The asset ID enforced for the next asset creation, if any present. Otherwise, this storage",
          " item has no effect.",
          "",
          " This can be useful for setting up constraints for IDs of the new assets. For example, by",
          " providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an",
          " auto-increment model can be applied to all new asset IDs.",
          "",
          " The initial next asset ID can be set using the [`GenesisConfig`] or the",
          " [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3200",
        "name": "create",
        "docs": [
          "Issue a new class of fungible assets from a public origin.",
          "",
          "This new asset class has no assets initially and its owner is the origin.",
          "",
          "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
          "",
          "Funds of sender are reserved by `AssetDeposit`.",
          "",
          "Parameters:",
          "- `id`: The identifier of the new asset. This must not be currently in use to identify",
          "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
          "- `admin`: The admin of this class of assets. The admin is the initial address of each",
          "member of the asset class's admin team.",
          "- `min_balance`: The minimum balance of this new asset that any single account must",
          "have. If an account's balance is reduced below this, then it collapses to zero.",
          "",
          "Emits `Created` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "min_balance",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3201",
        "name": "force_create",
        "docs": [
          "Issue a new class of fungible assets from a privileged origin.",
          "",
          "This new asset class has no assets initially.",
          "",
          "The origin must conform to `ForceOrigin`.",
          "",
          "Unlike `create`, no funds are reserved.",
          "",
          "- `id`: The identifier of the new asset. This must not be currently in use to identify",
          "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
          "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
          "over this asset, but may later change and configure the permissions using",
          "`transfer_ownership` and `set_team`.",
          "- `min_balance`: The minimum balance of this new asset that any single account must",
          "have. If an account's balance is reduced below this, then it collapses to zero.",
          "",
          "Emits `ForceCreated` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3202",
        "name": "start_destroy",
        "docs": [
          "Start the process of destroying a fungible asset class.",
          "",
          "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
          "destruction of an asset class.",
          "",
          "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
          "",
          "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
          "  asset.",
          "",
          "The asset class must be frozen before calling `start_destroy`."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3203",
        "name": "destroy_accounts",
        "docs": [
          "Destroy all accounts associated with a given asset.",
          "",
          "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
          "asset is in a `Destroying` state.",
          "",
          "Due to weight restrictions, this function may need to be called multiple times to fully",
          "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
          "",
          "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
          "  asset.",
          "",
          "Each call emits the `Event::DestroyedAccounts` event."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3204",
        "name": "destroy_approvals",
        "docs": [
          "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
          "",
          "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
          "asset is in a `Destroying` state.",
          "",
          "Due to weight restrictions, this function may need to be called multiple times to fully",
          "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
          "",
          "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
          "  asset.",
          "",
          "Each call emits the `Event::DestroyedApprovals` event."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3205",
        "name": "finish_destroy",
        "docs": [
          "Complete destroying asset and unreserve currency.",
          "",
          "`finish_destroy` should only be called after `start_destroy` has been called, and the",
          "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
          "hand.",
          "",
          "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
          "  asset.",
          "",
          "Each successful call emits the `Event::Destroyed` event."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3206",
        "name": "mint",
        "docs": [
          "Mint assets of a particular class.",
          "",
          "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to have some amount minted.",
          "- `beneficiary`: The account to be credited with the minted assets.",
          "- `amount`: The amount of the asset to be minted.",
          "",
          "Emits `Issued` event when successful.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "beneficiary",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3207",
        "name": "burn",
        "docs": [
          "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
          "",
          "Origin must be Signed and the sender should be the Manager of the asset `id`.",
          "",
          "Bails with `NoAccount` if the `who` is already dead.",
          "",
          "- `id`: The identifier of the asset to have some amount burned.",
          "- `who`: The account to be debited from.",
          "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
          "",
          "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
          "minimum for the asset, then the amount burned is increased to take it to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3208",
        "name": "transfer",
        "docs": [
          "Move some assets from the sender account to another.",
          "",
          "Origin must be Signed.",
          "",
          "- `id`: The identifier of the asset to have some amount transferred.",
          "- `target`: The account to be credited.",
          "- `amount`: The amount by which the sender's balance of assets should be reduced and",
          "`target`'s balance increased. The amount actually transferred may be slightly greater in",
          "the case that the transfer would otherwise take the sender balance above zero but below",
          "the minimum balance. Must be greater than zero.",
          "",
          "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
          "to below the minimum for the asset, then the amount transferred is increased to take it",
          "to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
          "`target`."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3209",
        "name": "transfer_keep_alive",
        "docs": [
          "Move some assets from the sender account to another, keeping the sender account alive.",
          "",
          "Origin must be Signed.",
          "",
          "- `id`: The identifier of the asset to have some amount transferred.",
          "- `target`: The account to be credited.",
          "- `amount`: The amount by which the sender's balance of assets should be reduced and",
          "`target`'s balance increased. The amount actually transferred may be slightly greater in",
          "the case that the transfer would otherwise take the sender balance above zero but below",
          "the minimum balance. Must be greater than zero.",
          "",
          "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
          "to below the minimum for the asset, then the amount transferred is increased to take it",
          "to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
          "`target`."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "320a",
        "name": "force_transfer",
        "docs": [
          "Move some assets from one account to another.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to have some amount transferred.",
          "- `source`: The account to be debited.",
          "- `dest`: The account to be credited.",
          "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
          "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
          "the case that the transfer would otherwise take the `source` balance above zero but",
          "below the minimum balance. Must be greater than zero.",
          "",
          "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
          "to below the minimum for the asset, then the amount transferred is increased to take it",
          "to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
          "`dest`."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "source",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "320b",
        "name": "freeze",
        "docs": [
          "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
          "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
          "account that does not have an entry, use `touch_other` first.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "- `who`: The account to be frozen.",
          "",
          "Emits `Frozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "320c",
        "name": "thaw",
        "docs": [
          "Allow unprivileged transfers to and from an account again.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "- `who`: The account to be unfrozen.",
          "",
          "Emits `Thawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "320d",
        "name": "freeze_asset",
        "docs": [
          "Disallow further unprivileged transfers for the asset class.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "",
          "Emits `Frozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "320e",
        "name": "thaw_asset",
        "docs": [
          "Allow unprivileged transfers for the asset again.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be thawed.",
          "",
          "Emits `Thawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "320f",
        "name": "transfer_ownership",
        "docs": [
          "Change the Owner of an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "- `id`: The identifier of the asset.",
          "- `owner`: The new Owner of this asset.",
          "",
          "Emits `OwnerChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3210",
        "name": "set_team",
        "docs": [
          "Change the Issuer, Admin and Freezer of an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "- `issuer`: The new Issuer of this asset.",
          "- `admin`: The new Admin of this asset.",
          "- `freezer`: The new Freezer of this asset.",
          "",
          "Emits `TeamChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3211",
        "name": "set_metadata",
        "docs": [
          "Set the metadata for an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "Funds of sender are reserved according to the formula:",
          "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
          "account any already reserved funds.",
          "",
          "- `id`: The identifier of the asset to update.",
          "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
          "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
          "- `decimals`: The number of decimals this asset uses to represent one unit.",
          "",
          "Emits `MetadataSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          }
        ]
      },
      {
        "lookup": "3212",
        "name": "clear_metadata",
        "docs": [
          "Clear the metadata for an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "Any deposit is freed for the asset owner.",
          "",
          "- `id`: The identifier of the asset to clear.",
          "",
          "Emits `MetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3213",
        "name": "force_set_metadata",
        "docs": [
          "Force the metadata for an asset to some value.",
          "",
          "Origin must be ForceOrigin.",
          "",
          "Any deposit is left alone.",
          "",
          "- `id`: The identifier of the asset to update.",
          "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
          "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
          "- `decimals`: The number of decimals this asset uses to represent one unit.",
          "",
          "Emits `MetadataSet`.",
          "",
          "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3214",
        "name": "force_clear_metadata",
        "docs": [
          "Clear the metadata for an asset.",
          "",
          "Origin must be ForceOrigin.",
          "",
          "Any deposit is returned.",
          "",
          "- `id`: The identifier of the asset to clear.",
          "",
          "Emits `MetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3215",
        "name": "force_asset_status",
        "docs": [
          "Alter the attributes of a given asset.",
          "",
          "Origin must be `ForceOrigin`.",
          "",
          "- `id`: The identifier of the asset.",
          "- `owner`: The new Owner of this asset.",
          "- `issuer`: The new Issuer of this asset.",
          "- `admin`: The new Admin of this asset.",
          "- `freezer`: The new Freezer of this asset.",
          "- `min_balance`: The minimum balance of this new asset that any single account must",
          "have. If an account's balance is reduced below this, then it collapses to zero.",
          "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
          "value to account for the state bloat associated with its balance storage. If set to",
          "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
          "an ED in the Balances pallet or whatever else is used to control user-account state",
          "growth).",
          "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
          "instructions.",
          "",
          "Emits `AssetStatusChanged` with the identity of the asset.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3216",
        "name": "approve_transfer",
        "docs": [
          "Approve an amount of asset for transfer by a delegated third-party account.",
          "",
          "Origin must be Signed.",
          "",
          "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
          "for the purpose of holding the approval. If some non-zero amount of assets is already",
          "approved from signing account to `delegate`, then it is topped up or unreserved to",
          "meet the right value.",
          "",
          "NOTE: The signing account does not need to own `amount` of assets at the point of",
          "making this call.",
          "",
          "- `id`: The identifier of the asset.",
          "- `delegate`: The account to delegate permission to transfer asset.",
          "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
          "already an approval in place, then this acts additively.",
          "",
          "Emits `ApprovedTransfer` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3217",
        "name": "cancel_approval",
        "docs": [
          "Cancel all of some asset approved for delegated transfer by a third-party account.",
          "",
          "Origin must be Signed and there must be an approval in place between signer and",
          "`delegate`.",
          "",
          "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
          "",
          "- `id`: The identifier of the asset.",
          "- `delegate`: The account delegated permission to transfer asset.",
          "",
          "Emits `ApprovalCancelled` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3218",
        "name": "force_cancel_approval",
        "docs": [
          "Cancel all of some asset approved for delegated transfer by a third-party account.",
          "",
          "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
          "account of the asset `id`.",
          "",
          "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
          "",
          "- `id`: The identifier of the asset.",
          "- `delegate`: The account delegated permission to transfer asset.",
          "",
          "Emits `ApprovalCancelled` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3219",
        "name": "transfer_approved",
        "docs": [
          "Transfer some asset balance from a previously delegated account to some third-party",
          "account.",
          "",
          "Origin must be Signed and there must be an approval in place by the `owner` to the",
          "signer.",
          "",
          "If the entire amount approved for transfer is transferred, then any deposit previously",
          "reserved by `approve_transfer` is unreserved.",
          "",
          "- `id`: The identifier of the asset.",
          "- `owner`: The account which previously approved for a transfer of at least `amount` and",
          "from which the asset balance will be withdrawn.",
          "- `destination`: The account to which the asset balance of `amount` will be transferred.",
          "- `amount`: The amount of assets to transfer.",
          "",
          "Emits `TransferredApproved` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "destination",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "321a",
        "name": "touch",
        "docs": [
          "Create an asset account for non-provider assets.",
          "",
          "A deposit will be taken from the signer account.",
          "",
          "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
          "  to be taken.",
          "- `id`: The identifier of the asset for the account to be created.",
          "",
          "Emits `Touched` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "321b",
        "name": "refund",
        "docs": [
          "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
          "account.",
          "",
          "The origin must be Signed.",
          "",
          "- `id`: The identifier of the asset for which the caller would like the deposit",
          "  refunded.",
          "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
          "",
          "Emits `Refunded` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "allow_burn",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "321c",
        "name": "set_min_balance",
        "docs": [
          "Sets the minimum balance of an asset.",
          "",
          "Only works if there aren't any accounts that are holding the asset or if",
          "the new value of `min_balance` is less than the old one.",
          "",
          "Origin must be Signed and the sender has to be the Owner of the",
          "asset `id`.",
          "",
          "- `id`: The identifier of the asset.",
          "- `min_balance`: The new value of `min_balance`.",
          "",
          "Emits `AssetMinBalanceChanged` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "min_balance",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "321d",
        "name": "touch_other",
        "docs": [
          "Create an asset account for `who`.",
          "",
          "A deposit will be taken from the signer account.",
          "",
          "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
          "  must have sufficient funds for a deposit to be taken.",
          "- `id`: The identifier of the asset for the account to be created.",
          "- `who`: The account to be created.",
          "",
          "Emits `Touched` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "321e",
        "name": "refund_other",
        "docs": [
          "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
          "",
          "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
          "order to burn a non-zero balance of the asset, the caller must be the account and should",
          "use `refund`.",
          "",
          "- `id`: The identifier of the asset for the account holding a deposit.",
          "- `who`: The account to refund.",
          "",
          "Emits `Refunded` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "321f",
        "name": "block",
        "docs": [
          "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
          "",
          "- `id`: The identifier of the account's asset.",
          "- `who`: The account to be unblocked.",
          "",
          "Emits `Blocked`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "compact<U32>",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 353
    },
    "events": [
      {
        "lookup": "3200",
        "name": "Created",
        "docs": [
          "Some asset class was created."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3201",
        "name": "Issued",
        "docs": [
          "Some assets were issued."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3202",
        "name": "Transferred",
        "docs": [
          "Some assets were transferred."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3203",
        "name": "Burned",
        "docs": [
          "Some assets were destroyed."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "balance"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3204",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3205",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3206",
        "name": "Frozen",
        "docs": [
          "Some account `who` was frozen."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3207",
        "name": "Thawed",
        "docs": [
          "Some account `who` was thawed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3208",
        "name": "AssetFrozen",
        "docs": [
          "Some asset `asset_id` was frozen."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3209",
        "name": "AssetThawed",
        "docs": [
          "Some asset `asset_id` was thawed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "320a",
        "name": "AccountsDestroyed",
        "docs": [
          "Accounts were destroyed for given asset."
        ],
        "args": [
          "U32",
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "accounts_destroyed",
          "accounts_remaining"
        ],
        "args_type_name": [
          "AssetId",
          "u32",
          "u32"
        ]
      },
      {
        "lookup": "320b",
        "name": "ApprovalsDestroyed",
        "docs": [
          "Approvals were destroyed for given asset."
        ],
        "args": [
          "U32",
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "approvals_destroyed",
          "approvals_remaining"
        ],
        "args_type_name": [
          "AssetId",
          "u32",
          "u32"
        ]
      },
      {
        "lookup": "320c",
        "name": "DestructionStarted",
        "docs": [
          "An asset class is in the process of being destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "320d",
        "name": "Destroyed",
        "docs": [
          "An asset class was destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "320e",
        "name": "ForceCreated",
        "docs": [
          "Some asset class was force-created."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "320f",
        "name": "MetadataSet",
        "docs": [
          "New metadata has been set for an asset."
        ],
        "args": [
          "U32",
          "Vec<U8>",
          "Vec<U8>",
          "U8",
          "Bool"
        ],
        "args_name": [
          "asset_id",
          "name",
          "symbol",
          "decimals",
          "is_frozen"
        ],
        "args_type_name": [
          "AssetId",
          "Bytes",
          "Bytes",
          "u8",
          "bool"
        ]
      },
      {
        "lookup": "3210",
        "name": "MetadataCleared",
        "docs": [
          "Metadata has been cleared for an asset."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3211",
        "name": "ApprovedTransfer",
        "docs": [
          "(Additional) funds have been approved for transfer to a destination account."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "source",
          "delegate",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3212",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for account `delegate` was cancelled by `owner`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3213",
        "name": "TransferredApproved",
        "docs": [
          "An `amount` was transferred in its entirety from `owner` to `destination` by",
          "the approved `delegate`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate",
          "destination",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3214",
        "name": "AssetStatusChanged",
        "docs": [
          "An asset has had its attributes changed by the `Force` origin."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3215",
        "name": "AssetMinBalanceChanged",
        "docs": [
          "The min_balance of an asset has been updated by the asset owner."
        ],
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "new_min_balance"
        ],
        "args_type_name": [
          "AssetId",
          "Balance"
        ]
      },
      {
        "lookup": "3216",
        "name": "Touched",
        "docs": [
          "Some account `who` was created with a deposit from `depositor`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who",
          "depositor"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3217",
        "name": "Blocked",
        "docs": [
          "Some account `who` was blocked."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3218",
        "name": "Deposited",
        "docs": [
          "Some assets were deposited (e.g. for transaction fees)."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3219",
        "name": "Withdrawn",
        "docs": [
          "Some assets were withdrawn from the account (e.g. for transaction fees)."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 130
    },
    "constants": [
      {
        "name": "RemoveItemsLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "e8030000",
        "docs": [
          " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
          "",
          " Must be configured to result in a weight that makes each call fit in a block."
        ]
      },
      {
        "name": "AssetDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "c07e5778000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an asset."
        ]
      },
      {
        "name": "AssetAccountDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00fe4d77000000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved for a non-provider asset account to be",
          " maintained."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "80569d77000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your asset."
        ]
      },
      {
        "name": "MetadataDepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "a0860100000000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes you store in your",
          " metadata."
        ]
      },
      {
        "name": "ApprovalDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e1f505000000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved when creating a new approval."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum length of a name or symbol stored on-chain."
        ]
      }
    ],
    "errors": [
      {
        "name": "BalanceLow",
        "doc": [
          "Account balance must be greater than or equal to the transfer amount."
        ]
      },
      {
        "name": "NoAccount",
        "doc": [
          "The account to alter does not exist."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "Unknown",
        "doc": [
          "The given asset ID is unknown."
        ]
      },
      {
        "name": "Frozen",
        "doc": [
          "The origin account is frozen."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The asset ID is already taken."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "Invalid witness data given."
        ]
      },
      {
        "name": "MinBalanceZero",
        "doc": [
          "Minimum balance should be non-zero."
        ]
      },
      {
        "name": "UnavailableConsumer",
        "doc": [
          "Unable to increment the consumer reference counters on the account. Either no provider",
          "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
          "fewer then the maximum number of consumers has been reached."
        ]
      },
      {
        "name": "BadMetadata",
        "doc": [
          "Invalid metadata given."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      },
      {
        "name": "WouldDie",
        "doc": [
          "The source account would not survive the transfer and it needs to stay alive."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The asset-account already exists."
        ]
      },
      {
        "name": "NoDeposit",
        "doc": [
          "The asset-account doesn't have an associated deposit."
        ]
      },
      {
        "name": "WouldBurn",
        "doc": [
          "The operation would result in funds being burned."
        ]
      },
      {
        "name": "LiveAsset",
        "doc": [
          "The asset is a live asset and is actively being used. Usually emit for operations such",
          "as `start_destroy` which require the asset to be in a destroying state."
        ]
      },
      {
        "name": "AssetNotLive",
        "doc": [
          "The asset is not live, and likely being destroyed."
        ]
      },
      {
        "name": "IncorrectStatus",
        "doc": [
          "The asset status is not the expected status."
        ]
      },
      {
        "name": "NotFrozen",
        "doc": [
          "The asset should be frozen before the given operation."
        ]
      },
      {
        "name": "CallbackFailed",
        "doc": [
          "Callback action resulted in error"
        ]
      },
      {
        "name": "BadAssetId",
        "doc": [
          "The asset ID must be equal to the [`NextAssetId`]."
        ]
      }
    ],
    "errors_value": {
      "type": 412
    },
    "index": 50
  },
  {
    "name": "Uniques",
    "prefix": "Uniques",
    "storage": [
      {
        "name": "Class",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_uniques:types:CollectionDetails",
            "keys_id": 4,
            "value_id": 413
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of a collection."
        ]
      },
      {
        "name": "OwnershipAcceptance",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U32",
            "keys_id": 0,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " The collection, if any, of which an account is willing to take ownership."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32",
              "U32"
            ],
            "value": "NULL",
            "keys_id": 414,
            "value_id": 124
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items held by any given account; set out this way so that items owned by a single",
          " account can be enumerated."
        ]
      },
      {
        "name": "ClassAccount",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "NULL",
            "keys_id": 415,
            "value_id": 124
          }
        },
        "fallback": "0x00",
        "docs": [
          " The collections owned by any given account; set out this way so that collections owned by",
          " a single account can be enumerated."
        ]
      },
      {
        "name": "Asset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "pallet_uniques:types:ItemDetails",
            "keys_id": 155,
            "value_id": 416
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items in existence and their ownership details."
        ]
      },
      {
        "name": "ClassMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_uniques:types:CollectionMetadata",
            "keys_id": 4,
            "value_id": 417
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of a collection."
        ]
      },
      {
        "name": "InstanceMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "pallet_uniques:types:ItemMetadata",
            "keys_id": 155,
            "value_id": 418
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of an item."
        ]
      },
      {
        "name": "Attribute",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "option<U32>",
              "Vec<U8>"
            ],
            "value": "Tuple:Vec<U8>U128",
            "keys_id": 419,
            "value_id": 420
          }
        },
        "fallback": "0x00",
        "docs": [
          " Attributes of a collection."
        ]
      },
      {
        "name": "ItemPriceOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "Tuple:U128option<AccountId>",
            "keys_id": 155,
            "value_id": 421
          }
        },
        "fallback": "0x00",
        "docs": [
          " Price of an asset instance."
        ]
      },
      {
        "name": "CollectionMaxSupply",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U32",
            "keys_id": 4,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Keeps track of the number of items a collection might have."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3300",
        "name": "create",
        "docs": [
          "Issue a new collection of non-fungible items from a public origin.",
          "",
          "This new collection has no items initially and its owner is the origin.",
          "",
          "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
          "",
          "`ItemDeposit` funds of sender are reserved.",
          "",
          "Parameters:",
          "- `collection`: The identifier of the new collection. This must not be currently in use.",
          "- `admin`: The admin of this collection. The admin is the initial address of each",
          "member of the collection's admin team.",
          "",
          "Emits `Created` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3301",
        "name": "force_create",
        "docs": [
          "Issue a new collection of non-fungible items from a privileged origin.",
          "",
          "This new collection has no items initially.",
          "",
          "The origin must conform to `ForceOrigin`.",
          "",
          "Unlike `create`, no funds are reserved.",
          "",
          "- `collection`: The identifier of the new item. This must not be currently in use.",
          "- `owner`: The owner of this collection of items. The owner has full superuser",
          "  permissions",
          "over this item, but may later change and configure the permissions using",
          "`transfer_ownership` and `set_team`.",
          "",
          "Emits `ForceCreated` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "free_holding",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3302",
        "name": "destroy",
        "docs": [
          "Destroy a collection of fungible items.",
          "",
          "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
          "owner of the `collection`.",
          "",
          "- `collection`: The identifier of the collection to be destroyed.",
          "- `witness`: Information on the items minted in the collection. This must be",
          "correct.",
          "",
          "Emits `Destroyed` event when successful.",
          "",
          "Weight: `O(n + m)` where:",
          "- `n = witness.items`",
          "- `m = witness.item_metadatas`",
          "- `a = witness.attributes`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "witness",
            "type": "pallet_uniques:types:DestroyWitness",
            "type_name": "DestroyWitness"
          }
        ]
      },
      {
        "lookup": "3303",
        "name": "mint",
        "docs": [
          "Mint an item of a particular collection.",
          "",
          "The origin must be Signed and the sender must be the Issuer of the `collection`.",
          "",
          "- `collection`: The collection of the item to be minted.",
          "- `item`: The item value of the item to be minted.",
          "- `beneficiary`: The initial owner of the minted item.",
          "",
          "Emits `Issued` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3304",
        "name": "burn",
        "docs": [
          "Destroy a single item.",
          "",
          "Origin must be Signed and the signing account must be either:",
          "- the Admin of the `collection`;",
          "- the Owner of the `item`;",
          "",
          "- `collection`: The collection of the item to be burned.",
          "- `item`: The item of the item to be burned.",
          "- `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the",
          "  item is owned by this value.",
          "",
          "Emits `Burned` with the actual amount burned.",
          "",
          "Weight: `O(1)`",
          "Modes: `check_owner.is_some()`."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "check_owner",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "3305",
        "name": "transfer",
        "docs": [
          "Move an item from the sender account to another.",
          "",
          "This resets the approved account of the item.",
          "",
          "Origin must be Signed and the signing account must be either:",
          "- the Admin of the `collection`;",
          "- the Owner of the `item`;",
          "- the approved delegate for the `item` (in this case, the approval is reset).",
          "",
          "Arguments:",
          "- `collection`: The collection of the item to be transferred.",
          "- `item`: The item of the item to be transferred.",
          "- `dest`: The account to receive ownership of the item.",
          "",
          "Emits `Transferred`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3306",
        "name": "redeposit",
        "docs": [
          "Reevaluate the deposits on some items.",
          "",
          "Origin must be Signed and the sender should be the Owner of the `collection`.",
          "",
          "- `collection`: The collection to be frozen.",
          "- `items`: The items of the collection whose deposits will be reevaluated.",
          "",
          "NOTE: This exists as a best-effort function. Any items which are unknown or",
          "in the case that the owner account does not have reservable funds to pay for a",
          "deposit increase are ignored. Generally the owner isn't going to call this on items",
          "whose existing deposit is less than the refreshed deposit as it would only cost them,",
          "so it's of little consequence.",
          "",
          "It will still return an error in the case that the collection is unknown of the signer",
          "is not permitted to call it.",
          "",
          "Weight: `O(items.len())`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "items",
            "type": "Vec<U32>",
            "type_name": "Vec<ItemId>"
          }
        ]
      },
      {
        "lookup": "3307",
        "name": "freeze",
        "docs": [
          "Disallow further unprivileged transfer of an item.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the `collection`.",
          "",
          "- `collection`: The collection of the item to be frozen.",
          "- `item`: The item of the item to be frozen.",
          "",
          "Emits `Frozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3308",
        "name": "thaw",
        "docs": [
          "Re-allow unprivileged transfer of an item.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the `collection`.",
          "",
          "- `collection`: The collection of the item to be thawed.",
          "- `item`: The item of the item to be thawed.",
          "",
          "Emits `Thawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3309",
        "name": "freeze_collection",
        "docs": [
          "Disallow further unprivileged transfers for a whole collection.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the `collection`.",
          "",
          "- `collection`: The collection to be frozen.",
          "",
          "Emits `CollectionFrozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "330a",
        "name": "thaw_collection",
        "docs": [
          "Re-allow unprivileged transfers for a whole collection.",
          "",
          "Origin must be Signed and the sender should be the Admin of the `collection`.",
          "",
          "- `collection`: The collection to be thawed.",
          "",
          "Emits `CollectionThawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "330b",
        "name": "transfer_ownership",
        "docs": [
          "Change the Owner of a collection.",
          "",
          "Origin must be Signed and the sender should be the Owner of the `collection`.",
          "",
          "- `collection`: The collection whose owner should be changed.",
          "- `owner`: The new Owner of this collection. They must have called",
          "  `set_accept_ownership` with `collection` in order for this operation to succeed.",
          "",
          "Emits `OwnerChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "new_owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "330c",
        "name": "set_team",
        "docs": [
          "Change the Issuer, Admin and Freezer of a collection.",
          "",
          "Origin must be Signed and the sender should be the Owner of the `collection`.",
          "",
          "- `collection`: The collection whose team should be changed.",
          "- `issuer`: The new Issuer of this collection.",
          "- `admin`: The new Admin of this collection.",
          "- `freezer`: The new Freezer of this collection.",
          "",
          "Emits `TeamChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "330d",
        "name": "approve_transfer",
        "docs": [
          "Approve an item to be transferred by a delegated third-party account.",
          "",
          "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be",
          "either the owner of the `item` or the admin of the collection.",
          "",
          "- `collection`: The collection of the item to be approved for delegated transfer.",
          "- `item`: The item of the item to be approved for delegated transfer.",
          "- `delegate`: The account to delegate permission to transfer the item.",
          "",
          "Important NOTE: The `approved` account gets reset after each transfer.",
          "",
          "Emits `ApprovedTransfer` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "330e",
        "name": "cancel_approval",
        "docs": [
          "Cancel the prior approval for the transfer of an item by a delegate.",
          "",
          "Origin must be either:",
          "- the `Force` origin;",
          "- `Signed` with the signer being the Admin of the `collection`;",
          "- `Signed` with the signer being the Owner of the `item`;",
          "",
          "Arguments:",
          "- `collection`: The collection of the item of whose approval will be cancelled.",
          "- `item`: The item of the item of whose approval will be cancelled.",
          "- `maybe_check_delegate`: If `Some` will ensure that the given account is the one to",
          "  which permission of transfer is delegated.",
          "",
          "Emits `ApprovalCancelled` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "maybe_check_delegate",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "330f",
        "name": "force_item_status",
        "docs": [
          "Alter the attributes of a given item.",
          "",
          "Origin must be `ForceOrigin`.",
          "",
          "- `collection`: The identifier of the item.",
          "- `owner`: The new Owner of this item.",
          "- `issuer`: The new Issuer of this item.",
          "- `admin`: The new Admin of this item.",
          "- `freezer`: The new Freezer of this item.",
          "- `free_holding`: Whether a deposit is taken for holding an item of this collection.",
          "- `is_frozen`: Whether this collection is frozen except for permissioned/admin",
          "instructions.",
          "",
          "Emits `ItemStatusChanged` with the identity of the item.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "free_holding",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3310",
        "name": "set_attribute",
        "docs": [
          "Set an attribute for a collection or item.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "`collection`.",
          "",
          "If the origin is Signed, then funds of signer are reserved according to the formula:",
          "`MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into",
          "account any already reserved funds.",
          "",
          "- `collection`: The identifier of the collection whose item's metadata to set.",
          "- `maybe_item`: The identifier of the item whose metadata to set.",
          "- `key`: The key of the attribute.",
          "- `value`: The value to which to set the attribute.",
          "",
          "Emits `AttributeSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U32>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          },
          {
            "name": "value",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, ValueLimit>"
          }
        ]
      },
      {
        "lookup": "3311",
        "name": "clear_attribute",
        "docs": [
          "Clear an attribute for a collection or item.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "`collection`.",
          "",
          "Any deposit is freed for the collection's owner.",
          "",
          "- `collection`: The identifier of the collection whose item's metadata to clear.",
          "- `maybe_item`: The identifier of the item whose metadata to clear.",
          "- `key`: The key of the attribute.",
          "",
          "Emits `AttributeCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U32>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          }
        ]
      },
      {
        "lookup": "3312",
        "name": "set_metadata",
        "docs": [
          "Set the metadata for an item.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "`collection`.",
          "",
          "If the origin is Signed, then funds of signer are reserved according to the formula:",
          "`MetadataDepositBase + DepositPerByte * data.len` taking into",
          "account any already reserved funds.",
          "",
          "- `collection`: The identifier of the collection whose item's metadata to set.",
          "- `item`: The identifier of the item whose metadata to set.",
          "- `data`: The general information of this item. Limited in length by `StringLimit`.",
          "- `is_frozen`: Whether the metadata should be frozen against further changes.",
          "",
          "Emits `MetadataSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3313",
        "name": "clear_metadata",
        "docs": [
          "Clear the metadata for an item.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "`item`.",
          "",
          "Any deposit is freed for the collection's owner.",
          "",
          "- `collection`: The identifier of the collection whose item's metadata to clear.",
          "- `item`: The identifier of the item whose metadata to clear.",
          "",
          "Emits `MetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3314",
        "name": "set_collection_metadata",
        "docs": [
          "Set the metadata for a collection.",
          "",
          "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
          "the `collection`.",
          "",
          "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
          "`MetadataDepositBase + DepositPerByte * data.len` taking into",
          "account any already reserved funds.",
          "",
          "- `collection`: The identifier of the item whose metadata to update.",
          "- `data`: The general information of this item. Limited in length by `StringLimit`.",
          "- `is_frozen`: Whether the metadata should be frozen against further changes.",
          "",
          "Emits `CollectionMetadataSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3315",
        "name": "clear_collection_metadata",
        "docs": [
          "Clear the metadata for a collection.",
          "",
          "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
          "the `collection`.",
          "",
          "Any deposit is freed for the collection's owner.",
          "",
          "- `collection`: The identifier of the collection whose metadata to clear.",
          "",
          "Emits `CollectionMetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "3316",
        "name": "set_accept_ownership",
        "docs": [
          "Set (or reset) the acceptance of ownership for a particular account.",
          "",
          "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a",
          "provider reference.",
          "",
          "- `maybe_collection`: The identifier of the collection whose ownership the signer is",
          "  willing to accept, or if `None`, an indication that the signer is willing to accept no",
          "  ownership transferal.",
          "",
          "Emits `OwnershipAcceptanceChanged`."
        ],
        "args": [
          {
            "name": "maybe_collection",
            "type": "option<U32>",
            "type_name": "Option<CollectionId>"
          }
        ]
      },
      {
        "lookup": "3317",
        "name": "set_collection_max_supply",
        "docs": [
          "Set the maximum amount of items a collection could have.",
          "",
          "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
          "the `collection`.",
          "",
          "Note: This function can only succeed once per collection.",
          "",
          "- `collection`: The identifier of the collection to change.",
          "- `max_supply`: The maximum amount of items a collection could have.",
          "",
          "Emits `CollectionMaxSupplySet` event when successful."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "max_supply",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "3318",
        "name": "set_price",
        "docs": [
          "Set (or reset) the price for an item.",
          "",
          "Origin must be Signed and must be the owner of the asset `item`.",
          "",
          "- `collection`: The collection of the item.",
          "- `item`: The item to set the price for.",
          "- `price`: The price for the item. Pass `None`, to reset the price.",
          "- `buyer`: Restricts the buy operation to a specific account.",
          "",
          "Emits `ItemPriceSet` on success if the price is not `None`.",
          "Emits `ItemPriceRemoved` on success if the price is `None`."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "price",
            "type": "option<U128>",
            "type_name": "Option<ItemPrice>"
          },
          {
            "name": "whitelisted_buyer",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "3319",
        "name": "buy_item",
        "docs": [
          "Allows to buy an item if it's up for sale.",
          "",
          "Origin must be Signed and must not be the owner of the `item`.",
          "",
          "- `collection`: The collection of the item.",
          "- `item`: The item the sender wants to buy.",
          "- `bid_price`: The price the sender is willing to pay.",
          "",
          "Emits `ItemBought` on success."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "bid_price",
            "type": "U128",
            "type_name": "ItemPrice"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 354
    },
    "events": [
      {
        "lookup": "3300",
        "name": "Created",
        "docs": [
          "A `collection` was created."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3301",
        "name": "ForceCreated",
        "docs": [
          "A `collection` was force-created."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId"
        ]
      },
      {
        "lookup": "3302",
        "name": "Destroyed",
        "docs": [
          "A `collection` was destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "3303",
        "name": "Issued",
        "docs": [
          "An `item` was issued."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3304",
        "name": "Transferred",
        "docs": [
          "An `item` was transferred."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "from",
          "to"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3305",
        "name": "Burned",
        "docs": [
          "An `item` was destroyed."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3306",
        "name": "Frozen",
        "docs": [
          "Some `item` was frozen."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "3307",
        "name": "Thawed",
        "docs": [
          "Some `item` was thawed."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "3308",
        "name": "CollectionFrozen",
        "docs": [
          "Some `collection` was frozen."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "3309",
        "name": "CollectionThawed",
        "docs": [
          "Some `collection` was thawed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "330a",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "new_owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId"
        ]
      },
      {
        "lookup": "330b",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "330c",
        "name": "ApprovedTransfer",
        "docs": [
          "An `item` of a `collection` has been approved by the `owner` for transfer by",
          "a `delegate`."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "330d",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for a `delegate` account to transfer the `item` of an item",
          "`collection` was cancelled by its `owner`."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "330e",
        "name": "ItemStatusChanged",
        "docs": [
          "A `collection` has had its attributes changed by the `Force` origin."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "330f",
        "name": "CollectionMetadataSet",
        "docs": [
          "New metadata has been set for a `collection`."
        ],
        "args": [
          "U32",
          "Vec<U8>",
          "Bool"
        ],
        "args_name": [
          "collection",
          "data",
          "is_frozen"
        ],
        "args_type_name": [
          "CollectionId",
          "BoundedVec<u8, StringLimit>",
          "bool"
        ]
      },
      {
        "lookup": "3310",
        "name": "CollectionMetadataCleared",
        "docs": [
          "Metadata has been cleared for a `collection`."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "3311",
        "name": "MetadataSet",
        "docs": [
          "New metadata has been set for an item."
        ],
        "args": [
          "U32",
          "U32",
          "Vec<U8>",
          "Bool"
        ],
        "args_name": [
          "collection",
          "item",
          "data",
          "is_frozen"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "BoundedVec<u8, StringLimit>",
          "bool"
        ]
      },
      {
        "lookup": "3312",
        "name": "MetadataCleared",
        "docs": [
          "Metadata has been cleared for an item."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "3313",
        "name": "Redeposited",
        "docs": [
          "Metadata has been cleared for an item."
        ],
        "args": [
          "U32",
          "Vec<U32>"
        ],
        "args_name": [
          "collection",
          "successful_items"
        ],
        "args_type_name": [
          "CollectionId",
          "Vec<ItemId>"
        ]
      },
      {
        "lookup": "3314",
        "name": "AttributeSet",
        "docs": [
          "New attribute metadata has been set for a `collection` or `item`."
        ],
        "args": [
          "U32",
          "option<U32>",
          "Vec<U8>",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "maybe_item",
          "key",
          "value"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "BoundedVec<u8, KeyLimit>",
          "BoundedVec<u8, ValueLimit>"
        ]
      },
      {
        "lookup": "3315",
        "name": "AttributeCleared",
        "docs": [
          "Attribute metadata has been cleared for a `collection` or `item`."
        ],
        "args": [
          "U32",
          "option<U32>",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "maybe_item",
          "key"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "BoundedVec<u8, KeyLimit>"
        ]
      },
      {
        "lookup": "3316",
        "name": "OwnershipAcceptanceChanged",
        "docs": [
          "Ownership acceptance has changed for an account."
        ],
        "args": [
          "AccountId",
          "option<U32>"
        ],
        "args_name": [
          "who",
          "maybe_collection"
        ],
        "args_type_name": [
          "AccountId",
          "Option<CollectionId>"
        ]
      },
      {
        "lookup": "3317",
        "name": "CollectionMaxSupplySet",
        "docs": [
          "Max supply has been set for a collection."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "max_supply"
        ],
        "args_type_name": [
          "CollectionId",
          "u32"
        ]
      },
      {
        "lookup": "3318",
        "name": "ItemPriceSet",
        "docs": [
          "The price was set for the instance."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "option<AccountId>"
        ],
        "args_name": [
          "collection",
          "item",
          "price",
          "whitelisted_buyer"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "ItemPrice",
          "Option<AccountId>"
        ]
      },
      {
        "lookup": "3319",
        "name": "ItemPriceRemoved",
        "docs": [
          "The price for the instance was removed."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "331a",
        "name": "ItemBought",
        "docs": [
          "An item was bought."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "price",
          "seller",
          "buyer"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "ItemPrice",
          "AccountId",
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 131
    },
    "constants": [
      {
        "name": "CollectionDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e87648170000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for collection."
        ]
      },
      {
        "name": "ItemDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e1f505000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an item."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "a06afa77000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your item."
        ]
      },
      {
        "name": "AttributeDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00943577000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding an attribute to an item."
        ]
      },
      {
        "name": "DepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "a0860100000000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes store in metadata,",
          " either \"normal\" metadata or attribute metadata."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "80000000",
        "docs": [
          " The maximum length of data stored on-chain."
        ]
      },
      {
        "name": "KeyLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum length of an attribute key."
        ]
      },
      {
        "name": "ValueLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "40000000",
        "docs": [
          " The maximum length of an attribute value."
        ]
      }
    ],
    "errors": [
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "UnknownCollection",
        "doc": [
          "The given item ID is unknown."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The item ID has already been used for an item."
        ]
      },
      {
        "name": "WrongOwner",
        "doc": [
          "The owner turned out to be different to what was expected."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "Invalid witness data given."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The item ID is already taken."
        ]
      },
      {
        "name": "Frozen",
        "doc": [
          "The item or collection is frozen."
        ]
      },
      {
        "name": "WrongDelegate",
        "doc": [
          "The delegate turned out to be different to what was expected."
        ]
      },
      {
        "name": "NoDelegate",
        "doc": [
          "There is no delegate approved."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      },
      {
        "name": "Unaccepted",
        "doc": [
          "The named owner has not signed ownership of the collection is acceptable."
        ]
      },
      {
        "name": "Locked",
        "doc": [
          "The item is locked."
        ]
      },
      {
        "name": "MaxSupplyReached",
        "doc": [
          "All items have been minted."
        ]
      },
      {
        "name": "MaxSupplyAlreadySet",
        "doc": [
          "The max supply has already been set."
        ]
      },
      {
        "name": "MaxSupplyTooSmall",
        "doc": [
          "The provided max supply is less to the amount of items a collection already has."
        ]
      },
      {
        "name": "UnknownItem",
        "doc": [
          "The given item ID is unknown."
        ]
      },
      {
        "name": "NotForSale",
        "doc": [
          "Item is not for sale."
        ]
      },
      {
        "name": "BidTooLow",
        "doc": [
          "The provided bid is too low."
        ]
      }
    ],
    "errors_value": {
      "type": 422
    },
    "index": 51
  },
  {
    "name": "Nfts",
    "prefix": "Nfts",
    "storage": [
      {
        "name": "Collection",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_nfts:types:CollectionDetails",
            "keys_id": 4,
            "value_id": 423
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of a collection."
        ]
      },
      {
        "name": "OwnershipAcceptance",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U32",
            "keys_id": 0,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " The collection, if any, of which an account is willing to take ownership."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32",
              "U32"
            ],
            "value": "NULL",
            "keys_id": 414,
            "value_id": 124
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items held by any given account; set out this way so that items owned by a single",
          " account can be enumerated."
        ]
      },
      {
        "name": "CollectionAccount",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "NULL",
            "keys_id": 415,
            "value_id": 124
          }
        },
        "fallback": "0x00",
        "docs": [
          " The collections owned by any given account; set out this way so that collections owned by",
          " a single account can be enumerated."
        ]
      },
      {
        "name": "CollectionRoleOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId"
            ],
            "value": "U8",
            "keys_id": 404,
            "value_id": 424
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items in existence and their ownership details.",
          " Stores collection roles as per account."
        ]
      },
      {
        "name": "Item",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "pallet_nfts:types:ItemDetails",
            "keys_id": 155,
            "value_id": 426
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items in existence and their ownership details."
        ]
      },
      {
        "name": "CollectionMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_nfts:types:CollectionMetadata",
            "keys_id": 4,
            "value_id": 432
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of a collection."
        ]
      },
      {
        "name": "ItemMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "pallet_nfts:types:ItemMetadata",
            "keys_id": 155,
            "value_id": 433
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of an item."
        ]
      },
      {
        "name": "Attribute",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "option<U32>",
              "pallet_nfts:types:AttributeNamespace",
              "Vec<U8>"
            ],
            "value": "Tuple:Vec<U8>pallet_nfts:types:AttributeDeposit",
            "keys_id": 435,
            "value_id": 436
          }
        },
        "fallback": "0x00",
        "docs": [
          " Attributes of a collection."
        ]
      },
      {
        "name": "ItemPriceOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "Tuple:U128option<AccountId>",
            "keys_id": 155,
            "value_id": 421
          }
        },
        "fallback": "0x00",
        "docs": [
          " A price of an item."
        ]
      },
      {
        "name": "ItemAttributesApprovalsOf",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "Vec<AccountId>",
            "keys_id": 155,
            "value_id": 438
          }
        },
        "fallback": "0x00",
        "docs": [
          " Item attribute approvals."
        ]
      },
      {
        "name": "NextCollectionId",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Stores the `CollectionId` that is going to be used for the next collection.",
          " This gets incremented whenever a new collection is created."
        ]
      },
      {
        "name": "PendingSwapOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "pallet_nfts:types:PendingSwap",
            "keys_id": 155,
            "value_id": 440
          }
        },
        "fallback": "0x00",
        "docs": [
          " Handles all the pending swaps."
        ]
      },
      {
        "name": "CollectionConfigOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_nfts:types:CollectionConfig",
            "keys_id": 4,
            "value_id": 359
          }
        },
        "fallback": "0x00",
        "docs": [
          " Config of a collection."
        ]
      },
      {
        "name": "ItemConfigOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "U64",
            "keys_id": 155,
            "value_id": 369
          }
        },
        "fallback": "0x00",
        "docs": [
          " Config of an item."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3400",
        "name": "create",
        "docs": [
          "Issue a new collection of non-fungible items from a public origin.",
          "",
          "This new collection has no items initially and its owner is the origin.",
          "",
          "The origin must be Signed and the sender must have sufficient funds free.",
          "",
          "`CollectionDeposit` funds of sender are reserved.",
          "",
          "Parameters:",
          "- `admin`: The admin of this collection. The admin is the initial address of each",
          "member of the collection's admin team.",
          "",
          "Emits `Created` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "config",
            "type": "pallet_nfts:types:CollectionConfig",
            "type_name": "CollectionConfigFor"
          }
        ]
      },
      {
        "lookup": "3401",
        "name": "force_create",
        "docs": [
          "Issue a new collection of non-fungible items from a privileged origin.",
          "",
          "This new collection has no items initially.",
          "",
          "The origin must conform to `ForceOrigin`.",
          "",
          "Unlike `create`, no funds are reserved.",
          "",
          "- `owner`: The owner of this collection of items. The owner has full superuser",
          "  permissions over this item, but may later change and configure the permissions using",
          "  `transfer_ownership` and `set_team`.",
          "",
          "Emits `ForceCreated` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "config",
            "type": "pallet_nfts:types:CollectionConfig",
            "type_name": "CollectionConfigFor"
          }
        ]
      },
      {
        "lookup": "3402",
        "name": "destroy",
        "docs": [
          "Destroy a collection of fungible items.",
          "",
          "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
          "owner of the `collection`.",
          "",
          "NOTE: The collection must have 0 items to be destroyed.",
          "",
          "- `collection`: The identifier of the collection to be destroyed.",
          "- `witness`: Information on the items minted in the collection. This must be",
          "correct.",
          "",
          "Emits `Destroyed` event when successful.",
          "",
          "Weight: `O(m + c + a)` where:",
          "- `m = witness.item_metadatas`",
          "- `c = witness.item_configs`",
          "- `a = witness.attributes`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "witness",
            "type": "pallet_nfts:types:DestroyWitness",
            "type_name": "DestroyWitness"
          }
        ]
      },
      {
        "lookup": "3403",
        "name": "mint",
        "docs": [
          "Mint an item of a particular collection.",
          "",
          "The origin must be Signed and the sender must comply with the `mint_settings` rules.",
          "",
          "- `collection`: The collection of the item to be minted.",
          "- `item`: An identifier of the new item.",
          "- `mint_to`: Account into which the item will be minted.",
          "- `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned",
          "  item_id from that collection needs to be provided within the witness data object. If",
          "  the mint price is set, then it should be additionally confirmed in the `witness_data`.",
          "",
          "Note: the deposit will be taken from the `origin` and not the `owner` of the `item`.",
          "",
          "Emits `Issued` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "mint_to",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "witness_data",
            "type": "option<pallet_nfts:types:MintWitness>",
            "type_name": "Option<MintWitness<ItemId, DepositBalanceOf>>"
          }
        ]
      },
      {
        "lookup": "3404",
        "name": "force_mint",
        "docs": [
          "Mint an item of a particular collection from a privileged origin.",
          "",
          "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
          "Issuer of the `collection`.",
          "",
          "- `collection`: The collection of the item to be minted.",
          "- `item`: An identifier of the new item.",
          "- `mint_to`: Account into which the item will be minted.",
          "- `item_config`: A config of the new item.",
          "",
          "Emits `Issued` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "mint_to",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "item_config",
            "type": "U64",
            "type_name": "ItemConfig"
          }
        ]
      },
      {
        "lookup": "3405",
        "name": "burn",
        "docs": [
          "Destroy a single item.",
          "",
          "The origin must conform to `ForceOrigin` or must be Signed and the signing account must",
          "be the owner of the `item`.",
          "",
          "- `collection`: The collection of the item to be burned.",
          "- `item`: The item to be burned.",
          "",
          "Emits `Burned`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3406",
        "name": "transfer",
        "docs": [
          "Move an item from the sender account to another.",
          "",
          "Origin must be Signed and the signing account must be either:",
          "- the Owner of the `item`;",
          "- the approved delegate for the `item` (in this case, the approval is reset).",
          "",
          "Arguments:",
          "- `collection`: The collection of the item to be transferred.",
          "- `item`: The item to be transferred.",
          "- `dest`: The account to receive ownership of the item.",
          "",
          "Emits `Transferred`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3407",
        "name": "redeposit",
        "docs": [
          "Re-evaluate the deposits on some items.",
          "",
          "Origin must be Signed and the sender should be the Owner of the `collection`.",
          "",
          "- `collection`: The collection of the items to be reevaluated.",
          "- `items`: The items of the collection whose deposits will be reevaluated.",
          "",
          "NOTE: This exists as a best-effort function. Any items which are unknown or",
          "in the case that the owner account does not have reservable funds to pay for a",
          "deposit increase are ignored. Generally the owner isn't going to call this on items",
          "whose existing deposit is less than the refreshed deposit as it would only cost them,",
          "so it's of little consequence.",
          "",
          "It will still return an error in the case that the collection is unknown or the signer",
          "is not permitted to call it.",
          "",
          "Weight: `O(items.len())`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "items",
            "type": "Vec<U32>",
            "type_name": "Vec<ItemId>"
          }
        ]
      },
      {
        "lookup": "3408",
        "name": "lock_item_transfer",
        "docs": [
          "Disallow further unprivileged transfer of an item.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the `collection`.",
          "",
          "- `collection`: The collection of the item to be changed.",
          "- `item`: The item to become non-transferable.",
          "",
          "Emits `ItemTransferLocked`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3409",
        "name": "unlock_item_transfer",
        "docs": [
          "Re-allow unprivileged transfer of an item.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the `collection`.",
          "",
          "- `collection`: The collection of the item to be changed.",
          "- `item`: The item to become transferable.",
          "",
          "Emits `ItemTransferUnlocked`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "340a",
        "name": "lock_collection",
        "docs": [
          "Disallows specified settings for the whole collection.",
          "",
          "Origin must be Signed and the sender should be the Owner of the `collection`.",
          "",
          "- `collection`: The collection to be locked.",
          "- `lock_settings`: The settings to be locked.",
          "",
          "Note: it's possible to only lock(set) the setting, but not to unset it.",
          "",
          "Emits `CollectionLocked`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "lock_settings",
            "type": "U64",
            "type_name": "CollectionSettings"
          }
        ]
      },
      {
        "lookup": "340b",
        "name": "transfer_ownership",
        "docs": [
          "Change the Owner of a collection.",
          "",
          "Origin must be Signed and the sender should be the Owner of the `collection`.",
          "",
          "- `collection`: The collection whose owner should be changed.",
          "- `owner`: The new Owner of this collection. They must have called",
          "  `set_accept_ownership` with `collection` in order for this operation to succeed.",
          "",
          "Emits `OwnerChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "new_owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "340c",
        "name": "set_team",
        "docs": [
          "Change the Issuer, Admin and Freezer of a collection.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "`collection`.",
          "",
          "Note: by setting the role to `None` only the `ForceOrigin` will be able to change it",
          "after to `Some(account)`.",
          "",
          "- `collection`: The collection whose team should be changed.",
          "- `issuer`: The new Issuer of this collection.",
          "- `admin`: The new Admin of this collection.",
          "- `freezer`: The new Freezer of this collection.",
          "",
          "Emits `TeamChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "issuer",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          },
          {
            "name": "admin",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          },
          {
            "name": "freezer",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "340d",
        "name": "force_collection_owner",
        "docs": [
          "Change the Owner of a collection.",
          "",
          "Origin must be `ForceOrigin`.",
          "",
          "- `collection`: The identifier of the collection.",
          "- `owner`: The new Owner of this collection.",
          "",
          "Emits `OwnerChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "340e",
        "name": "force_collection_config",
        "docs": [
          "Change the config of a collection.",
          "",
          "Origin must be `ForceOrigin`.",
          "",
          "- `collection`: The identifier of the collection.",
          "- `config`: The new config of this collection.",
          "",
          "Emits `CollectionConfigChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "config",
            "type": "pallet_nfts:types:CollectionConfig",
            "type_name": "CollectionConfigFor"
          }
        ]
      },
      {
        "lookup": "340f",
        "name": "approve_transfer",
        "docs": [
          "Approve an item to be transferred by a delegated third-party account.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "`item`.",
          "",
          "- `collection`: The collection of the item to be approved for delegated transfer.",
          "- `item`: The item to be approved for delegated transfer.",
          "- `delegate`: The account to delegate permission to transfer the item.",
          "- `maybe_deadline`: Optional deadline for the approval. Specified by providing the",
          "\tnumber of blocks after which the approval will expire",
          "",
          "Emits `TransferApproved` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "maybe_deadline",
            "type": "option<U32>",
            "type_name": "Option<BlockNumberFor>"
          }
        ]
      },
      {
        "lookup": "3410",
        "name": "cancel_approval",
        "docs": [
          "Cancel one of the transfer approvals for a specific item.",
          "",
          "Origin must be either:",
          "- the `Force` origin;",
          "- `Signed` with the signer being the Owner of the `item`;",
          "",
          "Arguments:",
          "- `collection`: The collection of the item of whose approval will be cancelled.",
          "- `item`: The item of the collection of whose approval will be cancelled.",
          "- `delegate`: The account that is going to loose their approval.",
          "",
          "Emits `ApprovalCancelled` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3411",
        "name": "clear_all_transfer_approvals",
        "docs": [
          "Cancel all the approvals of a specific item.",
          "",
          "Origin must be either:",
          "- the `Force` origin;",
          "- `Signed` with the signer being the Owner of the `item`;",
          "",
          "Arguments:",
          "- `collection`: The collection of the item of whose approvals will be cleared.",
          "- `item`: The item of the collection of whose approvals will be cleared.",
          "",
          "Emits `AllApprovalsCancelled` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3412",
        "name": "lock_item_properties",
        "docs": [
          "Disallows changing the metadata or attributes of the item.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin",
          "of the `collection`.",
          "",
          "- `collection`: The collection if the `item`.",
          "- `item`: An item to be locked.",
          "- `lock_metadata`: Specifies whether the metadata should be locked.",
          "- `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace",
          "  should be locked.",
          "",
          "Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only.",
          "When the metadata or attributes are locked, it won't be possible the unlock them.",
          "",
          "Emits `ItemPropertiesLocked`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "lock_metadata",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "lock_attributes",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3413",
        "name": "set_attribute",
        "docs": [
          "Set an attribute for a collection or item.",
          "",
          "Origin must be Signed and must conform to the namespace ruleset:",
          "- `CollectionOwner` namespace could be modified by the `collection` Admin only;",
          "- `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`",
          "  should be set in that case;",
          "- `Account(AccountId)` namespace could be modified only when the `origin` was given a",
          "  permission to do so;",
          "",
          "The funds of `origin` are reserved according to the formula:",
          "`AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into",
          "account any already reserved funds.",
          "",
          "- `collection`: The identifier of the collection whose item's metadata to set.",
          "- `maybe_item`: The identifier of the item whose metadata to set.",
          "- `namespace`: Attribute's namespace.",
          "- `key`: The key of the attribute.",
          "- `value`: The value to which to set the attribute.",
          "",
          "Emits `AttributeSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U32>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "namespace",
            "type": "pallet_nfts:types:AttributeNamespace",
            "type_name": "AttributeNamespace<AccountId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          },
          {
            "name": "value",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, ValueLimit>"
          }
        ]
      },
      {
        "lookup": "3414",
        "name": "force_set_attribute",
        "docs": [
          "Force-set an attribute for a collection or item.",
          "",
          "Origin must be `ForceOrigin`.",
          "",
          "If the attribute already exists and it was set by another account, the deposit",
          "will be returned to the previous owner.",
          "",
          "- `set_as`: An optional owner of the attribute.",
          "- `collection`: The identifier of the collection whose item's metadata to set.",
          "- `maybe_item`: The identifier of the item whose metadata to set.",
          "- `namespace`: Attribute's namespace.",
          "- `key`: The key of the attribute.",
          "- `value`: The value to which to set the attribute.",
          "",
          "Emits `AttributeSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "set_as",
            "type": "option<AccountId>",
            "type_name": "Option<AccountId>"
          },
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U32>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "namespace",
            "type": "pallet_nfts:types:AttributeNamespace",
            "type_name": "AttributeNamespace<AccountId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          },
          {
            "name": "value",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, ValueLimit>"
          }
        ]
      },
      {
        "lookup": "3415",
        "name": "clear_attribute",
        "docs": [
          "Clear an attribute for a collection or item.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "attribute.",
          "",
          "Any deposit is freed for the collection's owner.",
          "",
          "- `collection`: The identifier of the collection whose item's metadata to clear.",
          "- `maybe_item`: The identifier of the item whose metadata to clear.",
          "- `namespace`: Attribute's namespace.",
          "- `key`: The key of the attribute.",
          "",
          "Emits `AttributeCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U32>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "namespace",
            "type": "pallet_nfts:types:AttributeNamespace",
            "type_name": "AttributeNamespace<AccountId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          }
        ]
      },
      {
        "lookup": "3416",
        "name": "approve_item_attributes",
        "docs": [
          "Approve item's attributes to be changed by a delegated third-party account.",
          "",
          "Origin must be Signed and must be an owner of the `item`.",
          "",
          "- `collection`: A collection of the item.",
          "- `item`: The item that holds attributes.",
          "- `delegate`: The account to delegate permission to change attributes of the item.",
          "",
          "Emits `ItemAttributesApprovalAdded` on success."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3417",
        "name": "cancel_item_attributes_approval",
        "docs": [
          "Cancel the previously provided approval to change item's attributes.",
          "All the previously set attributes by the `delegate` will be removed.",
          "",
          "Origin must be Signed and must be an owner of the `item`.",
          "",
          "- `collection`: Collection that the item is contained within.",
          "- `item`: The item that holds attributes.",
          "- `delegate`: The previously approved account to remove.",
          "",
          "Emits `ItemAttributesApprovalRemoved` on success."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "witness",
            "type": "U32",
            "type_name": "CancelAttributesApprovalWitness"
          }
        ]
      },
      {
        "lookup": "3418",
        "name": "set_metadata",
        "docs": [
          "Set the metadata for an item.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the",
          "`collection`.",
          "",
          "If the origin is Signed, then funds of signer are reserved according to the formula:",
          "`MetadataDepositBase + DepositPerByte * data.len` taking into",
          "account any already reserved funds.",
          "",
          "- `collection`: The identifier of the collection whose item's metadata to set.",
          "- `item`: The identifier of the item whose metadata to set.",
          "- `data`: The general information of this item. Limited in length by `StringLimit`.",
          "",
          "Emits `ItemMetadataSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          }
        ]
      },
      {
        "lookup": "3419",
        "name": "clear_metadata",
        "docs": [
          "Clear the metadata for an item.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the",
          "`collection`.",
          "",
          "Any deposit is freed for the collection's owner.",
          "",
          "- `collection`: The identifier of the collection whose item's metadata to clear.",
          "- `item`: The identifier of the item whose metadata to clear.",
          "",
          "Emits `ItemMetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "341a",
        "name": "set_collection_metadata",
        "docs": [
          "Set the metadata for a collection.",
          "",
          "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of",
          "the `collection`.",
          "",
          "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
          "`MetadataDepositBase + DepositPerByte * data.len` taking into",
          "account any already reserved funds.",
          "",
          "- `collection`: The identifier of the item whose metadata to update.",
          "- `data`: The general information of this item. Limited in length by `StringLimit`.",
          "",
          "Emits `CollectionMetadataSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          }
        ]
      },
      {
        "lookup": "341b",
        "name": "clear_collection_metadata",
        "docs": [
          "Clear the metadata for a collection.",
          "",
          "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of",
          "the `collection`.",
          "",
          "Any deposit is freed for the collection's owner.",
          "",
          "- `collection`: The identifier of the collection whose metadata to clear.",
          "",
          "Emits `CollectionMetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "341c",
        "name": "set_accept_ownership",
        "docs": [
          "Set (or reset) the acceptance of ownership for a particular account.",
          "",
          "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a",
          "provider reference.",
          "",
          "- `maybe_collection`: The identifier of the collection whose ownership the signer is",
          "  willing to accept, or if `None`, an indication that the signer is willing to accept no",
          "  ownership transferal.",
          "",
          "Emits `OwnershipAcceptanceChanged`."
        ],
        "args": [
          {
            "name": "maybe_collection",
            "type": "option<U32>",
            "type_name": "Option<CollectionId>"
          }
        ]
      },
      {
        "lookup": "341d",
        "name": "set_collection_max_supply",
        "docs": [
          "Set the maximum number of items a collection could have.",
          "",
          "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
          "the `collection`.",
          "",
          "- `collection`: The identifier of the collection to change.",
          "- `max_supply`: The maximum number of items a collection could have.",
          "",
          "Emits `CollectionMaxSupplySet` event when successful."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "max_supply",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "341e",
        "name": "update_mint_settings",
        "docs": [
          "Update mint settings.",
          "",
          "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer",
          "of the `collection`.",
          "",
          "- `collection`: The identifier of the collection to change.",
          "- `mint_settings`: The new mint settings.",
          "",
          "Emits `CollectionMintSettingsUpdated` event when successful."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "mint_settings",
            "type": "pallet_nfts:types:MintSettings",
            "type_name": "MintSettings<BalanceOf, BlockNumberFor, CollectionId>"
          }
        ]
      },
      {
        "lookup": "341f",
        "name": "set_price",
        "docs": [
          "Set (or reset) the price for an item.",
          "",
          "Origin must be Signed and must be the owner of the `item`.",
          "",
          "- `collection`: The collection of the item.",
          "- `item`: The item to set the price for.",
          "- `price`: The price for the item. Pass `None`, to reset the price.",
          "- `buyer`: Restricts the buy operation to a specific account.",
          "",
          "Emits `ItemPriceSet` on success if the price is not `None`.",
          "Emits `ItemPriceRemoved` on success if the price is `None`."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "price",
            "type": "option<U128>",
            "type_name": "Option<ItemPrice>"
          },
          {
            "name": "whitelisted_buyer",
            "type": "option<sp_runtime:multiaddress:MultiAddress>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "3420",
        "name": "buy_item",
        "docs": [
          "Allows to buy an item if it's up for sale.",
          "",
          "Origin must be Signed and must not be the owner of the `item`.",
          "",
          "- `collection`: The collection of the item.",
          "- `item`: The item the sender wants to buy.",
          "- `bid_price`: The price the sender is willing to pay.",
          "",
          "Emits `ItemBought` on success."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "bid_price",
            "type": "U128",
            "type_name": "ItemPrice"
          }
        ]
      },
      {
        "lookup": "3421",
        "name": "pay_tips",
        "docs": [
          "Allows to pay the tips.",
          "",
          "Origin must be Signed.",
          "",
          "- `tips`: Tips array.",
          "",
          "Emits `TipSent` on every tip transfer."
        ],
        "args": [
          {
            "name": "tips",
            "type": "Vec<pallet_nfts:types:ItemTip>",
            "type_name": "BoundedVec<ItemTipOf, MaxTips>"
          }
        ]
      },
      {
        "lookup": "3422",
        "name": "create_swap",
        "docs": [
          "Register a new atomic swap, declaring an intention to send an `item` in exchange for",
          "`desired_item` from origin to target on the current blockchain.",
          "The target can execute the swap during the specified `duration` of blocks (if set).",
          "Additionally, the price could be set for the desired `item`.",
          "",
          "Origin must be Signed and must be an owner of the `item`.",
          "",
          "- `collection`: The collection of the item.",
          "- `item`: The item an owner wants to give.",
          "- `desired_collection`: The collection of the desired item.",
          "- `desired_item`: The desired item an owner wants to receive.",
          "- `maybe_price`: The price an owner is willing to pay or receive for the desired `item`.",
          "- `duration`: A deadline for the swap. Specified by providing the number of blocks",
          "\tafter which the swap will expire.",
          "",
          "Emits `SwapCreated` on success."
        ],
        "args": [
          {
            "name": "offered_collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "offered_item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "desired_collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_desired_item",
            "type": "option<U32>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "maybe_price",
            "type": "option<pallet_nfts:types:PriceWithDirection>",
            "type_name": "Option<PriceWithDirection<ItemPrice>>"
          },
          {
            "name": "duration",
            "type": "U32",
            "type_name": "BlockNumberFor"
          }
        ]
      },
      {
        "lookup": "3423",
        "name": "cancel_swap",
        "docs": [
          "Cancel an atomic swap.",
          "",
          "Origin must be Signed.",
          "Origin must be an owner of the `item` if the deadline hasn't expired.",
          "",
          "- `collection`: The collection of the item.",
          "- `item`: The item an owner wants to give.",
          "",
          "Emits `SwapCancelled` on success."
        ],
        "args": [
          {
            "name": "offered_collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "offered_item",
            "type": "U32",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "3424",
        "name": "claim_swap",
        "docs": [
          "Claim an atomic swap.",
          "This method executes a pending swap, that was created by a counterpart before.",
          "",
          "Origin must be Signed and must be an owner of the `item`.",
          "",
          "- `send_collection`: The collection of the item to be sent.",
          "- `send_item`: The item to be sent.",
          "- `receive_collection`: The collection of the item to be received.",
          "- `receive_item`: The item to be received.",
          "- `witness_price`: A price that was previously agreed on.",
          "",
          "Emits `SwapClaimed` on success."
        ],
        "args": [
          {
            "name": "send_collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "send_item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "receive_collection",
            "type": "U32",
            "type_name": "CollectionId"
          },
          {
            "name": "receive_item",
            "type": "U32",
            "type_name": "ItemId"
          },
          {
            "name": "witness_price",
            "type": "option<pallet_nfts:types:PriceWithDirection>",
            "type_name": "Option<PriceWithDirection<ItemPrice>>"
          }
        ]
      },
      {
        "lookup": "3425",
        "name": "mint_pre_signed",
        "docs": [
          "Mint an item by providing the pre-signed approval.",
          "",
          "Origin must be Signed.",
          "",
          "- `mint_data`: The pre-signed approval that consists of the information about the item,",
          "  its metadata, attributes, who can mint it (`None` for anyone) and until what block",
          "  number.",
          "- `signature`: The signature of the `data` object.",
          "- `signer`: The `data` object's signer. Should be an Issuer of the collection.",
          "",
          "Emits `Issued` on success.",
          "Emits `AttributeSet` if the attributes were provided.",
          "Emits `ItemMetadataSet` if the metadata was not empty."
        ],
        "args": [
          {
            "name": "mint_data",
            "type": "pallet_nfts:types:PreSignedMint",
            "type_name": "Box<PreSignedMintOf>"
          },
          {
            "name": "signature",
            "type": "sp_runtime:MultiSignature",
            "type_name": "OffchainSignature"
          },
          {
            "name": "signer",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3426",
        "name": "set_attributes_pre_signed",
        "docs": [
          "Set attributes for an item by providing the pre-signed approval.",
          "",
          "Origin must be Signed and must be an owner of the `data.item`.",
          "",
          "- `data`: The pre-signed approval that consists of the information about the item,",
          "  attributes to update and until what block number.",
          "- `signature`: The signature of the `data` object.",
          "- `signer`: The `data` object's signer. Should be an Admin of the collection for the",
          "  `CollectionOwner` namespace.",
          "",
          "Emits `AttributeSet` for each provided attribute.",
          "Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.",
          "Emits `PreSignedAttributesSet` on success."
        ],
        "args": [
          {
            "name": "data",
            "type": "pallet_nfts:types:PreSignedAttributes",
            "type_name": "PreSignedAttributesOf"
          },
          {
            "name": "signature",
            "type": "sp_runtime:MultiSignature",
            "type_name": "OffchainSignature"
          },
          {
            "name": "signer",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 358
    },
    "events": [
      {
        "lookup": "3400",
        "name": "Created",
        "docs": [
          "A `collection` was created."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3401",
        "name": "ForceCreated",
        "docs": [
          "A `collection` was force-created."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId"
        ]
      },
      {
        "lookup": "3402",
        "name": "Destroyed",
        "docs": [
          "A `collection` was destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "3403",
        "name": "Issued",
        "docs": [
          "An `item` was issued."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3404",
        "name": "Transferred",
        "docs": [
          "An `item` was transferred."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "from",
          "to"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3405",
        "name": "Burned",
        "docs": [
          "An `item` was destroyed."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3406",
        "name": "ItemTransferLocked",
        "docs": [
          "An `item` became non-transferable."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "3407",
        "name": "ItemTransferUnlocked",
        "docs": [
          "An `item` became transferable."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "3408",
        "name": "ItemPropertiesLocked",
        "docs": [
          "`item` metadata or attributes were locked."
        ],
        "args": [
          "U32",
          "U32",
          "Bool",
          "Bool"
        ],
        "args_name": [
          "collection",
          "item",
          "lock_metadata",
          "lock_attributes"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "bool",
          "bool"
        ]
      },
      {
        "lookup": "3409",
        "name": "CollectionLocked",
        "docs": [
          "Some `collection` was locked."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "340a",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "new_owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId"
        ]
      },
      {
        "lookup": "340b",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "U32",
          "option<AccountId>",
          "option<AccountId>",
          "option<AccountId>"
        ],
        "args_name": [
          "collection",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<AccountId>",
          "Option<AccountId>",
          "Option<AccountId>"
        ]
      },
      {
        "lookup": "340c",
        "name": "TransferApproved",
        "docs": [
          "An `item` of a `collection` has been approved by the `owner` for transfer by",
          "a `delegate`."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId",
          "option<U32>"
        ],
        "args_name": [
          "collection",
          "item",
          "owner",
          "delegate",
          "deadline"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId",
          "Option<BlockNumberFor>"
        ]
      },
      {
        "lookup": "340d",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for a `delegate` account to transfer the `item` of an item",
          "`collection` was cancelled by its `owner`."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "340e",
        "name": "AllApprovalsCancelled",
        "docs": [
          "All approvals of an item got cancelled."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "340f",
        "name": "CollectionConfigChanged",
        "docs": [
          "A `collection` has had its config changed by the `Force` origin."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "3410",
        "name": "CollectionMetadataSet",
        "docs": [
          "New metadata has been set for a `collection`."
        ],
        "args": [
          "U32",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "data"
        ],
        "args_type_name": [
          "CollectionId",
          "BoundedVec<u8, StringLimit>"
        ]
      },
      {
        "lookup": "3411",
        "name": "CollectionMetadataCleared",
        "docs": [
          "Metadata has been cleared for a `collection`."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "3412",
        "name": "ItemMetadataSet",
        "docs": [
          "New metadata has been set for an item."
        ],
        "args": [
          "U32",
          "U32",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "item",
          "data"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "BoundedVec<u8, StringLimit>"
        ]
      },
      {
        "lookup": "3413",
        "name": "ItemMetadataCleared",
        "docs": [
          "Metadata has been cleared for an item."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "3414",
        "name": "Redeposited",
        "docs": [
          "The deposit for a set of `item`s within a `collection` has been updated."
        ],
        "args": [
          "U32",
          "Vec<U32>"
        ],
        "args_name": [
          "collection",
          "successful_items"
        ],
        "args_type_name": [
          "CollectionId",
          "Vec<ItemId>"
        ]
      },
      {
        "lookup": "3415",
        "name": "AttributeSet",
        "docs": [
          "New attribute metadata has been set for a `collection` or `item`."
        ],
        "args": [
          "U32",
          "option<U32>",
          "Vec<U8>",
          "Vec<U8>",
          "pallet_nfts:types:AttributeNamespace"
        ],
        "args_name": [
          "collection",
          "maybe_item",
          "key",
          "value",
          "namespace"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "BoundedVec<u8, KeyLimit>",
          "BoundedVec<u8, ValueLimit>",
          "AttributeNamespace<AccountId>"
        ]
      },
      {
        "lookup": "3416",
        "name": "AttributeCleared",
        "docs": [
          "Attribute metadata has been cleared for a `collection` or `item`."
        ],
        "args": [
          "U32",
          "option<U32>",
          "Vec<U8>",
          "pallet_nfts:types:AttributeNamespace"
        ],
        "args_name": [
          "collection",
          "maybe_item",
          "key",
          "namespace"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "BoundedVec<u8, KeyLimit>",
          "AttributeNamespace<AccountId>"
        ]
      },
      {
        "lookup": "3417",
        "name": "ItemAttributesApprovalAdded",
        "docs": [
          "A new approval to modify item attributes was added."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3418",
        "name": "ItemAttributesApprovalRemoved",
        "docs": [
          "A new approval to modify item attributes was removed."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3419",
        "name": "OwnershipAcceptanceChanged",
        "docs": [
          "Ownership acceptance has changed for an account."
        ],
        "args": [
          "AccountId",
          "option<U32>"
        ],
        "args_name": [
          "who",
          "maybe_collection"
        ],
        "args_type_name": [
          "AccountId",
          "Option<CollectionId>"
        ]
      },
      {
        "lookup": "341a",
        "name": "CollectionMaxSupplySet",
        "docs": [
          "Max supply has been set for a collection."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "max_supply"
        ],
        "args_type_name": [
          "CollectionId",
          "u32"
        ]
      },
      {
        "lookup": "341b",
        "name": "CollectionMintSettingsUpdated",
        "docs": [
          "Mint settings for a collection had changed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "341c",
        "name": "NextCollectionIdIncremented",
        "docs": [
          "Event gets emitted when the `NextCollectionId` gets incremented."
        ],
        "args": [
          "option<U32>"
        ],
        "args_name": [
          "next_id"
        ],
        "args_type_name": [
          "Option<CollectionId>"
        ]
      },
      {
        "lookup": "341d",
        "name": "ItemPriceSet",
        "docs": [
          "The price was set for the item."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "option<AccountId>"
        ],
        "args_name": [
          "collection",
          "item",
          "price",
          "whitelisted_buyer"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "ItemPrice",
          "Option<AccountId>"
        ]
      },
      {
        "lookup": "341e",
        "name": "ItemPriceRemoved",
        "docs": [
          "The price for the item was removed."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "341f",
        "name": "ItemBought",
        "docs": [
          "An item was bought."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "price",
          "seller",
          "buyer"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "ItemPrice",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3420",
        "name": "TipSent",
        "docs": [
          "A tip was sent."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "collection",
          "item",
          "sender",
          "receiver",
          "amount"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId",
          "DepositBalanceOf"
        ]
      },
      {
        "lookup": "3421",
        "name": "SwapCreated",
        "docs": [
          "An `item` swap intent was created."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "option<U32>",
          "option<pallet_nfts:types:PriceWithDirection>",
          "U32"
        ],
        "args_name": [
          "offered_collection",
          "offered_item",
          "desired_collection",
          "desired_item",
          "price",
          "deadline"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "CollectionId",
          "Option<ItemId>",
          "Option<PriceWithDirection<ItemPrice>>",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "3422",
        "name": "SwapCancelled",
        "docs": [
          "The swap was cancelled."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "option<U32>",
          "option<pallet_nfts:types:PriceWithDirection>",
          "U32"
        ],
        "args_name": [
          "offered_collection",
          "offered_item",
          "desired_collection",
          "desired_item",
          "price",
          "deadline"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "CollectionId",
          "Option<ItemId>",
          "Option<PriceWithDirection<ItemPrice>>",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "3423",
        "name": "SwapClaimed",
        "docs": [
          "The swap has been claimed."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "U32",
          "U32",
          "AccountId",
          "option<pallet_nfts:types:PriceWithDirection>",
          "U32"
        ],
        "args_name": [
          "sent_collection",
          "sent_item",
          "sent_item_owner",
          "received_collection",
          "received_item",
          "received_item_owner",
          "price",
          "deadline"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "CollectionId",
          "ItemId",
          "AccountId",
          "Option<PriceWithDirection<ItemPrice>>",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "3424",
        "name": "PreSignedAttributesSet",
        "docs": [
          "New attributes have been set for an `item` of the `collection`."
        ],
        "args": [
          "U32",
          "U32",
          "pallet_nfts:types:AttributeNamespace"
        ],
        "args_name": [
          "collection",
          "item",
          "namespace"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AttributeNamespace<AccountId>"
        ]
      },
      {
        "lookup": "3425",
        "name": "PalletAttributeSet",
        "docs": [
          "A new attribute in the `Pallet` namespace was set for the `collection` or an `item`",
          "within that `collection`."
        ],
        "args": [
          "U32",
          "option<U32>",
          "pallet_nfts:types:PalletAttributes",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "item",
          "attribute",
          "value"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "PalletAttributes<CollectionId>",
          "BoundedVec<u8, ValueLimit>"
        ]
      }
    ],
    "events_value": {
      "type": 138
    },
    "constants": [
      {
        "name": "CollectionDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40f1fb77000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for collection."
        ]
      },
      {
        "name": "ItemDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "10320103000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an item."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "1071ff0b000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your item."
        ]
      },
      {
        "name": "AttributeDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00c2eb0b000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding an attribute to an item."
        ]
      },
      {
        "name": "DepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "a0860100000000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes store in metadata,",
          " either \"normal\" metadata or attribute metadata."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00010000",
        "docs": [
          " The maximum length of data stored on-chain."
        ]
      },
      {
        "name": "KeyLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "40000000",
        "docs": [
          " The maximum length of an attribute key."
        ]
      },
      {
        "name": "ValueLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00010000",
        "docs": [
          " The maximum length of an attribute value."
        ]
      },
      {
        "name": "ApprovalsLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "14000000",
        "docs": [
          " The maximum approvals an item could have."
        ]
      },
      {
        "name": "ItemAttributesApprovalsLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "1e000000",
        "docs": [
          " The maximum attributes approvals an item could have."
        ]
      },
      {
        "name": "MaxTips",
        "type": "U32",
        "type_value": 4,
        "constants_value": "0a000000",
        "docs": [
          " The max number of tips a user could send."
        ]
      },
      {
        "name": "MaxDeadlineDuration",
        "type": "U32",
        "type_value": 4,
        "constants_value": "008d2700",
        "docs": [
          " The max duration in blocks for deadlines."
        ]
      },
      {
        "name": "MaxAttributesPerCall",
        "type": "U32",
        "type_value": 4,
        "constants_value": "0a000000",
        "docs": [
          " The max number of attributes a user could set per call."
        ]
      },
      {
        "name": "Features",
        "type": "U64",
        "type_value": 441,
        "constants_value": "0000000000000000",
        "docs": [
          " Disables some of pallet's features."
        ]
      }
    ],
    "errors": [
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "UnknownCollection",
        "doc": [
          "The given item ID is unknown."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The item ID has already been used for an item."
        ]
      },
      {
        "name": "ApprovalExpired",
        "doc": [
          "The approval had a deadline that expired, so the approval isn't valid anymore."
        ]
      },
      {
        "name": "WrongOwner",
        "doc": [
          "The owner turned out to be different to what was expected."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "The witness data given does not match the current state of the chain."
        ]
      },
      {
        "name": "CollectionIdInUse",
        "doc": [
          "Collection ID is already taken."
        ]
      },
      {
        "name": "ItemsNonTransferable",
        "doc": [
          "Items within that collection are non-transferable."
        ]
      },
      {
        "name": "NotDelegate",
        "doc": [
          "The provided account is not a delegate."
        ]
      },
      {
        "name": "WrongDelegate",
        "doc": [
          "The delegate turned out to be different to what was expected."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      },
      {
        "name": "Unaccepted",
        "doc": [
          "The named owner has not signed ownership acceptance of the collection."
        ]
      },
      {
        "name": "ItemLocked",
        "doc": [
          "The item is locked (non-transferable)."
        ]
      },
      {
        "name": "LockedItemAttributes",
        "doc": [
          "Item's attributes are locked."
        ]
      },
      {
        "name": "LockedCollectionAttributes",
        "doc": [
          "Collection's attributes are locked."
        ]
      },
      {
        "name": "LockedItemMetadata",
        "doc": [
          "Item's metadata is locked."
        ]
      },
      {
        "name": "LockedCollectionMetadata",
        "doc": [
          "Collection's metadata is locked."
        ]
      },
      {
        "name": "MaxSupplyReached",
        "doc": [
          "All items have been minted."
        ]
      },
      {
        "name": "MaxSupplyLocked",
        "doc": [
          "The max supply is locked and can't be changed."
        ]
      },
      {
        "name": "MaxSupplyTooSmall",
        "doc": [
          "The provided max supply is less than the number of items a collection already has."
        ]
      },
      {
        "name": "UnknownItem",
        "doc": [
          "The given item ID is unknown."
        ]
      },
      {
        "name": "UnknownSwap",
        "doc": [
          "Swap doesn't exist."
        ]
      },
      {
        "name": "MetadataNotFound",
        "doc": [
          "The given item has no metadata set."
        ]
      },
      {
        "name": "AttributeNotFound",
        "doc": [
          "The provided attribute can't be found."
        ]
      },
      {
        "name": "NotForSale",
        "doc": [
          "Item is not for sale."
        ]
      },
      {
        "name": "BidTooLow",
        "doc": [
          "The provided bid is too low."
        ]
      },
      {
        "name": "ReachedApprovalLimit",
        "doc": [
          "The item has reached its approval limit."
        ]
      },
      {
        "name": "DeadlineExpired",
        "doc": [
          "The deadline has already expired."
        ]
      },
      {
        "name": "WrongDuration",
        "doc": [
          "The duration provided should be less than or equal to `MaxDeadlineDuration`."
        ]
      },
      {
        "name": "MethodDisabled",
        "doc": [
          "The method is disabled by system settings."
        ]
      },
      {
        "name": "WrongSetting",
        "doc": [
          "The provided setting can't be set."
        ]
      },
      {
        "name": "InconsistentItemConfig",
        "doc": [
          "Item's config already exists and should be equal to the provided one."
        ]
      },
      {
        "name": "NoConfig",
        "doc": [
          "Config for a collection or an item can't be found."
        ]
      },
      {
        "name": "RolesNotCleared",
        "doc": [
          "Some roles were not cleared."
        ]
      },
      {
        "name": "MintNotStarted",
        "doc": [
          "Mint has not started yet."
        ]
      },
      {
        "name": "MintEnded",
        "doc": [
          "Mint has already ended."
        ]
      },
      {
        "name": "AlreadyClaimed",
        "doc": [
          "The provided Item was already used for claiming."
        ]
      },
      {
        "name": "IncorrectData",
        "doc": [
          "The provided data is incorrect."
        ]
      },
      {
        "name": "WrongOrigin",
        "doc": [
          "The extrinsic was sent by the wrong origin."
        ]
      },
      {
        "name": "WrongSignature",
        "doc": [
          "The provided signature is incorrect."
        ]
      },
      {
        "name": "IncorrectMetadata",
        "doc": [
          "The provided metadata might be too long."
        ]
      },
      {
        "name": "MaxAttributesLimitReached",
        "doc": [
          "Can't set more attributes per one call."
        ]
      },
      {
        "name": "WrongNamespace",
        "doc": [
          "The provided namespace isn't supported in this call."
        ]
      },
      {
        "name": "CollectionNotEmpty",
        "doc": [
          "Can't delete non-empty collections."
        ]
      },
      {
        "name": "WitnessRequired",
        "doc": [
          "The witness data should be provided."
        ]
      }
    ],
    "errors_value": {
      "type": 443
    },
    "index": 52
  },
  {
    "name": "ForeignAssets",
    "prefix": "ForeignAssets",
    "storage": [
      {
        "name": "Asset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "staging_xcm:v3:multilocation:MultiLocation"
            ],
            "value": "pallet_assets:types:AssetDetails",
            "keys_id": 37,
            "value_id": 402
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of an asset."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "staging_xcm:v3:multilocation:MultiLocation",
              "AccountId"
            ],
            "value": "pallet_assets:types:AssetAccount",
            "keys_id": 444,
            "value_id": 405
          }
        },
        "fallback": "0x00",
        "docs": [
          " The holdings of a specific account for a specific asset."
        ]
      },
      {
        "name": "Approvals",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "staging_xcm:v3:multilocation:MultiLocation",
              "AccountId",
              "AccountId"
            ],
            "value": "pallet_assets:types:Approval",
            "keys_id": 445,
            "value_id": 409
          }
        },
        "fallback": "0x00",
        "docs": [
          " Approved balance transfers. First balance is the amount approved for transfer. Second",
          " is the amount of `T::Currency` reserved for storing this.",
          " First key is the asset ID, second key is the owner and third key is the delegate."
        ]
      },
      {
        "name": "Metadata",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "staging_xcm:v3:multilocation:MultiLocation"
            ],
            "value": "pallet_assets:types:AssetMetadata@446",
            "keys_id": 37,
            "value_id": 446
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000",
        "docs": [
          " Metadata of an asset."
        ]
      },
      {
        "name": "NextAssetId",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "staging_xcm:v3:multilocation:MultiLocation",
          "PlainTypeValue": 37
        },
        "fallback": "0x00",
        "docs": [
          " The asset ID enforced for the next asset creation, if any present. Otherwise, this storage",
          " item has no effect.",
          "",
          " This can be useful for setting up constraints for IDs of the new assets. For example, by",
          " providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an",
          " auto-increment model can be applied to all new asset IDs.",
          "",
          " The initial next asset ID can be set using the [`GenesisConfig`] or the",
          " [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3500",
        "name": "create",
        "docs": [
          "Issue a new class of fungible assets from a public origin.",
          "",
          "This new asset class has no assets initially and its owner is the origin.",
          "",
          "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
          "",
          "Funds of sender are reserved by `AssetDeposit`.",
          "",
          "Parameters:",
          "- `id`: The identifier of the new asset. This must not be currently in use to identify",
          "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
          "- `admin`: The admin of this class of assets. The admin is the initial address of each",
          "member of the asset class's admin team.",
          "- `min_balance`: The minimum balance of this new asset that any single account must",
          "have. If an account's balance is reduced below this, then it collapses to zero.",
          "",
          "Emits `Created` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "min_balance",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3501",
        "name": "force_create",
        "docs": [
          "Issue a new class of fungible assets from a privileged origin.",
          "",
          "This new asset class has no assets initially.",
          "",
          "The origin must conform to `ForceOrigin`.",
          "",
          "Unlike `create`, no funds are reserved.",
          "",
          "- `id`: The identifier of the new asset. This must not be currently in use to identify",
          "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
          "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
          "over this asset, but may later change and configure the permissions using",
          "`transfer_ownership` and `set_team`.",
          "- `min_balance`: The minimum balance of this new asset that any single account must",
          "have. If an account's balance is reduced below this, then it collapses to zero.",
          "",
          "Emits `ForceCreated` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3502",
        "name": "start_destroy",
        "docs": [
          "Start the process of destroying a fungible asset class.",
          "",
          "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
          "destruction of an asset class.",
          "",
          "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
          "",
          "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
          "  asset.",
          "",
          "The asset class must be frozen before calling `start_destroy`."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3503",
        "name": "destroy_accounts",
        "docs": [
          "Destroy all accounts associated with a given asset.",
          "",
          "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
          "asset is in a `Destroying` state.",
          "",
          "Due to weight restrictions, this function may need to be called multiple times to fully",
          "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
          "",
          "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
          "  asset.",
          "",
          "Each call emits the `Event::DestroyedAccounts` event."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3504",
        "name": "destroy_approvals",
        "docs": [
          "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
          "",
          "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
          "asset is in a `Destroying` state.",
          "",
          "Due to weight restrictions, this function may need to be called multiple times to fully",
          "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
          "",
          "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
          "  asset.",
          "",
          "Each call emits the `Event::DestroyedApprovals` event."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3505",
        "name": "finish_destroy",
        "docs": [
          "Complete destroying asset and unreserve currency.",
          "",
          "`finish_destroy` should only be called after `start_destroy` has been called, and the",
          "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
          "hand.",
          "",
          "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
          "  asset.",
          "",
          "Each successful call emits the `Event::Destroyed` event."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3506",
        "name": "mint",
        "docs": [
          "Mint assets of a particular class.",
          "",
          "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to have some amount minted.",
          "- `beneficiary`: The account to be credited with the minted assets.",
          "- `amount`: The amount of the asset to be minted.",
          "",
          "Emits `Issued` event when successful.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "beneficiary",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3507",
        "name": "burn",
        "docs": [
          "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
          "",
          "Origin must be Signed and the sender should be the Manager of the asset `id`.",
          "",
          "Bails with `NoAccount` if the `who` is already dead.",
          "",
          "- `id`: The identifier of the asset to have some amount burned.",
          "- `who`: The account to be debited from.",
          "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
          "",
          "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
          "minimum for the asset, then the amount burned is increased to take it to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3508",
        "name": "transfer",
        "docs": [
          "Move some assets from the sender account to another.",
          "",
          "Origin must be Signed.",
          "",
          "- `id`: The identifier of the asset to have some amount transferred.",
          "- `target`: The account to be credited.",
          "- `amount`: The amount by which the sender's balance of assets should be reduced and",
          "`target`'s balance increased. The amount actually transferred may be slightly greater in",
          "the case that the transfer would otherwise take the sender balance above zero but below",
          "the minimum balance. Must be greater than zero.",
          "",
          "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
          "to below the minimum for the asset, then the amount transferred is increased to take it",
          "to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
          "`target`."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3509",
        "name": "transfer_keep_alive",
        "docs": [
          "Move some assets from the sender account to another, keeping the sender account alive.",
          "",
          "Origin must be Signed.",
          "",
          "- `id`: The identifier of the asset to have some amount transferred.",
          "- `target`: The account to be credited.",
          "- `amount`: The amount by which the sender's balance of assets should be reduced and",
          "`target`'s balance increased. The amount actually transferred may be slightly greater in",
          "the case that the transfer would otherwise take the sender balance above zero but below",
          "the minimum balance. Must be greater than zero.",
          "",
          "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
          "to below the minimum for the asset, then the amount transferred is increased to take it",
          "to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
          "`target`."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "350a",
        "name": "force_transfer",
        "docs": [
          "Move some assets from one account to another.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to have some amount transferred.",
          "- `source`: The account to be debited.",
          "- `dest`: The account to be credited.",
          "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
          "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
          "the case that the transfer would otherwise take the `source` balance above zero but",
          "below the minimum balance. Must be greater than zero.",
          "",
          "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
          "to below the minimum for the asset, then the amount transferred is increased to take it",
          "to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
          "`dest`."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "source",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "350b",
        "name": "freeze",
        "docs": [
          "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
          "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
          "account that does not have an entry, use `touch_other` first.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "- `who`: The account to be frozen.",
          "",
          "Emits `Frozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "350c",
        "name": "thaw",
        "docs": [
          "Allow unprivileged transfers to and from an account again.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "- `who`: The account to be unfrozen.",
          "",
          "Emits `Thawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "350d",
        "name": "freeze_asset",
        "docs": [
          "Disallow further unprivileged transfers for the asset class.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "",
          "Emits `Frozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "350e",
        "name": "thaw_asset",
        "docs": [
          "Allow unprivileged transfers for the asset again.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be thawed.",
          "",
          "Emits `Thawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "350f",
        "name": "transfer_ownership",
        "docs": [
          "Change the Owner of an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "- `id`: The identifier of the asset.",
          "- `owner`: The new Owner of this asset.",
          "",
          "Emits `OwnerChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3510",
        "name": "set_team",
        "docs": [
          "Change the Issuer, Admin and Freezer of an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "- `issuer`: The new Issuer of this asset.",
          "- `admin`: The new Admin of this asset.",
          "- `freezer`: The new Freezer of this asset.",
          "",
          "Emits `TeamChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3511",
        "name": "set_metadata",
        "docs": [
          "Set the metadata for an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "Funds of sender are reserved according to the formula:",
          "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
          "account any already reserved funds.",
          "",
          "- `id`: The identifier of the asset to update.",
          "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
          "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
          "- `decimals`: The number of decimals this asset uses to represent one unit.",
          "",
          "Emits `MetadataSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          }
        ]
      },
      {
        "lookup": "3512",
        "name": "clear_metadata",
        "docs": [
          "Clear the metadata for an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "Any deposit is freed for the asset owner.",
          "",
          "- `id`: The identifier of the asset to clear.",
          "",
          "Emits `MetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3513",
        "name": "force_set_metadata",
        "docs": [
          "Force the metadata for an asset to some value.",
          "",
          "Origin must be ForceOrigin.",
          "",
          "Any deposit is left alone.",
          "",
          "- `id`: The identifier of the asset to update.",
          "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
          "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
          "- `decimals`: The number of decimals this asset uses to represent one unit.",
          "",
          "Emits `MetadataSet`.",
          "",
          "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3514",
        "name": "force_clear_metadata",
        "docs": [
          "Clear the metadata for an asset.",
          "",
          "Origin must be ForceOrigin.",
          "",
          "Any deposit is returned.",
          "",
          "- `id`: The identifier of the asset to clear.",
          "",
          "Emits `MetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3515",
        "name": "force_asset_status",
        "docs": [
          "Alter the attributes of a given asset.",
          "",
          "Origin must be `ForceOrigin`.",
          "",
          "- `id`: The identifier of the asset.",
          "- `owner`: The new Owner of this asset.",
          "- `issuer`: The new Issuer of this asset.",
          "- `admin`: The new Admin of this asset.",
          "- `freezer`: The new Freezer of this asset.",
          "- `min_balance`: The minimum balance of this new asset that any single account must",
          "have. If an account's balance is reduced below this, then it collapses to zero.",
          "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
          "value to account for the state bloat associated with its balance storage. If set to",
          "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
          "an ED in the Balances pallet or whatever else is used to control user-account state",
          "growth).",
          "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
          "instructions.",
          "",
          "Emits `AssetStatusChanged` with the identity of the asset.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3516",
        "name": "approve_transfer",
        "docs": [
          "Approve an amount of asset for transfer by a delegated third-party account.",
          "",
          "Origin must be Signed.",
          "",
          "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
          "for the purpose of holding the approval. If some non-zero amount of assets is already",
          "approved from signing account to `delegate`, then it is topped up or unreserved to",
          "meet the right value.",
          "",
          "NOTE: The signing account does not need to own `amount` of assets at the point of",
          "making this call.",
          "",
          "- `id`: The identifier of the asset.",
          "- `delegate`: The account to delegate permission to transfer asset.",
          "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
          "already an approval in place, then this acts additively.",
          "",
          "Emits `ApprovedTransfer` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3517",
        "name": "cancel_approval",
        "docs": [
          "Cancel all of some asset approved for delegated transfer by a third-party account.",
          "",
          "Origin must be Signed and there must be an approval in place between signer and",
          "`delegate`.",
          "",
          "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
          "",
          "- `id`: The identifier of the asset.",
          "- `delegate`: The account delegated permission to transfer asset.",
          "",
          "Emits `ApprovalCancelled` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3518",
        "name": "force_cancel_approval",
        "docs": [
          "Cancel all of some asset approved for delegated transfer by a third-party account.",
          "",
          "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
          "account of the asset `id`.",
          "",
          "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
          "",
          "- `id`: The identifier of the asset.",
          "- `delegate`: The account delegated permission to transfer asset.",
          "",
          "Emits `ApprovalCancelled` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3519",
        "name": "transfer_approved",
        "docs": [
          "Transfer some asset balance from a previously delegated account to some third-party",
          "account.",
          "",
          "Origin must be Signed and there must be an approval in place by the `owner` to the",
          "signer.",
          "",
          "If the entire amount approved for transfer is transferred, then any deposit previously",
          "reserved by `approve_transfer` is unreserved.",
          "",
          "- `id`: The identifier of the asset.",
          "- `owner`: The account which previously approved for a transfer of at least `amount` and",
          "from which the asset balance will be withdrawn.",
          "- `destination`: The account to which the asset balance of `amount` will be transferred.",
          "- `amount`: The amount of assets to transfer.",
          "",
          "Emits `TransferredApproved` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "destination",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "351a",
        "name": "touch",
        "docs": [
          "Create an asset account for non-provider assets.",
          "",
          "A deposit will be taken from the signer account.",
          "",
          "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
          "  to be taken.",
          "- `id`: The identifier of the asset for the account to be created.",
          "",
          "Emits `Touched` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "351b",
        "name": "refund",
        "docs": [
          "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
          "account.",
          "",
          "The origin must be Signed.",
          "",
          "- `id`: The identifier of the asset for which the caller would like the deposit",
          "  refunded.",
          "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
          "",
          "Emits `Refunded` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "allow_burn",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "351c",
        "name": "set_min_balance",
        "docs": [
          "Sets the minimum balance of an asset.",
          "",
          "Only works if there aren't any accounts that are holding the asset or if",
          "the new value of `min_balance` is less than the old one.",
          "",
          "Origin must be Signed and the sender has to be the Owner of the",
          "asset `id`.",
          "",
          "- `id`: The identifier of the asset.",
          "- `min_balance`: The new value of `min_balance`.",
          "",
          "Emits `AssetMinBalanceChanged` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "min_balance",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "351d",
        "name": "touch_other",
        "docs": [
          "Create an asset account for `who`.",
          "",
          "A deposit will be taken from the signer account.",
          "",
          "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
          "  must have sufficient funds for a deposit to be taken.",
          "- `id`: The identifier of the asset for the account to be created.",
          "- `who`: The account to be created.",
          "",
          "Emits `Touched` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "351e",
        "name": "refund_other",
        "docs": [
          "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
          "",
          "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
          "order to burn a non-zero balance of the asset, the caller must be the account and should",
          "use `refund`.",
          "",
          "- `id`: The identifier of the asset for the account holding a deposit.",
          "- `who`: The account to refund.",
          "",
          "Emits `Refunded` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "351f",
        "name": "block",
        "docs": [
          "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
          "",
          "- `id`: The identifier of the account's asset.",
          "- `who`: The account to be unblocked.",
          "",
          "Emits `Blocked`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 379
    },
    "events": [
      {
        "lookup": "3500",
        "name": "Created",
        "docs": [
          "Some asset class was created."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3501",
        "name": "Issued",
        "docs": [
          "Some assets were issued."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3502",
        "name": "Transferred",
        "docs": [
          "Some assets were transferred."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3503",
        "name": "Burned",
        "docs": [
          "Some assets were destroyed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "balance"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3504",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3505",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3506",
        "name": "Frozen",
        "docs": [
          "Some account `who` was frozen."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3507",
        "name": "Thawed",
        "docs": [
          "Some account `who` was thawed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3508",
        "name": "AssetFrozen",
        "docs": [
          "Some asset `asset_id` was frozen."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3509",
        "name": "AssetThawed",
        "docs": [
          "Some asset `asset_id` was thawed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "350a",
        "name": "AccountsDestroyed",
        "docs": [
          "Accounts were destroyed for given asset."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "accounts_destroyed",
          "accounts_remaining"
        ],
        "args_type_name": [
          "AssetId",
          "u32",
          "u32"
        ]
      },
      {
        "lookup": "350b",
        "name": "ApprovalsDestroyed",
        "docs": [
          "Approvals were destroyed for given asset."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "approvals_destroyed",
          "approvals_remaining"
        ],
        "args_type_name": [
          "AssetId",
          "u32",
          "u32"
        ]
      },
      {
        "lookup": "350c",
        "name": "DestructionStarted",
        "docs": [
          "An asset class is in the process of being destroyed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "350d",
        "name": "Destroyed",
        "docs": [
          "An asset class was destroyed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "350e",
        "name": "ForceCreated",
        "docs": [
          "Some asset class was force-created."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "350f",
        "name": "MetadataSet",
        "docs": [
          "New metadata has been set for an asset."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "Vec<U8>",
          "Vec<U8>",
          "U8",
          "Bool"
        ],
        "args_name": [
          "asset_id",
          "name",
          "symbol",
          "decimals",
          "is_frozen"
        ],
        "args_type_name": [
          "AssetId",
          "Bytes",
          "Bytes",
          "u8",
          "bool"
        ]
      },
      {
        "lookup": "3510",
        "name": "MetadataCleared",
        "docs": [
          "Metadata has been cleared for an asset."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3511",
        "name": "ApprovedTransfer",
        "docs": [
          "(Additional) funds have been approved for transfer to a destination account."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "source",
          "delegate",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3512",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for account `delegate` was cancelled by `owner`."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3513",
        "name": "TransferredApproved",
        "docs": [
          "An `amount` was transferred in its entirety from `owner` to `destination` by",
          "the approved `delegate`."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate",
          "destination",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3514",
        "name": "AssetStatusChanged",
        "docs": [
          "An asset has had its attributes changed by the `Force` origin."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3515",
        "name": "AssetMinBalanceChanged",
        "docs": [
          "The min_balance of an asset has been updated by the asset owner."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "new_min_balance"
        ],
        "args_type_name": [
          "AssetId",
          "Balance"
        ]
      },
      {
        "lookup": "3516",
        "name": "Touched",
        "docs": [
          "Some account `who` was created with a deposit from `depositor`."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who",
          "depositor"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3517",
        "name": "Blocked",
        "docs": [
          "Some account `who` was blocked."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3518",
        "name": "Deposited",
        "docs": [
          "Some assets were deposited (e.g. for transaction fees)."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3519",
        "name": "Withdrawn",
        "docs": [
          "Some assets were withdrawn from the account (e.g. for transaction fees)."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 145
    },
    "constants": [
      {
        "name": "RemoveItemsLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "e8030000",
        "docs": [
          " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
          "",
          " Must be configured to result in a weight that makes each call fit in a block."
        ]
      },
      {
        "name": "AssetDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "c07e5778000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an asset."
        ]
      },
      {
        "name": "AssetAccountDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00fe4d77000000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved for a non-provider asset account to be",
          " maintained."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "80569d77000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your asset."
        ]
      },
      {
        "name": "MetadataDepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "a0860100000000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes you store in your",
          " metadata."
        ]
      },
      {
        "name": "ApprovalDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e1f505000000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved when creating a new approval."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum length of a name or symbol stored on-chain."
        ]
      }
    ],
    "errors": [
      {
        "name": "BalanceLow",
        "doc": [
          "Account balance must be greater than or equal to the transfer amount."
        ]
      },
      {
        "name": "NoAccount",
        "doc": [
          "The account to alter does not exist."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "Unknown",
        "doc": [
          "The given asset ID is unknown."
        ]
      },
      {
        "name": "Frozen",
        "doc": [
          "The origin account is frozen."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The asset ID is already taken."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "Invalid witness data given."
        ]
      },
      {
        "name": "MinBalanceZero",
        "doc": [
          "Minimum balance should be non-zero."
        ]
      },
      {
        "name": "UnavailableConsumer",
        "doc": [
          "Unable to increment the consumer reference counters on the account. Either no provider",
          "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
          "fewer then the maximum number of consumers has been reached."
        ]
      },
      {
        "name": "BadMetadata",
        "doc": [
          "Invalid metadata given."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      },
      {
        "name": "WouldDie",
        "doc": [
          "The source account would not survive the transfer and it needs to stay alive."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The asset-account already exists."
        ]
      },
      {
        "name": "NoDeposit",
        "doc": [
          "The asset-account doesn't have an associated deposit."
        ]
      },
      {
        "name": "WouldBurn",
        "doc": [
          "The operation would result in funds being burned."
        ]
      },
      {
        "name": "LiveAsset",
        "doc": [
          "The asset is a live asset and is actively being used. Usually emit for operations such",
          "as `start_destroy` which require the asset to be in a destroying state."
        ]
      },
      {
        "name": "AssetNotLive",
        "doc": [
          "The asset is not live, and likely being destroyed."
        ]
      },
      {
        "name": "IncorrectStatus",
        "doc": [
          "The asset status is not the expected status."
        ]
      },
      {
        "name": "NotFrozen",
        "doc": [
          "The asset should be frozen before the given operation."
        ]
      },
      {
        "name": "CallbackFailed",
        "doc": [
          "Callback action resulted in error"
        ]
      },
      {
        "name": "BadAssetId",
        "doc": [
          "The asset ID must be equal to the [`NextAssetId`]."
        ]
      }
    ],
    "errors_value": {
      "type": 448
    },
    "index": 53
  },
  {
    "name": "PoolAssets",
    "prefix": "PoolAssets",
    "storage": [
      {
        "name": "Asset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_assets:types:AssetDetails",
            "keys_id": 4,
            "value_id": 402
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of an asset."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId"
            ],
            "value": "pallet_assets:types:AssetAccount",
            "keys_id": 404,
            "value_id": 405
          }
        },
        "fallback": "0x00",
        "docs": [
          " The holdings of a specific account for a specific asset."
        ]
      },
      {
        "name": "Approvals",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId",
              "AccountId"
            ],
            "value": "pallet_assets:types:Approval",
            "keys_id": 408,
            "value_id": 409
          }
        },
        "fallback": "0x00",
        "docs": [
          " Approved balance transfers. First balance is the amount approved for transfer. Second",
          " is the amount of `T::Currency` reserved for storing this.",
          " First key is the asset ID, second key is the owner and third key is the delegate."
        ]
      },
      {
        "name": "Metadata",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_assets:types:AssetMetadata@449",
            "keys_id": 4,
            "value_id": 449
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000",
        "docs": [
          " Metadata of an asset."
        ]
      },
      {
        "name": "NextAssetId",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " The asset ID enforced for the next asset creation, if any present. Otherwise, this storage",
          " item has no effect.",
          "",
          " This can be useful for setting up constraints for IDs of the new assets. For example, by",
          " providing an initial [`NextAssetId`] and using the [`crate::AutoIncAssetId`] callback, an",
          " auto-increment model can be applied to all new asset IDs.",
          "",
          " The initial next asset ID can be set using the [`GenesisConfig`] or the",
          " [SetNextAssetId](`migration::next_asset_id::SetNextAssetId`) migration."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3600",
        "name": "create",
        "docs": [
          "Issue a new class of fungible assets from a public origin.",
          "",
          "This new asset class has no assets initially and its owner is the origin.",
          "",
          "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
          "",
          "Funds of sender are reserved by `AssetDeposit`.",
          "",
          "Parameters:",
          "- `id`: The identifier of the new asset. This must not be currently in use to identify",
          "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
          "- `admin`: The admin of this class of assets. The admin is the initial address of each",
          "member of the asset class's admin team.",
          "- `min_balance`: The minimum balance of this new asset that any single account must",
          "have. If an account's balance is reduced below this, then it collapses to zero.",
          "",
          "Emits `Created` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "min_balance",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3601",
        "name": "force_create",
        "docs": [
          "Issue a new class of fungible assets from a privileged origin.",
          "",
          "This new asset class has no assets initially.",
          "",
          "The origin must conform to `ForceOrigin`.",
          "",
          "Unlike `create`, no funds are reserved.",
          "",
          "- `id`: The identifier of the new asset. This must not be currently in use to identify",
          "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
          "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
          "over this asset, but may later change and configure the permissions using",
          "`transfer_ownership` and `set_team`.",
          "- `min_balance`: The minimum balance of this new asset that any single account must",
          "have. If an account's balance is reduced below this, then it collapses to zero.",
          "",
          "Emits `ForceCreated` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3602",
        "name": "start_destroy",
        "docs": [
          "Start the process of destroying a fungible asset class.",
          "",
          "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
          "destruction of an asset class.",
          "",
          "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
          "",
          "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
          "  asset.",
          "",
          "The asset class must be frozen before calling `start_destroy`."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3603",
        "name": "destroy_accounts",
        "docs": [
          "Destroy all accounts associated with a given asset.",
          "",
          "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
          "asset is in a `Destroying` state.",
          "",
          "Due to weight restrictions, this function may need to be called multiple times to fully",
          "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
          "",
          "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
          "  asset.",
          "",
          "Each call emits the `Event::DestroyedAccounts` event."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3604",
        "name": "destroy_approvals",
        "docs": [
          "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
          "",
          "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
          "asset is in a `Destroying` state.",
          "",
          "Due to weight restrictions, this function may need to be called multiple times to fully",
          "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
          "",
          "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
          "  asset.",
          "",
          "Each call emits the `Event::DestroyedApprovals` event."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3605",
        "name": "finish_destroy",
        "docs": [
          "Complete destroying asset and unreserve currency.",
          "",
          "`finish_destroy` should only be called after `start_destroy` has been called, and the",
          "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
          "hand.",
          "",
          "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
          "  asset.",
          "",
          "Each successful call emits the `Event::Destroyed` event."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3606",
        "name": "mint",
        "docs": [
          "Mint assets of a particular class.",
          "",
          "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to have some amount minted.",
          "- `beneficiary`: The account to be credited with the minted assets.",
          "- `amount`: The amount of the asset to be minted.",
          "",
          "Emits `Issued` event when successful.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "beneficiary",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3607",
        "name": "burn",
        "docs": [
          "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
          "",
          "Origin must be Signed and the sender should be the Manager of the asset `id`.",
          "",
          "Bails with `NoAccount` if the `who` is already dead.",
          "",
          "- `id`: The identifier of the asset to have some amount burned.",
          "- `who`: The account to be debited from.",
          "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
          "",
          "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
          "minimum for the asset, then the amount burned is increased to take it to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3608",
        "name": "transfer",
        "docs": [
          "Move some assets from the sender account to another.",
          "",
          "Origin must be Signed.",
          "",
          "- `id`: The identifier of the asset to have some amount transferred.",
          "- `target`: The account to be credited.",
          "- `amount`: The amount by which the sender's balance of assets should be reduced and",
          "`target`'s balance increased. The amount actually transferred may be slightly greater in",
          "the case that the transfer would otherwise take the sender balance above zero but below",
          "the minimum balance. Must be greater than zero.",
          "",
          "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
          "to below the minimum for the asset, then the amount transferred is increased to take it",
          "to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
          "`target`."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3609",
        "name": "transfer_keep_alive",
        "docs": [
          "Move some assets from the sender account to another, keeping the sender account alive.",
          "",
          "Origin must be Signed.",
          "",
          "- `id`: The identifier of the asset to have some amount transferred.",
          "- `target`: The account to be credited.",
          "- `amount`: The amount by which the sender's balance of assets should be reduced and",
          "`target`'s balance increased. The amount actually transferred may be slightly greater in",
          "the case that the transfer would otherwise take the sender balance above zero but below",
          "the minimum balance. Must be greater than zero.",
          "",
          "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
          "to below the minimum for the asset, then the amount transferred is increased to take it",
          "to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
          "`target`."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "target",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "360a",
        "name": "force_transfer",
        "docs": [
          "Move some assets from one account to another.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to have some amount transferred.",
          "- `source`: The account to be debited.",
          "- `dest`: The account to be credited.",
          "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
          "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
          "the case that the transfer would otherwise take the `source` balance above zero but",
          "below the minimum balance. Must be greater than zero.",
          "",
          "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
          "to below the minimum for the asset, then the amount transferred is increased to take it",
          "to zero.",
          "",
          "Weight: `O(1)`",
          "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
          "`dest`."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "source",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "dest",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "360b",
        "name": "freeze",
        "docs": [
          "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
          "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
          "account that does not have an entry, use `touch_other` first.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "- `who`: The account to be frozen.",
          "",
          "Emits `Frozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "360c",
        "name": "thaw",
        "docs": [
          "Allow unprivileged transfers to and from an account again.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "- `who`: The account to be unfrozen.",
          "",
          "Emits `Thawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "360d",
        "name": "freeze_asset",
        "docs": [
          "Disallow further unprivileged transfers for the asset class.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "",
          "Emits `Frozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "360e",
        "name": "thaw_asset",
        "docs": [
          "Allow unprivileged transfers for the asset again.",
          "",
          "Origin must be Signed and the sender should be the Admin of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be thawed.",
          "",
          "Emits `Thawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "360f",
        "name": "transfer_ownership",
        "docs": [
          "Change the Owner of an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "- `id`: The identifier of the asset.",
          "- `owner`: The new Owner of this asset.",
          "",
          "Emits `OwnerChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3610",
        "name": "set_team",
        "docs": [
          "Change the Issuer, Admin and Freezer of an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "- `id`: The identifier of the asset to be frozen.",
          "- `issuer`: The new Issuer of this asset.",
          "- `admin`: The new Admin of this asset.",
          "- `freezer`: The new Freezer of this asset.",
          "",
          "Emits `TeamChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3611",
        "name": "set_metadata",
        "docs": [
          "Set the metadata for an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "Funds of sender are reserved according to the formula:",
          "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
          "account any already reserved funds.",
          "",
          "- `id`: The identifier of the asset to update.",
          "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
          "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
          "- `decimals`: The number of decimals this asset uses to represent one unit.",
          "",
          "Emits `MetadataSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          }
        ]
      },
      {
        "lookup": "3612",
        "name": "clear_metadata",
        "docs": [
          "Clear the metadata for an asset.",
          "",
          "Origin must be Signed and the sender should be the Owner of the asset `id`.",
          "",
          "Any deposit is freed for the asset owner.",
          "",
          "- `id`: The identifier of the asset to clear.",
          "",
          "Emits `MetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3613",
        "name": "force_set_metadata",
        "docs": [
          "Force the metadata for an asset to some value.",
          "",
          "Origin must be ForceOrigin.",
          "",
          "Any deposit is left alone.",
          "",
          "- `id`: The identifier of the asset to update.",
          "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
          "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
          "- `decimals`: The number of decimals this asset uses to represent one unit.",
          "",
          "Emits `MetadataSet`.",
          "",
          "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3614",
        "name": "force_clear_metadata",
        "docs": [
          "Clear the metadata for an asset.",
          "",
          "Origin must be ForceOrigin.",
          "",
          "Any deposit is returned.",
          "",
          "- `id`: The identifier of the asset to clear.",
          "",
          "Emits `MetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "3615",
        "name": "force_asset_status",
        "docs": [
          "Alter the attributes of a given asset.",
          "",
          "Origin must be `ForceOrigin`.",
          "",
          "- `id`: The identifier of the asset.",
          "- `owner`: The new Owner of this asset.",
          "- `issuer`: The new Issuer of this asset.",
          "- `admin`: The new Admin of this asset.",
          "- `freezer`: The new Freezer of this asset.",
          "- `min_balance`: The minimum balance of this new asset that any single account must",
          "have. If an account's balance is reduced below this, then it collapses to zero.",
          "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
          "value to account for the state bloat associated with its balance storage. If set to",
          "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
          "an ED in the Balances pallet or whatever else is used to control user-account state",
          "growth).",
          "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
          "instructions.",
          "",
          "Emits `AssetStatusChanged` with the identity of the asset.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "issuer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "min_balance",
            "type": "compact<U128>",
            "type_name": "Balance"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3616",
        "name": "approve_transfer",
        "docs": [
          "Approve an amount of asset for transfer by a delegated third-party account.",
          "",
          "Origin must be Signed.",
          "",
          "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
          "for the purpose of holding the approval. If some non-zero amount of assets is already",
          "approved from signing account to `delegate`, then it is topped up or unreserved to",
          "meet the right value.",
          "",
          "NOTE: The signing account does not need to own `amount` of assets at the point of",
          "making this call.",
          "",
          "- `id`: The identifier of the asset.",
          "- `delegate`: The account to delegate permission to transfer asset.",
          "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
          "already an approval in place, then this acts additively.",
          "",
          "Emits `ApprovedTransfer` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3617",
        "name": "cancel_approval",
        "docs": [
          "Cancel all of some asset approved for delegated transfer by a third-party account.",
          "",
          "Origin must be Signed and there must be an approval in place between signer and",
          "`delegate`.",
          "",
          "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
          "",
          "- `id`: The identifier of the asset.",
          "- `delegate`: The account delegated permission to transfer asset.",
          "",
          "Emits `ApprovalCancelled` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3618",
        "name": "force_cancel_approval",
        "docs": [
          "Cancel all of some asset approved for delegated transfer by a third-party account.",
          "",
          "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
          "account of the asset `id`.",
          "",
          "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
          "",
          "- `id`: The identifier of the asset.",
          "- `delegate`: The account delegated permission to transfer asset.",
          "",
          "Emits `ApprovalCancelled` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "delegate",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "3619",
        "name": "transfer_approved",
        "docs": [
          "Transfer some asset balance from a previously delegated account to some third-party",
          "account.",
          "",
          "Origin must be Signed and there must be an approval in place by the `owner` to the",
          "signer.",
          "",
          "If the entire amount approved for transfer is transferred, then any deposit previously",
          "reserved by `approve_transfer` is unreserved.",
          "",
          "- `id`: The identifier of the asset.",
          "- `owner`: The account which previously approved for a transfer of at least `amount` and",
          "from which the asset balance will be withdrawn.",
          "- `destination`: The account to which the asset balance of `amount` will be transferred.",
          "- `amount`: The amount of assets to transfer.",
          "",
          "Emits `TransferredApproved` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "owner",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "destination",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "361a",
        "name": "touch",
        "docs": [
          "Create an asset account for non-provider assets.",
          "",
          "A deposit will be taken from the signer account.",
          "",
          "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
          "  to be taken.",
          "- `id`: The identifier of the asset for the account to be created.",
          "",
          "Emits `Touched` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          }
        ]
      },
      {
        "lookup": "361b",
        "name": "refund",
        "docs": [
          "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
          "account.",
          "",
          "The origin must be Signed.",
          "",
          "- `id`: The identifier of the asset for which the caller would like the deposit",
          "  refunded.",
          "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
          "",
          "Emits `Refunded` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "allow_burn",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "361c",
        "name": "set_min_balance",
        "docs": [
          "Sets the minimum balance of an asset.",
          "",
          "Only works if there aren't any accounts that are holding the asset or if",
          "the new value of `min_balance` is less than the old one.",
          "",
          "Origin must be Signed and the sender has to be the Owner of the",
          "asset `id`.",
          "",
          "- `id`: The identifier of the asset.",
          "- `min_balance`: The new value of `min_balance`.",
          "",
          "Emits `AssetMinBalanceChanged` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "min_balance",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "361d",
        "name": "touch_other",
        "docs": [
          "Create an asset account for `who`.",
          "",
          "A deposit will be taken from the signer account.",
          "",
          "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
          "  must have sufficient funds for a deposit to be taken.",
          "- `id`: The identifier of the asset for the account to be created.",
          "- `who`: The account to be created.",
          "",
          "Emits `Touched` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "361e",
        "name": "refund_other",
        "docs": [
          "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
          "",
          "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
          "order to burn a non-zero balance of the asset, the caller must be the account and should",
          "use `refund`.",
          "",
          "- `id`: The identifier of the asset for the account holding a deposit.",
          "- `who`: The account to refund.",
          "",
          "Emits `Refunded` event when successful."
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "361f",
        "name": "block",
        "docs": [
          "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
          "",
          "- `id`: The identifier of the account's asset.",
          "- `who`: The account to be unblocked.",
          "",
          "Emits `Blocked`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "id",
            "type": "U32",
            "type_name": "AssetIdParameter"
          },
          {
            "name": "who",
            "type": "sp_runtime:multiaddress:MultiAddress",
            "type_name": "AccountIdLookupOf"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 380
    },
    "events": [
      {
        "lookup": "3600",
        "name": "Created",
        "docs": [
          "Some asset class was created."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3601",
        "name": "Issued",
        "docs": [
          "Some assets were issued."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3602",
        "name": "Transferred",
        "docs": [
          "Some assets were transferred."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3603",
        "name": "Burned",
        "docs": [
          "Some assets were destroyed."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "balance"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3604",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3605",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3606",
        "name": "Frozen",
        "docs": [
          "Some account `who` was frozen."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3607",
        "name": "Thawed",
        "docs": [
          "Some account `who` was thawed."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3608",
        "name": "AssetFrozen",
        "docs": [
          "Some asset `asset_id` was frozen."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3609",
        "name": "AssetThawed",
        "docs": [
          "Some asset `asset_id` was thawed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "360a",
        "name": "AccountsDestroyed",
        "docs": [
          "Accounts were destroyed for given asset."
        ],
        "args": [
          "U32",
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "accounts_destroyed",
          "accounts_remaining"
        ],
        "args_type_name": [
          "AssetId",
          "u32",
          "u32"
        ]
      },
      {
        "lookup": "360b",
        "name": "ApprovalsDestroyed",
        "docs": [
          "Approvals were destroyed for given asset."
        ],
        "args": [
          "U32",
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "approvals_destroyed",
          "approvals_remaining"
        ],
        "args_type_name": [
          "AssetId",
          "u32",
          "u32"
        ]
      },
      {
        "lookup": "360c",
        "name": "DestructionStarted",
        "docs": [
          "An asset class is in the process of being destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "360d",
        "name": "Destroyed",
        "docs": [
          "An asset class was destroyed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "360e",
        "name": "ForceCreated",
        "docs": [
          "Some asset class was force-created."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "360f",
        "name": "MetadataSet",
        "docs": [
          "New metadata has been set for an asset."
        ],
        "args": [
          "U32",
          "Vec<U8>",
          "Vec<U8>",
          "U8",
          "Bool"
        ],
        "args_name": [
          "asset_id",
          "name",
          "symbol",
          "decimals",
          "is_frozen"
        ],
        "args_type_name": [
          "AssetId",
          "Bytes",
          "Bytes",
          "u8",
          "bool"
        ]
      },
      {
        "lookup": "3610",
        "name": "MetadataCleared",
        "docs": [
          "Metadata has been cleared for an asset."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3611",
        "name": "ApprovedTransfer",
        "docs": [
          "(Additional) funds have been approved for transfer to a destination account."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "source",
          "delegate",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3612",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for account `delegate` was cancelled by `owner`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3613",
        "name": "TransferredApproved",
        "docs": [
          "An `amount` was transferred in its entirety from `owner` to `destination` by",
          "the approved `delegate`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "owner",
          "delegate",
          "destination",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3614",
        "name": "AssetStatusChanged",
        "docs": [
          "An asset has had its attributes changed by the `Force` origin."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3615",
        "name": "AssetMinBalanceChanged",
        "docs": [
          "The min_balance of an asset has been updated by the asset owner."
        ],
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "new_min_balance"
        ],
        "args_type_name": [
          "AssetId",
          "Balance"
        ]
      },
      {
        "lookup": "3616",
        "name": "Touched",
        "docs": [
          "Some account `who` was created with a deposit from `depositor`."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who",
          "depositor"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "3617",
        "name": "Blocked",
        "docs": [
          "Some account `who` was blocked."
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3618",
        "name": "Deposited",
        "docs": [
          "Some assets were deposited (e.g. for transaction fees)."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3619",
        "name": "Withdrawn",
        "docs": [
          "Some assets were withdrawn from the account (e.g. for transaction fees)."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 146
    },
    "constants": [
      {
        "name": "RemoveItemsLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "e8030000",
        "docs": [
          " Max number of items to destroy per `destroy_accounts` and `destroy_approvals` call.",
          "",
          " Must be configured to result in a weight that makes each call fit in a block."
        ]
      },
      {
        "name": "AssetDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00000000000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an asset."
        ]
      },
      {
        "name": "AssetAccountDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00fe4d77000000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved for a non-provider asset account to be",
          " maintained."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00000000000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your asset."
        ]
      },
      {
        "name": "MetadataDepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00000000000000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes you store in your",
          " metadata."
        ]
      },
      {
        "name": "ApprovalDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e1f505000000000000000000000000",
        "docs": [
          " The amount of funds that must be reserved when creating a new approval."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum length of a name or symbol stored on-chain."
        ]
      }
    ],
    "errors": [
      {
        "name": "BalanceLow",
        "doc": [
          "Account balance must be greater than or equal to the transfer amount."
        ]
      },
      {
        "name": "NoAccount",
        "doc": [
          "The account to alter does not exist."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "Unknown",
        "doc": [
          "The given asset ID is unknown."
        ]
      },
      {
        "name": "Frozen",
        "doc": [
          "The origin account is frozen."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The asset ID is already taken."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "Invalid witness data given."
        ]
      },
      {
        "name": "MinBalanceZero",
        "doc": [
          "Minimum balance should be non-zero."
        ]
      },
      {
        "name": "UnavailableConsumer",
        "doc": [
          "Unable to increment the consumer reference counters on the account. Either no provider",
          "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
          "fewer then the maximum number of consumers has been reached."
        ]
      },
      {
        "name": "BadMetadata",
        "doc": [
          "Invalid metadata given."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      },
      {
        "name": "WouldDie",
        "doc": [
          "The source account would not survive the transfer and it needs to stay alive."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The asset-account already exists."
        ]
      },
      {
        "name": "NoDeposit",
        "doc": [
          "The asset-account doesn't have an associated deposit."
        ]
      },
      {
        "name": "WouldBurn",
        "doc": [
          "The operation would result in funds being burned."
        ]
      },
      {
        "name": "LiveAsset",
        "doc": [
          "The asset is a live asset and is actively being used. Usually emit for operations such",
          "as `start_destroy` which require the asset to be in a destroying state."
        ]
      },
      {
        "name": "AssetNotLive",
        "doc": [
          "The asset is not live, and likely being destroyed."
        ]
      },
      {
        "name": "IncorrectStatus",
        "doc": [
          "The asset status is not the expected status."
        ]
      },
      {
        "name": "NotFrozen",
        "doc": [
          "The asset should be frozen before the given operation."
        ]
      },
      {
        "name": "CallbackFailed",
        "doc": [
          "Callback action resulted in error"
        ]
      },
      {
        "name": "BadAssetId",
        "doc": [
          "The asset ID must be equal to the [`NextAssetId`]."
        ]
      }
    ],
    "errors_value": {
      "type": 451
    },
    "index": 54
  },
  {
    "name": "AssetConversion",
    "prefix": "AssetConversion",
    "storage": [
      {
        "name": "Pools",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "Tuple:staging_xcm:v3:multilocation:MultiLocationstaging_xcm:v3:multilocation:MultiLocation"
            ],
            "value": "U32",
            "keys_id": 148,
            "value_id": 452
          }
        },
        "fallback": "0x00",
        "docs": [
          " Map from `PoolAssetId` to `PoolInfo`. This establishes whether a pool has been officially",
          " created rather than people sending tokens directly to a pool's public account."
        ]
      },
      {
        "name": "NextPoolAssetId",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Stores the `PoolAssetId` that is going to be used for the next lp token.",
          " This gets incremented whenever a new lp pool is created."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3700",
        "name": "create_pool",
        "docs": [
          "Creates an empty liquidity pool and an associated new `lp_token` asset",
          "(the id of which is returned in the `Event::PoolCreated` event).",
          "",
          "Once a pool is created, someone may [`Pallet::add_liquidity`] to it."
        ],
        "args": [
          {
            "name": "asset1",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          },
          {
            "name": "asset2",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          }
        ]
      },
      {
        "lookup": "3701",
        "name": "add_liquidity",
        "docs": [
          "Provide liquidity into the pool of `asset1` and `asset2`.",
          "NOTE: an optimal amount of asset1 and asset2 will be calculated and",
          "might be different than the provided `amount1_desired`/`amount2_desired`",
          "thus you should provide the min amount you're happy to provide.",
          "Params `amount1_min`/`amount2_min` represent that.",
          "`mint_to` will be sent the liquidity tokens that represent this share of the pool.",
          "",
          "NOTE: when encountering an incorrect exchange rate and non-withdrawable pool liquidity,",
          "batch an atomic call with [`Pallet::add_liquidity`] and",
          "[`Pallet::swap_exact_tokens_for_tokens`] or [`Pallet::swap_tokens_for_exact_tokens`]",
          "calls to render the liquidity withdrawable and rectify the exchange rate.",
          "",
          "Once liquidity is added, someone may successfully call",
          "[`Pallet::swap_exact_tokens_for_tokens`] successfully."
        ],
        "args": [
          {
            "name": "asset1",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          },
          {
            "name": "asset2",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          },
          {
            "name": "amount1_desired",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount2_desired",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount1_min",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount2_min",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "mint_to",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3702",
        "name": "remove_liquidity",
        "docs": [
          "Allows you to remove liquidity by providing the `lp_token_burn` tokens that will be",
          "burned in the process. With the usage of `amount1_min_receive`/`amount2_min_receive`",
          "it's possible to control the min amount of returned tokens you're happy with."
        ],
        "args": [
          {
            "name": "asset1",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          },
          {
            "name": "asset2",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          },
          {
            "name": "lp_token_burn",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount1_min_receive",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount2_min_receive",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "withdraw_to",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3703",
        "name": "swap_exact_tokens_for_tokens",
        "docs": [
          "Swap the exact amount of `asset1` into `asset2`.",
          "`amount_out_min` param allows you to specify the min amount of the `asset2`",
          "you're happy to receive.",
          "",
          "[`AssetConversionApi::quote_price_exact_tokens_for_tokens`] runtime call can be called",
          "for a quote."
        ],
        "args": [
          {
            "name": "path",
            "type": "Vec<staging_xcm:v3:multilocation:MultiLocation>",
            "type_name": "Vec<Box<AssetKind>>"
          },
          {
            "name": "amount_in",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount_out_min",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "send_to",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "keep_alive",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3704",
        "name": "swap_tokens_for_exact_tokens",
        "docs": [
          "Swap any amount of `asset1` to get the exact amount of `asset2`.",
          "`amount_in_max` param allows to specify the max amount of the `asset1`",
          "you're happy to provide.",
          "",
          "[`AssetConversionApi::quote_price_tokens_for_exact_tokens`] runtime call can be called",
          "for a quote."
        ],
        "args": [
          {
            "name": "path",
            "type": "Vec<staging_xcm:v3:multilocation:MultiLocation>",
            "type_name": "Vec<Box<AssetKind>>"
          },
          {
            "name": "amount_out",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount_in_max",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "send_to",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "keep_alive",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3705",
        "name": "touch",
        "docs": [
          "Touch an existing pool to fulfill prerequisites before providing liquidity, such as",
          "ensuring that the pool's accounts are in place. It is typically useful when a pool",
          "creator removes the pool's accounts and does not provide a liquidity. This action may",
          "involve holding assets from the caller as a deposit for creating the pool's accounts.",
          "",
          "The origin must be Signed.",
          "",
          "- `asset1`: The asset ID of an existing pool with a pair (asset1, asset2).",
          "- `asset2`: The asset ID of an existing pool with a pair (asset1, asset2).",
          "",
          "Emits `Touched` event when successful."
        ],
        "args": [
          {
            "name": "asset1",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          },
          {
            "name": "asset2",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<AssetKind>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 381
    },
    "events": [
      {
        "lookup": "3700",
        "name": "PoolCreated",
        "docs": [
          "A successful call of the `CreatePool` extrinsic will create this event."
        ],
        "args": [
          "AccountId",
          "Tuple:staging_xcm:v3:multilocation:MultiLocationstaging_xcm:v3:multilocation:MultiLocation",
          "AccountId",
          "U32"
        ],
        "args_name": [
          "creator",
          "pool_id",
          "pool_account",
          "lp_token"
        ],
        "args_type_name": [
          "AccountId",
          "PoolId",
          "AccountId",
          "PoolAssetId"
        ]
      },
      {
        "lookup": "3701",
        "name": "LiquidityAdded",
        "docs": [
          "A successful call of the `AddLiquidity` extrinsic will create this event."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "Tuple:staging_xcm:v3:multilocation:MultiLocationstaging_xcm:v3:multilocation:MultiLocation",
          "U128",
          "U128",
          "U32",
          "U128"
        ],
        "args_name": [
          "who",
          "mint_to",
          "pool_id",
          "amount1_provided",
          "amount2_provided",
          "lp_token",
          "lp_token_minted"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "PoolId",
          "Balance",
          "Balance",
          "PoolAssetId",
          "Balance"
        ]
      },
      {
        "lookup": "3702",
        "name": "LiquidityRemoved",
        "docs": [
          "A successful call of the `RemoveLiquidity` extrinsic will create this event."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "Tuple:staging_xcm:v3:multilocation:MultiLocationstaging_xcm:v3:multilocation:MultiLocation",
          "U128",
          "U128",
          "U32",
          "U128",
          "U32"
        ],
        "args_name": [
          "who",
          "withdraw_to",
          "pool_id",
          "amount1",
          "amount2",
          "lp_token",
          "lp_token_burned",
          "withdrawal_fee"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "PoolId",
          "Balance",
          "Balance",
          "PoolAssetId",
          "Balance",
          "Permill"
        ]
      },
      {
        "lookup": "3703",
        "name": "SwapExecuted",
        "docs": [
          "Assets have been converted from one to another. Both `SwapExactTokenForToken`",
          "and `SwapTokenForExactToken` will generate this event."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128",
          "U128",
          "Vec<Tuple:staging_xcm:v3:multilocation:MultiLocationU128>"
        ],
        "args_name": [
          "who",
          "send_to",
          "amount_in",
          "amount_out",
          "path"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "Balance",
          "Balance",
          "BalancePath"
        ]
      },
      {
        "lookup": "3704",
        "name": "SwapCreditExecuted",
        "docs": [
          "Assets have been converted from one to another."
        ],
        "args": [
          "U128",
          "U128",
          "Vec<Tuple:staging_xcm:v3:multilocation:MultiLocationU128>"
        ],
        "args_name": [
          "amount_in",
          "amount_out",
          "path"
        ],
        "args_type_name": [
          "Balance",
          "Balance",
          "BalancePath"
        ]
      },
      {
        "lookup": "3705",
        "name": "Touched",
        "docs": [
          "Pool has been touched in order to fulfill operational requirements."
        ],
        "args": [
          "Tuple:staging_xcm:v3:multilocation:MultiLocationstaging_xcm:v3:multilocation:MultiLocation",
          "AccountId"
        ],
        "args_name": [
          "pool_id",
          "who"
        ],
        "args_type_name": [
          "PoolId",
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 147
    },
    "constants": [
      {
        "name": "LPFee",
        "type": "U32",
        "type_value": 4,
        "constants_value": "03000000",
        "docs": [
          " A % the liquidity providers will take of every swap. Represents 10ths of a percent."
        ]
      },
      {
        "name": "PoolSetupFee",
        "type": "U128",
        "type_value": 6,
        "constants_value": "402d93ef000000000000000000000000",
        "docs": [
          " A one-time fee to setup the pool."
        ]
      },
      {
        "name": "PoolSetupFeeAsset",
        "type": "staging_xcm:v3:multilocation:MultiLocation",
        "type_value": 37,
        "constants_value": "0100",
        "docs": [
          " Asset class from [`Config::Assets`] used to pay the [`Config::PoolSetupFee`]."
        ]
      },
      {
        "name": "LiquidityWithdrawalFee",
        "type": "U32",
        "type_value": 149,
        "constants_value": "00000000",
        "docs": [
          " A fee to withdraw the liquidity."
        ]
      },
      {
        "name": "MintMinLiquidity",
        "type": "U128",
        "type_value": 6,
        "constants_value": "64000000000000000000000000000000",
        "docs": [
          " The minimum LP token amount that could be minted. Ameliorates rounding errors."
        ]
      },
      {
        "name": "MaxSwapPathLength",
        "type": "U32",
        "type_value": 4,
        "constants_value": "03000000",
        "docs": [
          " The max number of hops in a swap."
        ]
      },
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 453,
        "constants_value": "70792f6173636f6e",
        "docs": [
          " The pallet's id, used for deriving its sovereign account ID."
        ]
      }
    ],
    "errors": [
      {
        "name": "InvalidAssetPair",
        "doc": [
          "Provided asset pair is not supported for pool."
        ]
      },
      {
        "name": "PoolExists",
        "doc": [
          "Pool already exists."
        ]
      },
      {
        "name": "WrongDesiredAmount",
        "doc": [
          "Desired amount can't be zero."
        ]
      },
      {
        "name": "AmountOneLessThanMinimal",
        "doc": [
          "Provided amount should be greater than or equal to the existential deposit/asset's",
          "minimal amount."
        ]
      },
      {
        "name": "AmountTwoLessThanMinimal",
        "doc": [
          "Provided amount should be greater than or equal to the existential deposit/asset's",
          "minimal amount."
        ]
      },
      {
        "name": "ReserveLeftLessThanMinimal",
        "doc": [
          "Reserve needs to always be greater than or equal to the existential deposit/asset's",
          "minimal amount."
        ]
      },
      {
        "name": "AmountOutTooHigh",
        "doc": [
          "Desired amount can't be equal to the pool reserve."
        ]
      },
      {
        "name": "PoolNotFound",
        "doc": [
          "The pool doesn't exist."
        ]
      },
      {
        "name": "Overflow",
        "doc": [
          "An overflow happened."
        ]
      },
      {
        "name": "AssetOneDepositDidNotMeetMinimum",
        "doc": [
          "The minimal amount requirement for the first token in the pair wasn't met."
        ]
      },
      {
        "name": "AssetTwoDepositDidNotMeetMinimum",
        "doc": [
          "The minimal amount requirement for the second token in the pair wasn't met."
        ]
      },
      {
        "name": "AssetOneWithdrawalDidNotMeetMinimum",
        "doc": [
          "The minimal amount requirement for the first token in the pair wasn't met."
        ]
      },
      {
        "name": "AssetTwoWithdrawalDidNotMeetMinimum",
        "doc": [
          "The minimal amount requirement for the second token in the pair wasn't met."
        ]
      },
      {
        "name": "OptimalAmountLessThanDesired",
        "doc": [
          "Optimal calculated amount is less than desired."
        ]
      },
      {
        "name": "InsufficientLiquidityMinted",
        "doc": [
          "Insufficient liquidity minted."
        ]
      },
      {
        "name": "ZeroLiquidity",
        "doc": [
          "Requested liquidity can't be zero."
        ]
      },
      {
        "name": "ZeroAmount",
        "doc": [
          "Amount can't be zero."
        ]
      },
      {
        "name": "ProvidedMinimumNotSufficientForSwap",
        "doc": [
          "Calculated amount out is less than provided minimum amount."
        ]
      },
      {
        "name": "ProvidedMaximumNotSufficientForSwap",
        "doc": [
          "Provided maximum amount is not sufficient for swap."
        ]
      },
      {
        "name": "InvalidPath",
        "doc": [
          "The provided path must consists of 2 assets at least."
        ]
      },
      {
        "name": "NonUniquePath",
        "doc": [
          "The provided path must consists of unique assets."
        ]
      },
      {
        "name": "IncorrectPoolAssetId",
        "doc": [
          "It was not possible to get or increment the Id of the pool."
        ]
      },
      {
        "name": "BelowMinimum",
        "doc": [
          "The destination account cannot exist with the swapped funds."
        ]
      }
    ],
    "errors_value": {
      "type": 454
    },
    "index": 55
  }
]