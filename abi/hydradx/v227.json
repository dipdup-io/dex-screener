[
  {
    "name": "System",
    "prefix": "System",
    "storage": [
      {
        "name": "Account",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "frame_system:AccountInfo",
            "keys_id": 0,
            "value_id": 3
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
        "docs": [
          " The full account information for a particular account ID."
        ]
      },
      {
        "name": "ExtrinsicCount",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Total extrinsics count for the current block."
        ]
      },
      {
        "name": "BlockWeight",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_support:dispatch:PerDispatchClass@8",
          "PlainTypeValue": 8
        },
        "fallback": "0x000000000000",
        "docs": [
          " The current weight for the block."
        ]
      },
      {
        "name": "AllExtrinsicsLen",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Total length (in bytes) for all extrinsics put together, for the current block."
        ]
      },
      {
        "name": "BlockHash",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "H256",
            "keys_id": 4,
            "value_id": 12
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Map of block numbers to block hashes."
        ]
      },
      {
        "name": "ExtrinsicData",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 4,
            "value_id": 13
          }
        },
        "fallback": "0x00",
        "docs": [
          " Extrinsics data for the current block (maps an extrinsic's index to its data)."
        ]
      },
      {
        "name": "Number",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The current block number being processed. Set by `execute_block`."
        ]
      },
      {
        "name": "ParentHash",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 12
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Hash of the previous block."
        ]
      },
      {
        "name": "Digest",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<sp_runtime:generic:digest:DigestItem>",
          "PlainTypeValue": 14
        },
        "fallback": "0x00",
        "docs": [
          " Digest of the current block, also part of the block header."
        ]
      },
      {
        "name": "Events",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<frame_system:EventRecord>",
          "PlainTypeValue": 18
        },
        "fallback": "0x00",
        "docs": [
          " Events deposited for the current block.",
          "",
          " NOTE: The item is unbound and should therefore never be read on chain.",
          " It could otherwise inflate the PoV size of a block.",
          "",
          " Events have a large in-memory size. Box the events to not go out-of-memory",
          " just in case someone still reads them from within the runtime."
        ]
      },
      {
        "name": "EventCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of events in the `Events<T>` list."
        ]
      },
      {
        "name": "EventTopics",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Vec<Tuple:U32U32>",
            "keys_id": 12,
            "value_id": 210
          }
        },
        "fallback": "0x00",
        "docs": [
          " Mapping between a topic (represented by T::Hash) and a vector of indexes",
          " of events in the `<Events<T>>` list.",
          "",
          " All topic vectors have deterministic storage locations depending on the topic. This",
          " allows light-clients to leverage the changes trie storage tracking mechanism and",
          " in case of changes fetch the list of events of interest.",
          "",
          " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
          " the `EventIndex` then in case if the topic has the same contents on the next block",
          " no notification will be triggered thus the event might be lost."
        ]
      },
      {
        "name": "LastRuntimeUpgrade",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:LastRuntimeUpgradeInfo",
          "PlainTypeValue": 211
        },
        "fallback": "0x00",
        "docs": [
          " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
        ]
      },
      {
        "name": "UpgradedToU32RefCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 48
        },
        "fallback": "0x00",
        "docs": [
          " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
        ]
      },
      {
        "name": "UpgradedToTripleRefCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 48
        },
        "fallback": "0x00",
        "docs": [
          " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
          " (default) if not."
        ]
      },
      {
        "name": "ExecutionPhase",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:Phase",
          "PlainTypeValue": 209
        },
        "fallback": "0x00",
        "docs": [
          " The execution phase of the block."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0100",
        "name": "remark",
        "docs": [
          "See [`Pallet::remark`]."
        ],
        "args": [
          {
            "name": "remark",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0101",
        "name": "set_heap_pages",
        "docs": [
          "See [`Pallet::set_heap_pages`]."
        ],
        "args": [
          {
            "name": "pages",
            "type": "U64",
            "type_name": "u64"
          }
        ]
      },
      {
        "lookup": "0102",
        "name": "set_code",
        "docs": [
          "See [`Pallet::set_code`]."
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0103",
        "name": "set_code_without_checks",
        "docs": [
          "See [`Pallet::set_code_without_checks`]."
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0104",
        "name": "set_storage",
        "docs": [
          "See [`Pallet::set_storage`]."
        ],
        "args": [
          {
            "name": "items",
            "type": "Vec<Tuple:Vec<U8>Vec<U8>>",
            "type_name": "Vec<KeyValue>"
          }
        ]
      },
      {
        "lookup": "0105",
        "name": "kill_storage",
        "docs": [
          "See [`Pallet::kill_storage`]."
        ],
        "args": [
          {
            "name": "keys",
            "type": "Vec<Vec<U8>>",
            "type_name": "Vec<Key>"
          }
        ]
      },
      {
        "lookup": "0106",
        "name": "kill_prefix",
        "docs": [
          "See [`Pallet::kill_prefix`]."
        ],
        "args": [
          {
            "name": "prefix",
            "type": "Vec<U8>",
            "type_name": "Key"
          },
          {
            "name": "subkeys",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "0107",
        "name": "remark_with_event",
        "docs": [
          "See [`Pallet::remark_with_event`]."
        ],
        "args": [
          {
            "name": "remark",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 212
    },
    "events": [
      {
        "lookup": "0100",
        "name": "ExtrinsicSuccess",
        "docs": [
          "An extrinsic completed successfully."
        ],
        "args": [
          "frame_support:dispatch:DispatchInfo"
        ],
        "args_name": [
          "dispatch_info"
        ],
        "args_type_name": [
          "DispatchInfo"
        ]
      },
      {
        "lookup": "0101",
        "name": "ExtrinsicFailed",
        "docs": [
          "An extrinsic failed."
        ],
        "args": [
          "sp_runtime:DispatchError",
          "frame_support:dispatch:DispatchInfo"
        ],
        "args_name": [
          "dispatch_error",
          "dispatch_info"
        ],
        "args_type_name": [
          "DispatchError",
          "DispatchInfo"
        ]
      },
      {
        "lookup": "0102",
        "name": "CodeUpdated",
        "docs": [
          "`:code` was updated."
        ],
        "args": null
      },
      {
        "lookup": "0103",
        "name": "NewAccount",
        "docs": [
          "A new account was created."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0104",
        "name": "KilledAccount",
        "docs": [
          "An account was reaped."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0105",
        "name": "Remarked",
        "docs": [
          "On on-chain remark happened."
        ],
        "args": [
          "AccountId",
          "H256"
        ],
        "args_name": [
          "sender",
          "hash"
        ],
        "args_type_name": [
          "AccountId",
          "Hash"
        ]
      }
    ],
    "events_value": {
      "type": 21
    },
    "constants": [
      {
        "name": "BlockWeights",
        "type": "frame_system:limits:BlockWeights",
        "type_value": 216,
        "constants_value": "025b1f5d00070088526a7402004001c2a0a91d000107d0a0445f540200e800010700e6bd4f570200f000010000c2a0a91d000107d042d979710200380101070088526a7402004001010700a2941a1d02005000c2a0a91d00000000",
        "docs": [
          " Block & extrinsics weights: base values and limits."
        ]
      },
      {
        "name": "BlockLength",
        "type": "frame_support:dispatch:PerDispatchClass@221",
        "type_value": 220,
        "constants_value": "00003c000000500000005000",
        "docs": [
          " The maximum length of a block (in bytes)."
        ]
      },
      {
        "name": "BlockHashCount",
        "type": "U32",
        "type_value": 4,
        "constants_value": "60090000",
        "docs": [
          " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
        ]
      },
      {
        "name": "DbWeight",
        "type": "sp_weights:RuntimeDbWeight",
        "type_value": 222,
        "constants_value": "40787d010000000000e1f50500000000",
        "docs": [
          " The weight of runtime database operations the runtime can invoke."
        ]
      },
      {
        "name": "Version",
        "type": "sp_version:RuntimeVersion",
        "type_value": 223,
        "constants_value": "1c687964726164781c6879647261647801000000e30000000000000034df6acb689907609b0400000037e397fc7c91f5e40200000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000dd718d5cc53262d401000000ea93e3f16f3d696202000000bc9d89904f5b923f0100000037c8bb1350a9a2a804000000582211f65bb14b8905000000e65b00e46cedd0aa020000000bb67a52fcd040ff010000000100000000",
        "docs": [
          " Get the chain's current version."
        ]
      },
      {
        "name": "SS58Prefix",
        "type": "U16",
        "type_value": 53,
        "constants_value": "3f00",
        "docs": [
          " The designated SS58 prefix of this chain.",
          "",
          " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
          " that the runtime should know about the prefix in order to make use of it as",
          " an identifier of the chain."
        ]
      }
    ],
    "errors": [
      {
        "name": "InvalidSpecName",
        "doc": [
          "The name of specification does not match between the current runtime",
          "and the new runtime."
        ]
      },
      {
        "name": "SpecVersionNeedsToIncrease",
        "doc": [
          "The specification version is not allowed to decrease between the current runtime",
          "and the new runtime."
        ]
      },
      {
        "name": "FailedToExtractRuntimeVersion",
        "doc": [
          "Failed to extract the runtime version from the new runtime.",
          "",
          "Either calling `Core_version` or decoding `RuntimeVersion` failed."
        ]
      },
      {
        "name": "NonDefaultComposite",
        "doc": [
          "Suicide called when the account has non-default composite data."
        ]
      },
      {
        "name": "NonZeroRefCount",
        "doc": [
          "There is a non-zero reference count preventing the account from being purged."
        ]
      },
      {
        "name": "CallFiltered",
        "doc": [
          "The origin filter prevent the call to be dispatched."
        ]
      }
    ],
    "errors_value": {
      "type": 227
    },
    "index": 1
  },
  {
    "name": "Timestamp",
    "prefix": "Timestamp",
    "storage": [
      {
        "name": "Now",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 11
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " Current time for the current block."
        ]
      },
      {
        "name": "DidUpdate",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 48
        },
        "fallback": "0x00",
        "docs": [
          " Did the timestamp get updated in this block?"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0300",
        "name": "set",
        "docs": [
          "See [`Pallet::set`]."
        ],
        "args": [
          {
            "name": "now",
            "type": "compact<U64>",
            "type_name": "Moment"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 228
    },
    "constants": [
      {
        "name": "MinimumPeriod",
        "type": "U64",
        "type_value": 11,
        "constants_value": "7017000000000000",
        "docs": [
          " The minimum period between blocks. Beware that this is different to the *expected*",
          " period that the block production apparatus provides. Your chosen consensus system will",
          " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
          " double this period on default settings."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 3
  },
  {
    "name": "Balances",
    "prefix": "Balances",
    "storage": [
      {
        "name": "TotalIssuance",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The total units issued in the system."
        ]
      },
      {
        "name": "InactiveIssuance",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The total units of outstanding deactivated balance in the system."
        ]
      },
      {
        "name": "Account",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "pallet_balances:types:AccountData",
            "keys_id": 0,
            "value_id": 5
          }
        },
        "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080",
        "docs": [
          " The Balances pallet example of storing the balance of an account.",
          "",
          " # Example",
          "",
          " ```nocompile",
          "  impl pallet_balances::Config for Runtime {",
          "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
          "  }",
          " ```",
          "",
          " You can also store the balance of an account in the `System` pallet.",
          "",
          " # Example",
          "",
          " ```nocompile",
          "  impl pallet_balances::Config for Runtime {",
          "   type AccountStore = System",
          "  }",
          " ```",
          "",
          " But this comes with tradeoffs, storing account balances in the system pallet stores",
          " `frame_system` data alongside the account data contrary to storing account balances in the",
          " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
          " NOTE: This is only used in the case that this pallet is used to store balances."
        ]
      },
      {
        "name": "Locks",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:types:BalanceLock>",
            "keys_id": 0,
            "value_id": 229
          }
        },
        "fallback": "0x00",
        "docs": [
          " Any liquidity locks on some account balances.",
          " NOTE: Should only be accessed when setting, changing and freeing a lock."
        ]
      },
      {
        "name": "Reserves",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:types:ReserveData>",
            "keys_id": 0,
            "value_id": 233
          }
        },
        "fallback": "0x00",
        "docs": [
          " Named reserves on some account balances."
        ]
      },
      {
        "name": "Holds",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:types:IdAmount>",
            "keys_id": 0,
            "value_id": 236
          }
        },
        "fallback": "0x00",
        "docs": [
          " Holds on account balances."
        ]
      },
      {
        "name": "Freezes",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:types:IdAmount>",
            "keys_id": 0,
            "value_id": 239
          }
        },
        "fallback": "0x00",
        "docs": [
          " Freeze locks on account balances."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0700",
        "name": "transfer_allow_death",
        "docs": [
          "See [`Pallet::transfer_allow_death`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0701",
        "name": "set_balance_deprecated",
        "docs": [
          "See [`Pallet::set_balance_deprecated`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "new_free",
            "type": "compact<U128>",
            "type_name": "Balance"
          },
          {
            "name": "old_reserved",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0702",
        "name": "force_transfer",
        "docs": [
          "See [`Pallet::force_transfer`]."
        ],
        "args": [
          {
            "name": "source",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0703",
        "name": "transfer_keep_alive",
        "docs": [
          "See [`Pallet::transfer_keep_alive`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0704",
        "name": "transfer_all",
        "docs": [
          "See [`Pallet::transfer_all`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "keep_alive",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "0705",
        "name": "force_unreserve",
        "docs": [
          "See [`Pallet::force_unreserve`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0706",
        "name": "upgrade_accounts",
        "docs": [
          "See [`Pallet::upgrade_accounts`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          }
        ]
      },
      {
        "lookup": "0707",
        "name": "transfer",
        "docs": [
          "See [`Pallet::transfer`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0708",
        "name": "force_set_balance",
        "docs": [
          "See [`Pallet::force_set_balance`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "new_free",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 240
    },
    "events": [
      {
        "lookup": "0700",
        "name": "Endowed",
        "docs": [
          "An account was created with some free balance."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account",
          "free_balance"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0701",
        "name": "DustLost",
        "docs": [
          "An account was removed whose balance was non-zero but below ExistentialDeposit,",
          "resulting in an outright loss."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0702",
        "name": "Transfer",
        "docs": [
          "Transfer succeeded."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0703",
        "name": "BalanceSet",
        "docs": [
          "A balance was set by root."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "free"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0704",
        "name": "Reserved",
        "docs": [
          "Some balance was reserved (moved from free to reserved)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0705",
        "name": "Unreserved",
        "docs": [
          "Some balance was unreserved (moved from reserved to free)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0706",
        "name": "ReserveRepatriated",
        "docs": [
          "Some balance was moved from the reserve of the first account to the second account.",
          "Final argument indicates the destination balance type."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128",
          "frame_support:traits:tokens:misc:BalanceStatus"
        ],
        "args_name": [
          "from",
          "to",
          "amount",
          "destination_status"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "Balance",
          "Status"
        ]
      },
      {
        "lookup": "0707",
        "name": "Deposit",
        "docs": [
          "Some amount was deposited (e.g. for transaction fees)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0708",
        "name": "Withdraw",
        "docs": [
          "Some amount was withdrawn from the account (e.g. for transaction fees)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0709",
        "name": "Slashed",
        "docs": [
          "Some amount was removed from the account (e.g. for misbehavior)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "070a",
        "name": "Minted",
        "docs": [
          "Some amount was minted into an account."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "070b",
        "name": "Burned",
        "docs": [
          "Some amount was burned from an account."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "070c",
        "name": "Suspended",
        "docs": [
          "Some amount was suspended from an account (it can be restored later)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "070d",
        "name": "Restored",
        "docs": [
          "Some amount was restored into an account."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "070e",
        "name": "Upgraded",
        "docs": [
          "An account was upgraded."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "who"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "070f",
        "name": "Issued",
        "docs": [
          "Total issuance was increased by `amount`, creating a credit to be balanced."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "amount"
        ],
        "args_type_name": [
          "Balance"
        ]
      },
      {
        "lookup": "0710",
        "name": "Rescinded",
        "docs": [
          "Total issuance was decreased by `amount`, creating a debt to be balanced."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "amount"
        ],
        "args_type_name": [
          "Balance"
        ]
      },
      {
        "lookup": "0711",
        "name": "Locked",
        "docs": [
          "Some balance was locked."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0712",
        "name": "Unlocked",
        "docs": [
          "Some balance was unlocked."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0713",
        "name": "Frozen",
        "docs": [
          "Some balance was frozen."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0714",
        "name": "Thawed",
        "docs": [
          "Some balance was thawed."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 30
    },
    "constants": [
      {
        "name": "ExistentialDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0010a5d4e80000000000000000000000",
        "docs": [
          " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
          "",
          " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
          " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
          " In case you have multiple sources of provider references, you may also get unexpected",
          " behaviour if you set this to zero.",
          "",
          " Bottom line: Do yourself a favour and make it at least one!"
        ]
      },
      {
        "name": "MaxLocks",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of locks that should exist on an account.",
          " Not strictly enforced, but used for weight estimation."
        ]
      },
      {
        "name": "MaxReserves",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of named reserves that can exist on an account."
        ]
      },
      {
        "name": "MaxHolds",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " The maximum number of holds that can exist on an account at any time."
        ]
      },
      {
        "name": "MaxFreezes",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " The maximum number of individual freeze locks that can exist on an account at any time."
        ]
      }
    ],
    "errors": [
      {
        "name": "VestingBalance",
        "doc": [
          "Vesting balance too high to send value."
        ]
      },
      {
        "name": "LiquidityRestrictions",
        "doc": [
          "Account liquidity restrictions prevent withdrawal."
        ]
      },
      {
        "name": "InsufficientBalance",
        "doc": [
          "Balance too low to send value."
        ]
      },
      {
        "name": "ExistentialDeposit",
        "doc": [
          "Value too low to create account due to existential deposit."
        ]
      },
      {
        "name": "Expendability",
        "doc": [
          "Transfer/payment would kill account."
        ]
      },
      {
        "name": "ExistingVestingSchedule",
        "doc": [
          "A vesting schedule already exists for this account."
        ]
      },
      {
        "name": "DeadAccount",
        "doc": [
          "Beneficiary account must pre-exist."
        ]
      },
      {
        "name": "TooManyReserves",
        "doc": [
          "Number of named reserves exceed `MaxReserves`."
        ]
      },
      {
        "name": "TooManyHolds",
        "doc": [
          "Number of holds exceed `MaxHolds`."
        ]
      },
      {
        "name": "TooManyFreezes",
        "doc": [
          "Number of freezes exceed `MaxFreezes`."
        ]
      }
    ],
    "errors_value": {
      "type": 241
    },
    "index": 7
  },
  {
    "name": "TransactionPayment",
    "prefix": "TransactionPayment",
    "storage": [
      {
        "name": "NextFeeMultiplier",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 83
        },
        "fallback": "0x000064a7b3b6e00d0000000000000000",
        "docs": null
      },
      {
        "name": "StorageVersion",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_transaction_payment:Releases",
          "PlainTypeValue": 242
        },
        "fallback": "0x00",
        "docs": null
      }
    ],
    "events": [
      {
        "lookup": "0900",
        "name": "TransactionFeePaid",
        "docs": [
          "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
          "has been paid by `who`."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "actual_fee",
          "tip"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 32
    },
    "constants": [
      {
        "name": "OperationalFeeMultiplier",
        "type": "U8",
        "type_value": 2,
        "constants_value": "00",
        "docs": [
          " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
          " `priority`",
          "",
          " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
          " added to a tip component in regular `priority` calculations.",
          " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
          " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
          "",
          " ```rust,ignore",
          " // For `Normal`",
          " let priority = priority_calc(tip);",
          "",
          " // For `Operational`",
          " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
          " let priority = priority_calc(tip + virtual_tip);",
          " ```",
          "",
          " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
          " sent with the transaction. So, not only does the transaction get a priority bump based",
          " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
          " transactions."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 9
  },
  {
    "name": "Treasury",
    "prefix": "Treasury",
    "storage": [
      {
        "name": "ProposalCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Number of proposals that have been made."
        ]
      },
      {
        "name": "Proposals",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_treasury:Proposal",
            "keys_id": 4,
            "value_id": 243
          }
        },
        "fallback": "0x00",
        "docs": [
          " Proposals that have been made."
        ]
      },
      {
        "name": "Deactivated",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The amount which has been reported as inactive to Currency."
        ]
      },
      {
        "name": "Approvals",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U32>",
          "PlainTypeValue": 244
        },
        "fallback": "0x00",
        "docs": [
          " Proposal indices that have been approved but not yet awarded."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0b00",
        "name": "propose_spend",
        "docs": [
          "See [`Pallet::propose_spend`]."
        ],
        "args": [
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          },
          {
            "name": "beneficiary",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "0b01",
        "name": "reject_proposal",
        "docs": [
          "See [`Pallet::reject_proposal`]."
        ],
        "args": [
          {
            "name": "proposal_id",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          }
        ]
      },
      {
        "lookup": "0b02",
        "name": "approve_proposal",
        "docs": [
          "See [`Pallet::approve_proposal`]."
        ],
        "args": [
          {
            "name": "proposal_id",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          }
        ]
      },
      {
        "lookup": "0b03",
        "name": "spend",
        "docs": [
          "See [`Pallet::spend`]."
        ],
        "args": [
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          },
          {
            "name": "beneficiary",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "0b04",
        "name": "remove_approval",
        "docs": [
          "See [`Pallet::remove_approval`]."
        ],
        "args": [
          {
            "name": "proposal_id",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 245
    },
    "events": [
      {
        "lookup": "0b00",
        "name": "Proposed",
        "docs": [
          "New proposal."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "proposal_index"
        ],
        "args_type_name": [
          "ProposalIndex"
        ]
      },
      {
        "lookup": "0b01",
        "name": "Spending",
        "docs": [
          "We have ended a spend period and will now allocate funds."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "budget_remaining"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      },
      {
        "lookup": "0b02",
        "name": "Awarded",
        "docs": [
          "Some funds have been allocated."
        ],
        "args": [
          "U32",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "proposal_index",
          "award",
          "account"
        ],
        "args_type_name": [
          "ProposalIndex",
          "BalanceOf",
          "AccountId"
        ]
      },
      {
        "lookup": "0b03",
        "name": "Rejected",
        "docs": [
          "A proposal was rejected; funds were slashed."
        ],
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "proposal_index",
          "slashed"
        ],
        "args_type_name": [
          "ProposalIndex",
          "BalanceOf"
        ]
      },
      {
        "lookup": "0b04",
        "name": "Burnt",
        "docs": [
          "Some of our funds have been burnt."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "burnt_funds"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      },
      {
        "lookup": "0b05",
        "name": "Rollover",
        "docs": [
          "Spending has finished; this is the amount that rolls over until next spend."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "rollover_balance"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      },
      {
        "lookup": "0b06",
        "name": "Deposit",
        "docs": [
          "Some funds have been deposited."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "value"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      },
      {
        "lookup": "0b07",
        "name": "SpendApproved",
        "docs": [
          "A new spend proposal has been approved."
        ],
        "args": [
          "U32",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "proposal_index",
          "amount",
          "beneficiary"
        ],
        "args_type_name": [
          "ProposalIndex",
          "BalanceOf",
          "AccountId"
        ]
      },
      {
        "lookup": "0b08",
        "name": "UpdatedInactive",
        "docs": [
          "The inactive funds of the pallet have been updated."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "reactivated",
          "deactivated"
        ],
        "args_type_name": [
          "BalanceOf",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 33
    },
    "constants": [
      {
        "name": "ProposalBond",
        "type": "U32",
        "type_value": 85,
        "constants_value": "30750000",
        "docs": [
          " Fraction of a proposal's value that should be bonded in order to place the proposal.",
          " An accepted proposal gets these back. A rejected proposal does not."
        ]
      },
      {
        "name": "ProposalBondMinimum",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0000c16ff28623000000000000000000",
        "docs": [
          " Minimum amount of funds that should be placed in a deposit for making a proposal."
        ]
      },
      {
        "name": "ProposalBondMaximum",
        "type": "option<U128>",
        "type_value": 59,
        "constants_value": "010000c52ebca2b1000000000000000000",
        "docs": [
          " Maximum amount of funds that should be placed in a deposit for making a proposal."
        ]
      },
      {
        "name": "SpendPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "201c0000",
        "docs": [
          " Period between successive spends."
        ]
      },
      {
        "name": "Burn",
        "type": "U32",
        "type_value": 85,
        "constants_value": "00000000",
        "docs": [
          " Percentage of spare funds (if any) that are burnt per spend period."
        ]
      },
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 246,
        "constants_value": "70792f7472737279",
        "docs": [
          " The treasury's pallet id, used for deriving its sovereign account ID."
        ]
      },
      {
        "name": "MaxApprovals",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum number of approvals that can wait in the spending queue.",
          "",
          " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
        ]
      }
    ],
    "errors": [
      {
        "name": "InsufficientProposersBalance",
        "doc": [
          "Proposer's balance is too low."
        ]
      },
      {
        "name": "InvalidIndex",
        "doc": [
          "No proposal or bounty at that index."
        ]
      },
      {
        "name": "TooManyApprovals",
        "doc": [
          "Too many approvals in the queue."
        ]
      },
      {
        "name": "InsufficientPermission",
        "doc": [
          "The spend origin is valid but the amount it is allowed to spend is lower than the",
          "amount to be spent."
        ]
      },
      {
        "name": "ProposalNotApproved",
        "doc": [
          "Proposal has not been approved."
        ]
      }
    ],
    "errors_value": {
      "type": 247
    },
    "index": 11
  },
  {
    "name": "Utility",
    "prefix": "",
    "storage": null,
    "calls": [
      {
        "lookup": "0d00",
        "name": "batch",
        "docs": [
          "See [`Pallet::batch`]."
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<hydradx_runtime:RuntimeCall>",
            "type_name": "Vec<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0d01",
        "name": "as_derivative",
        "docs": [
          "See [`Pallet::as_derivative`]."
        ],
        "args": [
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0d02",
        "name": "batch_all",
        "docs": [
          "See [`Pallet::batch_all`]."
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<hydradx_runtime:RuntimeCall>",
            "type_name": "Vec<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0d03",
        "name": "dispatch_as",
        "docs": [
          "See [`Pallet::dispatch_as`]."
        ],
        "args": [
          {
            "name": "as_origin",
            "type": "hydradx_runtime:OriginCaller",
            "type_name": "Box<PalletsOrigin>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0d04",
        "name": "force_batch",
        "docs": [
          "See [`Pallet::force_batch`]."
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<hydradx_runtime:RuntimeCall>",
            "type_name": "Vec<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0d05",
        "name": "with_weight",
        "docs": [
          "See [`Pallet::with_weight`]."
        ],
        "args": [
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          },
          {
            "name": "weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 248
    },
    "events": [
      {
        "lookup": "0d00",
        "name": "BatchInterrupted",
        "docs": [
          "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
          "well as the error."
        ],
        "args": [
          "U32",
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "index",
          "error"
        ],
        "args_type_name": [
          "u32",
          "DispatchError"
        ]
      },
      {
        "lookup": "0d01",
        "name": "BatchCompleted",
        "docs": [
          "Batch of dispatches completed fully with no error."
        ],
        "args": null
      },
      {
        "lookup": "0d02",
        "name": "BatchCompletedWithErrors",
        "docs": [
          "Batch of dispatches completed but has errors."
        ],
        "args": null
      },
      {
        "lookup": "0d03",
        "name": "ItemCompleted",
        "docs": [
          "A single item within a Batch of dispatches has completed with no error."
        ],
        "args": null
      },
      {
        "lookup": "0d04",
        "name": "ItemFailed",
        "docs": [
          "A single item within a Batch of dispatches has completed with error."
        ],
        "args": [
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "error"
        ],
        "args_type_name": [
          "DispatchError"
        ]
      },
      {
        "lookup": "0d05",
        "name": "DispatchedAs",
        "docs": [
          "A call was dispatched."
        ],
        "args": [
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "result"
        ],
        "args_type_name": [
          "DispatchResult"
        ]
      }
    ],
    "events_value": {
      "type": 34
    },
    "constants": [
      {
        "name": "batched_calls_limit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "aa2a0000",
        "docs": [
          " The limit on the number of batched calls."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooManyCalls",
        "doc": [
          "Too many calls batched."
        ]
      }
    ],
    "errors_value": {
      "type": 419
    },
    "index": 13
  },
  {
    "name": "Preimage",
    "prefix": "Preimage",
    "storage": [
      {
        "name": "StatusFor",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "pallet_preimage:RequestStatus",
            "keys_id": 12,
            "value_id": 420
          }
        },
        "fallback": "0x00",
        "docs": [
          " The request status of a given hash."
        ]
      },
      {
        "name": "PreimageFor",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "Tuple:H256U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 422,
            "value_id": 423
          }
        },
        "fallback": "0x00",
        "docs": null
      }
    ],
    "calls": [
      {
        "lookup": "0f00",
        "name": "note_preimage",
        "docs": [
          "See [`Pallet::note_preimage`]."
        ],
        "args": [
          {
            "name": "bytes",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0f01",
        "name": "unnote_preimage",
        "docs": [
          "See [`Pallet::unnote_preimage`]."
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "0f02",
        "name": "request_preimage",
        "docs": [
          "See [`Pallet::request_preimage`]."
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "0f03",
        "name": "unrequest_preimage",
        "docs": [
          "See [`Pallet::unrequest_preimage`]."
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 251
    },
    "events": [
      {
        "lookup": "0f00",
        "name": "Noted",
        "docs": [
          "A preimage has been noted."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "0f01",
        "name": "Requested",
        "docs": [
          "A preimage has been requested."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "0f02",
        "name": "Cleared",
        "docs": [
          "A preimage has ben cleared."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      }
    ],
    "events_value": {
      "type": 37
    },
    "errors": [
      {
        "name": "TooBig",
        "doc": [
          "Preimage is too large to store on-chain."
        ]
      },
      {
        "name": "AlreadyNoted",
        "doc": [
          "Preimage has already been noted on-chain."
        ]
      },
      {
        "name": "NotAuthorized",
        "doc": [
          "The user is not authorized to perform this action."
        ]
      },
      {
        "name": "NotNoted",
        "doc": [
          "The preimage cannot be removed since it has not yet been noted."
        ]
      },
      {
        "name": "Requested",
        "doc": [
          "A preimage may not be removed when there are outstanding requests."
        ]
      },
      {
        "name": "NotRequested",
        "doc": [
          "The preimage request cannot be removed since no outstanding requests exist."
        ]
      }
    ],
    "errors_value": {
      "type": 424
    },
    "index": 15
  },
  {
    "name": "Identity",
    "prefix": "Identity",
    "storage": [
      {
        "name": "IdentityOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "pallet_identity:types:Registration",
            "keys_id": 0,
            "value_id": 425
          }
        },
        "fallback": "0x00",
        "docs": [
          " Information that is pertinent to identify the entity behind an account.",
          "",
          "0x2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
        ]
      },
      {
        "name": "SuperOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:AccountIdpallet_identity:types:Data",
            "keys_id": 0,
            "value_id": 288
          }
        },
        "fallback": "0x00",
        "docs": [
          " The super-identity of an alternative \"sub\" identity together with its name, within that",
          " context. If the account is not some other account's sub-identity, then just `None`."
        ]
      },
      {
        "name": "SubsOf",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:U128bounded_collections:bounded_vec:BoundedVec@430",
            "keys_id": 0,
            "value_id": 429
          }
        },
        "fallback": "0x0000000000000000000000000000000000",
        "docs": [
          " Alternative \"sub\" identities of this account.",
          "",
          " The first item is the deposit, the second is a vector of the accounts.",
          "",
          "0x2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
        ]
      },
      {
        "name": "Registrars",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<option<pallet_identity:types:RegistrarInfo>>",
          "PlainTypeValue": 431
        },
        "fallback": "0x00",
        "docs": [
          " The set of registrars. Not expected to get very big as can only be added through a",
          " special origin (likely a council motion).",
          "",
          " The index into this can be cast to `RegistrarIndex` to get a valid value."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1100",
        "name": "add_registrar",
        "docs": [
          "See [`Pallet::add_registrar`]."
        ],
        "args": [
          {
            "name": "account",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "1101",
        "name": "set_identity",
        "docs": [
          "See [`Pallet::set_identity`]."
        ],
        "args": [
          {
            "name": "info",
            "type": "pallet_identity:types:IdentityInfo",
            "type_name": "Box<IdentityInfo<MaxAdditionalFields>>"
          }
        ]
      },
      {
        "lookup": "1102",
        "name": "set_subs",
        "docs": [
          "See [`Pallet::set_subs`]."
        ],
        "args": [
          {
            "name": "subs",
            "type": "Vec<Tuple:AccountIdpallet_identity:types:Data>",
            "type_name": "Vec<(AccountId, Data)>"
          }
        ]
      },
      {
        "lookup": "1103",
        "name": "clear_identity",
        "docs": [
          "See [`Pallet::clear_identity`]."
        ],
        "args": null
      },
      {
        "lookup": "1104",
        "name": "request_judgement",
        "docs": [
          "See [`Pallet::request_judgement`]."
        ],
        "args": [
          {
            "name": "reg_index",
            "type": "compact<U32>",
            "type_name": "RegistrarIndex"
          },
          {
            "name": "max_fee",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1105",
        "name": "cancel_request",
        "docs": [
          "See [`Pallet::cancel_request`]."
        ],
        "args": [
          {
            "name": "reg_index",
            "type": "U32",
            "type_name": "RegistrarIndex"
          }
        ]
      },
      {
        "lookup": "1106",
        "name": "set_fee",
        "docs": [
          "See [`Pallet::set_fee`]."
        ],
        "args": [
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "RegistrarIndex"
          },
          {
            "name": "fee",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1107",
        "name": "set_account_id",
        "docs": [
          "See [`Pallet::set_account_id`]."
        ],
        "args": [
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "RegistrarIndex"
          },
          {
            "name": "new",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "1108",
        "name": "set_fields",
        "docs": [
          "See [`Pallet::set_fields`]."
        ],
        "args": [
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "RegistrarIndex"
          },
          {
            "name": "fields",
            "type": "U64",
            "type_name": "IdentityFields"
          }
        ]
      },
      {
        "lookup": "1109",
        "name": "provide_judgement",
        "docs": [
          "See [`Pallet::provide_judgement`]."
        ],
        "args": [
          {
            "name": "reg_index",
            "type": "compact<U32>",
            "type_name": "RegistrarIndex"
          },
          {
            "name": "target",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "judgement",
            "type": "pallet_identity:types:Judgement",
            "type_name": "Judgement<BalanceOf>"
          },
          {
            "name": "identity",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "110a",
        "name": "kill_identity",
        "docs": [
          "See [`Pallet::kill_identity`]."
        ],
        "args": [
          {
            "name": "target",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "110b",
        "name": "add_sub",
        "docs": [
          "See [`Pallet::add_sub`]."
        ],
        "args": [
          {
            "name": "sub",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "data",
            "type": "pallet_identity:types:Data",
            "type_name": "Data"
          }
        ]
      },
      {
        "lookup": "110c",
        "name": "rename_sub",
        "docs": [
          "See [`Pallet::rename_sub`]."
        ],
        "args": [
          {
            "name": "sub",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "data",
            "type": "pallet_identity:types:Data",
            "type_name": "Data"
          }
        ]
      },
      {
        "lookup": "110d",
        "name": "remove_sub",
        "docs": [
          "See [`Pallet::remove_sub`]."
        ],
        "args": [
          {
            "name": "sub",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "110e",
        "name": "quit_sub",
        "docs": [
          "See [`Pallet::quit_sub`]."
        ],
        "args": null
      }
    ],
    "calls_value": {
      "type": 252
    },
    "events": [
      {
        "lookup": "1100",
        "name": "IdentitySet",
        "docs": [
          "A name was set or reset (which will remove all judgements)."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "who"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "1101",
        "name": "IdentityCleared",
        "docs": [
          "A name was cleared, and the given balance returned."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1102",
        "name": "IdentityKilled",
        "docs": [
          "A name was removed and the given balance slashed."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1103",
        "name": "JudgementRequested",
        "docs": [
          "A judgement was asked from a registrar."
        ],
        "args": [
          "AccountId",
          "U32"
        ],
        "args_name": [
          "who",
          "registrar_index"
        ],
        "args_type_name": [
          "AccountId",
          "RegistrarIndex"
        ]
      },
      {
        "lookup": "1104",
        "name": "JudgementUnrequested",
        "docs": [
          "A judgement request was retracted."
        ],
        "args": [
          "AccountId",
          "U32"
        ],
        "args_name": [
          "who",
          "registrar_index"
        ],
        "args_type_name": [
          "AccountId",
          "RegistrarIndex"
        ]
      },
      {
        "lookup": "1105",
        "name": "JudgementGiven",
        "docs": [
          "A judgement was given by a registrar."
        ],
        "args": [
          "AccountId",
          "U32"
        ],
        "args_name": [
          "target",
          "registrar_index"
        ],
        "args_type_name": [
          "AccountId",
          "RegistrarIndex"
        ]
      },
      {
        "lookup": "1106",
        "name": "RegistrarAdded",
        "docs": [
          "A registrar was added."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "registrar_index"
        ],
        "args_type_name": [
          "RegistrarIndex"
        ]
      },
      {
        "lookup": "1107",
        "name": "SubIdentityAdded",
        "docs": [
          "A sub-identity was added to an identity and the deposit paid."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "sub",
          "main",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1108",
        "name": "SubIdentityRemoved",
        "docs": [
          "A sub-identity was removed from an identity and the deposit freed."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "sub",
          "main",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1109",
        "name": "SubIdentityRevoked",
        "docs": [
          "A sub-identity was cleared, and the given deposit repatriated from the",
          "main identity account to the sub-identity account."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "sub",
          "main",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 38
    },
    "constants": [
      {
        "name": "BasicDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00406352bfc601000000000000000000",
        "docs": [
          " The amount held on deposit for a registered identity"
        ]
      },
      {
        "name": "FieldDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00407a10f35a00000000000000000000",
        "docs": [
          " The amount held on deposit per additional field for a registered identity."
        ]
      },
      {
        "name": "SubAccountDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00406352bfc601000000000000000000",
        "docs": [
          " The amount held on deposit for a registered subaccount. This should account for the fact",
          " that one storage item's value will increase by the size of an account ID, and there will",
          " be another trie item whose value is the size of an account ID plus 32 bytes."
        ]
      },
      {
        "name": "MaxSubAccounts",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum number of sub-accounts allowed per identified account."
        ]
      },
      {
        "name": "MaxAdditionalFields",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
          " required to access an identity, but can be pretty high."
        ]
      },
      {
        "name": "MaxRegistrars",
        "type": "U32",
        "type_value": 4,
        "constants_value": "14000000",
        "docs": [
          " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
          " of, e.g., updating judgements."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooManySubAccounts",
        "doc": [
          "Too many subs-accounts."
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Account isn't found."
        ]
      },
      {
        "name": "NotNamed",
        "doc": [
          "Account isn't named."
        ]
      },
      {
        "name": "EmptyIndex",
        "doc": [
          "Empty index."
        ]
      },
      {
        "name": "FeeChanged",
        "doc": [
          "Fee is changed."
        ]
      },
      {
        "name": "NoIdentity",
        "doc": [
          "No identity found."
        ]
      },
      {
        "name": "StickyJudgement",
        "doc": [
          "Sticky judgement."
        ]
      },
      {
        "name": "JudgementGiven",
        "doc": [
          "Judgement given."
        ]
      },
      {
        "name": "InvalidJudgement",
        "doc": [
          "Invalid judgement."
        ]
      },
      {
        "name": "InvalidIndex",
        "doc": [
          "The index is invalid."
        ]
      },
      {
        "name": "InvalidTarget",
        "doc": [
          "The target is invalid."
        ]
      },
      {
        "name": "TooManyFields",
        "doc": [
          "Too many additional fields."
        ]
      },
      {
        "name": "TooManyRegistrars",
        "doc": [
          "Maximum amount of registrars reached. Cannot add any more."
        ]
      },
      {
        "name": "AlreadyClaimed",
        "doc": [
          "Account ID is already named."
        ]
      },
      {
        "name": "NotSub",
        "doc": [
          "Sender is not a sub-account."
        ]
      },
      {
        "name": "NotOwned",
        "doc": [
          "Sub-account isn't owned by sender."
        ]
      },
      {
        "name": "JudgementForDifferentIdentity",
        "doc": [
          "The provided judgement was for a different identity."
        ]
      },
      {
        "name": "JudgementPaymentFailed",
        "doc": [
          "Error that occurs when there is an issue paying for judgement."
        ]
      }
    ],
    "errors_value": {
      "type": 435
    },
    "index": 17
  },
  {
    "name": "Democracy",
    "prefix": "Democracy",
    "storage": [
      {
        "name": "PublicPropCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of (public) proposals that have been made so far."
        ]
      },
      {
        "name": "PublicProps",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:U32frame_support:traits:preimages:BoundedAccountId>",
          "PlainTypeValue": 436
        },
        "fallback": "0x00",
        "docs": [
          " The public proposals. Unsorted. The second item is the proposal."
        ]
      },
      {
        "name": "DepositOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@440U128",
            "keys_id": 4,
            "value_id": 439
          }
        },
        "fallback": "0x00",
        "docs": [
          " Those who have locked a deposit.",
          "",
          " TWOX-NOTE: Safe, as increasing integer keys are safe."
        ]
      },
      {
        "name": "ReferendumCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The next free referendum index, aka the number of referenda started so far."
        ]
      },
      {
        "name": "LowestUnbaked",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The lowest referendum index representing an unbaked referendum. Equal to",
          " `ReferendumCount` if there isn't a unbaked referendum."
        ]
      },
      {
        "name": "ReferendumInfoOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_democracy:types:ReferendumInfo",
            "keys_id": 4,
            "value_id": 441
          }
        },
        "fallback": "0x00",
        "docs": [
          " Information concerning any given referendum.",
          "",
          "0x2054574f582d4e4f54453a205341464520617320696e646578657320617265206e6f7420756e64657220616e2061747461636b6572e280997320636f6e74726f6c2e"
        ]
      },
      {
        "name": "VotingOf",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "pallet_democracy:vote:Voting",
            "keys_id": 0,
            "value_id": 444
          }
        },
        "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " All votes for a particular voter. We store the balance for the number of votes that we",
          " have recorded. The second item is the total amount of delegations, that will be added.",
          "",
          " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
        ]
      },
      {
        "name": "LastTabledWasExternal",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 48
        },
        "fallback": "0x00",
        "docs": [
          " True if the last referendum tabled was submitted externally. False if it was a public",
          " proposal."
        ]
      },
      {
        "name": "NextExternal",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Tuple:frame_support:traits:preimages:Boundedpallet_democracy:vote_threshold:VoteThreshold",
          "PlainTypeValue": 450
        },
        "fallback": "0x00",
        "docs": [
          " The referendum to be tabled whenever it would be valid to table an external proposal.",
          " This happens when a referendum needs to be tabled and one of two conditions are met:",
          " - `LastTabledWasExternal` is `false`; or",
          " - `PublicProps` is empty."
        ]
      },
      {
        "name": "Blacklist",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Tuple:U32Vec<AccountId>",
            "keys_id": 12,
            "value_id": 451
          }
        },
        "fallback": "0x00",
        "docs": [
          " A record of who vetoed what. Maps proposal hash to a possible existent block number",
          " (until when it may not be resubmitted) and who vetoed it."
        ]
      },
      {
        "name": "Cancellations",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Bool",
            "keys_id": 12,
            "value_id": 48
          }
        },
        "fallback": "0x00",
        "docs": [
          " Record of all proposals that have been subject to emergency cancellation."
        ]
      },
      {
        "name": "MetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "pallet_democracy:types:MetadataOwner"
            ],
            "value": "H256",
            "keys_id": 43,
            "value_id": 12
          }
        },
        "fallback": "0x00",
        "docs": [
          " General information concerning any proposal or referendum.",
          " The `PreimageHash` refers to the preimage of the `Preimages` provider which can be a JSON",
          " dump or IPFS hash of a JSON file.",
          "",
          " Consider a garbage collection for a metadata of finished referendums to `unrequest` (remove)",
          " large preimages."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1300",
        "name": "propose",
        "docs": [
          "See [`Pallet::propose`]."
        ],
        "args": [
          {
            "name": "proposal",
            "type": "frame_support:traits:preimages:Bounded",
            "type_name": "BoundedCallOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1301",
        "name": "second",
        "docs": [
          "See [`Pallet::second`]."
        ],
        "args": [
          {
            "name": "proposal",
            "type": "compact<U32>",
            "type_name": "PropIndex"
          }
        ]
      },
      {
        "lookup": "1302",
        "name": "vote",
        "docs": [
          "See [`Pallet::vote`]."
        ],
        "args": [
          {
            "name": "ref_index",
            "type": "compact<U32>",
            "type_name": "ReferendumIndex"
          },
          {
            "name": "vote",
            "type": "pallet_democracy:vote:AccountVote",
            "type_name": "AccountVote<BalanceOf>"
          }
        ]
      },
      {
        "lookup": "1303",
        "name": "emergency_cancel",
        "docs": [
          "See [`Pallet::emergency_cancel`]."
        ],
        "args": [
          {
            "name": "ref_index",
            "type": "U32",
            "type_name": "ReferendumIndex"
          }
        ]
      },
      {
        "lookup": "1304",
        "name": "external_propose",
        "docs": [
          "See [`Pallet::external_propose`]."
        ],
        "args": [
          {
            "name": "proposal",
            "type": "frame_support:traits:preimages:Bounded",
            "type_name": "BoundedCallOf"
          }
        ]
      },
      {
        "lookup": "1305",
        "name": "external_propose_majority",
        "docs": [
          "See [`Pallet::external_propose_majority`]."
        ],
        "args": [
          {
            "name": "proposal",
            "type": "frame_support:traits:preimages:Bounded",
            "type_name": "BoundedCallOf"
          }
        ]
      },
      {
        "lookup": "1306",
        "name": "external_propose_default",
        "docs": [
          "See [`Pallet::external_propose_default`]."
        ],
        "args": [
          {
            "name": "proposal",
            "type": "frame_support:traits:preimages:Bounded",
            "type_name": "BoundedCallOf"
          }
        ]
      },
      {
        "lookup": "1307",
        "name": "fast_track",
        "docs": [
          "See [`Pallet::fast_track`]."
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "H256"
          },
          {
            "name": "voting_period",
            "type": "U32",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumberFor"
          }
        ]
      },
      {
        "lookup": "1308",
        "name": "veto_external",
        "docs": [
          "See [`Pallet::veto_external`]."
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "H256"
          }
        ]
      },
      {
        "lookup": "1309",
        "name": "cancel_referendum",
        "docs": [
          "See [`Pallet::cancel_referendum`]."
        ],
        "args": [
          {
            "name": "ref_index",
            "type": "compact<U32>",
            "type_name": "ReferendumIndex"
          }
        ]
      },
      {
        "lookup": "130a",
        "name": "delegate",
        "docs": [
          "See [`Pallet::delegate`]."
        ],
        "args": [
          {
            "name": "to",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "conviction",
            "type": "pallet_democracy:conviction:Conviction",
            "type_name": "Conviction"
          },
          {
            "name": "balance",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "130b",
        "name": "undelegate",
        "docs": [
          "See [`Pallet::undelegate`]."
        ],
        "args": null
      },
      {
        "lookup": "130c",
        "name": "clear_public_proposals",
        "docs": [
          "See [`Pallet::clear_public_proposals`]."
        ],
        "args": null
      },
      {
        "lookup": "130d",
        "name": "unlock",
        "docs": [
          "See [`Pallet::unlock`]."
        ],
        "args": [
          {
            "name": "target",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "130e",
        "name": "remove_vote",
        "docs": [
          "See [`Pallet::remove_vote`]."
        ],
        "args": [
          {
            "name": "index",
            "type": "U32",
            "type_name": "ReferendumIndex"
          }
        ]
      },
      {
        "lookup": "130f",
        "name": "remove_other_vote",
        "docs": [
          "See [`Pallet::remove_other_vote`]."
        ],
        "args": [
          {
            "name": "target",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "index",
            "type": "U32",
            "type_name": "ReferendumIndex"
          }
        ]
      },
      {
        "lookup": "1310",
        "name": "blacklist",
        "docs": [
          "See [`Pallet::blacklist`]."
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "H256"
          },
          {
            "name": "maybe_ref_index",
            "type": "option<U32>",
            "type_name": "Option<ReferendumIndex>"
          }
        ]
      },
      {
        "lookup": "1311",
        "name": "cancel_proposal",
        "docs": [
          "See [`Pallet::cancel_proposal`]."
        ],
        "args": [
          {
            "name": "prop_index",
            "type": "compact<U32>",
            "type_name": "PropIndex"
          }
        ]
      },
      {
        "lookup": "1312",
        "name": "set_metadata",
        "docs": [
          "See [`Pallet::set_metadata`]."
        ],
        "args": [
          {
            "name": "owner",
            "type": "pallet_democracy:types:MetadataOwner",
            "type_name": "MetadataOwner"
          },
          {
            "name": "maybe_hash",
            "type": "option<H256>",
            "type_name": "Option<PreimageHash>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 292
    },
    "events": [
      {
        "lookup": "1300",
        "name": "Proposed",
        "docs": [
          "A motion has been proposed by a public account."
        ],
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "proposal_index",
          "deposit"
        ],
        "args_type_name": [
          "PropIndex",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1301",
        "name": "Tabled",
        "docs": [
          "A public proposal has been tabled for referendum vote."
        ],
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "proposal_index",
          "deposit"
        ],
        "args_type_name": [
          "PropIndex",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1302",
        "name": "ExternalTabled",
        "docs": [
          "An external proposal has been tabled."
        ],
        "args": null
      },
      {
        "lookup": "1303",
        "name": "Started",
        "docs": [
          "A referendum has begun."
        ],
        "args": [
          "U32",
          "pallet_democracy:vote_threshold:VoteThreshold"
        ],
        "args_name": [
          "ref_index",
          "threshold"
        ],
        "args_type_name": [
          "ReferendumIndex",
          "VoteThreshold"
        ]
      },
      {
        "lookup": "1304",
        "name": "Passed",
        "docs": [
          "A proposal has been approved by referendum."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "ref_index"
        ],
        "args_type_name": [
          "ReferendumIndex"
        ]
      },
      {
        "lookup": "1305",
        "name": "NotPassed",
        "docs": [
          "A proposal has been rejected by referendum."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "ref_index"
        ],
        "args_type_name": [
          "ReferendumIndex"
        ]
      },
      {
        "lookup": "1306",
        "name": "Cancelled",
        "docs": [
          "A referendum has been cancelled."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "ref_index"
        ],
        "args_type_name": [
          "ReferendumIndex"
        ]
      },
      {
        "lookup": "1307",
        "name": "Delegated",
        "docs": [
          "An account has delegated their vote to another account."
        ],
        "args": [
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "who",
          "target"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "1308",
        "name": "Undelegated",
        "docs": [
          "An account has cancelled a previous delegation operation."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "1309",
        "name": "Vetoed",
        "docs": [
          "An external proposal has been vetoed."
        ],
        "args": [
          "AccountId",
          "H256",
          "U32"
        ],
        "args_name": [
          "who",
          "proposal_hash",
          "until"
        ],
        "args_type_name": [
          "AccountId",
          "H256",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "130a",
        "name": "Blacklisted",
        "docs": [
          "A proposal_hash has been blacklisted permanently."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "proposal_hash"
        ],
        "args_type_name": [
          "H256"
        ]
      },
      {
        "lookup": "130b",
        "name": "Voted",
        "docs": [
          "An account has voted in a referendum"
        ],
        "args": [
          "AccountId",
          "U32",
          "pallet_democracy:vote:AccountVote"
        ],
        "args_name": [
          "voter",
          "ref_index",
          "vote"
        ],
        "args_type_name": [
          "AccountId",
          "ReferendumIndex",
          "AccountVote<BalanceOf>"
        ]
      },
      {
        "lookup": "130c",
        "name": "Seconded",
        "docs": [
          "An account has secconded a proposal"
        ],
        "args": [
          "AccountId",
          "U32"
        ],
        "args_name": [
          "seconder",
          "prop_index"
        ],
        "args_type_name": [
          "AccountId",
          "PropIndex"
        ]
      },
      {
        "lookup": "130d",
        "name": "ProposalCanceled",
        "docs": [
          "A proposal got canceled."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "prop_index"
        ],
        "args_type_name": [
          "PropIndex"
        ]
      },
      {
        "lookup": "130e",
        "name": "MetadataSet",
        "docs": [
          "Metadata for a proposal or a referendum has been set."
        ],
        "args": [
          "pallet_democracy:types:MetadataOwner",
          "H256"
        ],
        "args_name": [
          "owner",
          "hash"
        ],
        "args_type_name": [
          "MetadataOwner",
          "PreimageHash"
        ]
      },
      {
        "lookup": "130f",
        "name": "MetadataCleared",
        "docs": [
          "Metadata for a proposal or a referendum has been cleared."
        ],
        "args": [
          "pallet_democracy:types:MetadataOwner",
          "H256"
        ],
        "args_name": [
          "owner",
          "hash"
        ],
        "args_type_name": [
          "MetadataOwner",
          "PreimageHash"
        ]
      },
      {
        "lookup": "1310",
        "name": "MetadataTransferred",
        "docs": [
          "Metadata has been transferred to new owner."
        ],
        "args": [
          "pallet_democracy:types:MetadataOwner",
          "pallet_democracy:types:MetadataOwner",
          "H256"
        ],
        "args_name": [
          "prev_owner",
          "owner",
          "hash"
        ],
        "args_type_name": [
          "MetadataOwner",
          "MetadataOwner",
          "PreimageHash"
        ]
      }
    ],
    "events_value": {
      "type": 39
    },
    "constants": [
      {
        "name": "EnactmentPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "201c0000",
        "docs": [
          " The period between a proposal being approved and enacted.",
          "",
          " It should generally be a little more than the unstake period to ensure that",
          " voting stakers have an opportunity to remove themselves from the system in the case",
          " where they are on the losing side of a vote."
        ]
      },
      {
        "name": "LaunchPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "60540000",
        "docs": [
          " How often (in blocks) new public referenda are launched."
        ]
      },
      {
        "name": "VotingPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "60540000",
        "docs": [
          " How often (in blocks) to check for new votes."
        ]
      },
      {
        "name": "VoteLockingPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "c0a80000",
        "docs": [
          " The minimum period of vote locking.",
          "",
          " It should be no shorter than enactment period to ensure that in the case of an approval,",
          " those successful voters are locked into the consequences that their votes entail."
        ]
      },
      {
        "name": "MinimumDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00008a5d784563010000000000000000",
        "docs": [
          " The minimum amount to be used as a deposit for a public referendum proposal."
        ]
      },
      {
        "name": "InstantAllowed",
        "type": "Bool",
        "type_value": 48,
        "constants_value": "01",
        "docs": [
          " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
          " want to set this permanently to `false`, others may want to condition it on things such",
          " as an upgrade having happened recently."
        ]
      },
      {
        "name": "FastTrackVotingPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "84030000",
        "docs": [
          " Minimum voting period allowed for a fast-track referendum."
        ]
      },
      {
        "name": "CooloffPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "e0c40000",
        "docs": [
          " Period in blocks where an external proposal may not be re-submitted after being vetoed."
        ]
      },
      {
        "name": "MaxVotes",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum number of votes for an account.",
          "",
          " Also used to compute weight, an overly big value can",
          " lead to extrinsic with very big weight: see `delegate` for instance."
        ]
      },
      {
        "name": "MaxProposals",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum number of public proposals that can exist at any time."
        ]
      },
      {
        "name": "MaxDeposits",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum number of deposits a public proposal may have at any time."
        ]
      },
      {
        "name": "MaxBlacklisted",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum number of items which can be blacklisted."
        ]
      }
    ],
    "errors": [
      {
        "name": "ValueLow",
        "doc": [
          "Value too low"
        ]
      },
      {
        "name": "ProposalMissing",
        "doc": [
          "Proposal does not exist"
        ]
      },
      {
        "name": "AlreadyCanceled",
        "doc": [
          "Cannot cancel the same proposal twice"
        ]
      },
      {
        "name": "DuplicateProposal",
        "doc": [
          "Proposal already made"
        ]
      },
      {
        "name": "ProposalBlacklisted",
        "doc": [
          "Proposal still blacklisted"
        ]
      },
      {
        "name": "NotSimpleMajority",
        "doc": [
          "Next external proposal not simple majority"
        ]
      },
      {
        "name": "InvalidHash",
        "doc": [
          "Invalid hash"
        ]
      },
      {
        "name": "NoProposal",
        "doc": [
          "No external proposal"
        ]
      },
      {
        "name": "AlreadyVetoed",
        "doc": [
          "Identity may not veto a proposal twice"
        ]
      },
      {
        "name": "ReferendumInvalid",
        "doc": [
          "Vote given for invalid referendum"
        ]
      },
      {
        "name": "NoneWaiting",
        "doc": [
          "No proposals waiting"
        ]
      },
      {
        "name": "NotVoter",
        "doc": [
          "The given account did not vote on the referendum."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "The actor has no permission to conduct the action."
        ]
      },
      {
        "name": "AlreadyDelegating",
        "doc": [
          "The account is already delegating."
        ]
      },
      {
        "name": "InsufficientFunds",
        "doc": [
          "Too high a balance was provided that the account cannot afford."
        ]
      },
      {
        "name": "NotDelegating",
        "doc": [
          "The account is not currently delegating."
        ]
      },
      {
        "name": "VotesExist",
        "doc": [
          "The account currently has votes attached to it and the operation cannot succeed until",
          "these are removed, either through `unvote` or `reap_vote`."
        ]
      },
      {
        "name": "InstantNotAllowed",
        "doc": [
          "The instant referendum origin is currently disallowed."
        ]
      },
      {
        "name": "Nonsense",
        "doc": [
          "Delegation to oneself makes no sense."
        ]
      },
      {
        "name": "WrongUpperBound",
        "doc": [
          "Invalid upper bound."
        ]
      },
      {
        "name": "MaxVotesReached",
        "doc": [
          "Maximum number of votes reached."
        ]
      },
      {
        "name": "TooMany",
        "doc": [
          "Maximum number of items reached."
        ]
      },
      {
        "name": "VotingPeriodLow",
        "doc": [
          "Voting period too low"
        ]
      },
      {
        "name": "PreimageNotExist",
        "doc": [
          "The preimage does not exist."
        ]
      }
    ],
    "errors_value": {
      "type": 452
    },
    "index": 19
  },
  {
    "name": "Elections",
    "prefix": "Elections",
    "storage": [
      {
        "name": "Members",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<pallet_elections_phragmen:SeatHolder>",
          "PlainTypeValue": 453
        },
        "fallback": "0x00",
        "docs": [
          " The current elected members.",
          "",
          " Invariant: Always sorted based on account id."
        ]
      },
      {
        "name": "RunnersUp",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<pallet_elections_phragmen:SeatHolder>",
          "PlainTypeValue": 453
        },
        "fallback": "0x00",
        "docs": [
          " The current reserved runners-up.",
          "",
          " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
          " last (i.e. _best_) runner-up will be replaced."
        ]
      },
      {
        "name": "Candidates",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:AccountIdU128>",
          "PlainTypeValue": 45
        },
        "fallback": "0x00",
        "docs": [
          " The present candidate list. A current member or runner-up can never enter this vector",
          " and is always implicitly assumed to be a candidate.",
          "",
          " Second element is the deposit.",
          "",
          " Invariant: Always sorted based on account id."
        ]
      },
      {
        "name": "ElectionRounds",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The total number of vote rounds that have happened, excluding the upcoming one."
        ]
      },
      {
        "name": "Voting",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "pallet_elections_phragmen:Voter",
            "keys_id": 0,
            "value_id": 455
          }
        },
        "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Votes and locked stake of a particular voter.",
          "",
          " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1500",
        "name": "vote",
        "docs": [
          "See [`Pallet::vote`]."
        ],
        "args": [
          {
            "name": "votes",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1501",
        "name": "remove_voter",
        "docs": [
          "See [`Pallet::remove_voter`]."
        ],
        "args": null
      },
      {
        "lookup": "1502",
        "name": "submit_candidacy",
        "docs": [
          "See [`Pallet::submit_candidacy`]."
        ],
        "args": [
          {
            "name": "candidate_count",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1503",
        "name": "renounce_candidacy",
        "docs": [
          "See [`Pallet::renounce_candidacy`]."
        ],
        "args": [
          {
            "name": "renouncing",
            "type": "pallet_elections_phragmen:Renouncing",
            "type_name": "Renouncing"
          }
        ]
      },
      {
        "lookup": "1504",
        "name": "remove_member",
        "docs": [
          "See [`Pallet::remove_member`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "slash_bond",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "rerun_election",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "1505",
        "name": "clean_defunct_voters",
        "docs": [
          "See [`Pallet::clean_defunct_voters`]."
        ],
        "args": [
          {
            "name": "num_voters",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "num_defunct",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 297
    },
    "events": [
      {
        "lookup": "1500",
        "name": "NewTerm",
        "docs": [
          "A new term with new_members. This indicates that enough candidates existed to run",
          "the election, not that enough have has been elected. The inner value must be examined",
          "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
          "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
          "begin with."
        ],
        "args": [
          "Vec<Tuple:AccountIdU128>"
        ],
        "args_name": [
          "new_members"
        ],
        "args_type_name": [
          "Vec<(<T as frame_system::Config>::AccountId, BalanceOf)>"
        ]
      },
      {
        "lookup": "1501",
        "name": "EmptyTerm",
        "docs": [
          "No (or not enough) candidates existed for this round. This is different from",
          "`NewTerm(\\[\\])`. See the description of `NewTerm`."
        ],
        "args": null
      },
      {
        "lookup": "1502",
        "name": "ElectionError",
        "docs": [
          "Internal error happened while trying to perform election."
        ],
        "args": null
      },
      {
        "lookup": "1503",
        "name": "MemberKicked",
        "docs": [
          "A member has been removed. This should always be followed by either `NewTerm` or",
          "`EmptyTerm`."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "member"
        ],
        "args_type_name": [
          "<T as frame_system::Config>::AccountId"
        ]
      },
      {
        "lookup": "1504",
        "name": "Renounced",
        "docs": [
          "Someone has renounced their candidacy."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "candidate"
        ],
        "args_type_name": [
          "<T as frame_system::Config>::AccountId"
        ]
      },
      {
        "lookup": "1505",
        "name": "CandidateSlashed",
        "docs": [
          "A candidate was slashed by amount due to failing to obtain a seat as member or",
          "runner-up.",
          "",
          "Note that old members and runners-up are also candidates."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "candidate",
          "amount"
        ],
        "args_type_name": [
          "<T as frame_system::Config>::AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1506",
        "name": "SeatHolderSlashed",
        "docs": [
          "A seat holder was slashed by amount by being forcefully removed from the set."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "seat_holder",
          "amount"
        ],
        "args_type_name": [
          "<T as frame_system::Config>::AccountId",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 44
    },
    "constants": [
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 119,
        "constants_value": "706872656c656374",
        "docs": [
          " Identifier for the elections-phragmen pallet's lock"
        ]
      },
      {
        "name": "CandidacyBond",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00406352bfc601000000000000000000",
        "docs": [
          " How much should be locked up in order to submit one's candidacy."
        ]
      },
      {
        "name": "VotingBondBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0010a5d4e80000000000000000000000",
        "docs": [
          " Base deposit associated with voting.",
          "",
          " This should be sensibly high to economically ensure the pallet cannot be attacked by",
          " creating a gigantic number of votes."
        ]
      },
      {
        "name": "VotingBondFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0010a5d4e80000000000000000000000",
        "docs": [
          " The amount of bond that need to be locked for each vote (32 bytes)."
        ]
      },
      {
        "name": "DesiredMembers",
        "type": "U32",
        "type_value": 4,
        "constants_value": "0d000000",
        "docs": [
          " Number of members to elect."
        ]
      },
      {
        "name": "DesiredRunnersUp",
        "type": "U32",
        "type_value": 4,
        "constants_value": "0f000000",
        "docs": [
          " Number of runners_up to keep."
        ]
      },
      {
        "name": "TermDuration",
        "type": "U32",
        "type_value": 4,
        "constants_value": "e0c40000",
        "docs": [
          " How long each seat is kept. This defines the next block number at which an election",
          " round will happen. If set to zero, no elections are ever triggered and the module will",
          " be in passive mode."
        ]
      },
      {
        "name": "MaxCandidates",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum number of candidates in a phragmen election.",
          "",
          " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
          " consider how it will impact `T::WeightInfo::election_phragmen`.",
          "",
          " When this limit is reached no more candidates are accepted in the election."
        ]
      },
      {
        "name": "MaxVoters",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00030000",
        "docs": [
          " The maximum number of voters to allow in a phragmen election.",
          "",
          " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
          " consider how it will impact `T::WeightInfo::election_phragmen`.",
          "",
          " When the limit is reached the new voters are ignored."
        ]
      },
      {
        "name": "MaxVotesPerVoter",
        "type": "U32",
        "type_value": 4,
        "constants_value": "0a000000",
        "docs": [
          " Maximum numbers of votes per voter.",
          "",
          " Warning: This impacts the size of the election which is run onchain. Chose wisely, and",
          " consider how it will impact `T::WeightInfo::election_phragmen`."
        ]
      }
    ],
    "errors": [
      {
        "name": "UnableToVote",
        "doc": [
          "Cannot vote when no candidates or members exist."
        ]
      },
      {
        "name": "NoVotes",
        "doc": [
          "Must vote for at least one candidate."
        ]
      },
      {
        "name": "TooManyVotes",
        "doc": [
          "Cannot vote more than candidates."
        ]
      },
      {
        "name": "MaximumVotesExceeded",
        "doc": [
          "Cannot vote more than maximum allowed."
        ]
      },
      {
        "name": "LowBalance",
        "doc": [
          "Cannot vote with stake less than minimum balance."
        ]
      },
      {
        "name": "UnableToPayBond",
        "doc": [
          "Voter can not pay voting bond."
        ]
      },
      {
        "name": "MustBeVoter",
        "doc": [
          "Must be a voter."
        ]
      },
      {
        "name": "DuplicatedCandidate",
        "doc": [
          "Duplicated candidate submission."
        ]
      },
      {
        "name": "TooManyCandidates",
        "doc": [
          "Too many candidates have been created."
        ]
      },
      {
        "name": "MemberSubmit",
        "doc": [
          "Member cannot re-submit candidacy."
        ]
      },
      {
        "name": "RunnerUpSubmit",
        "doc": [
          "Runner cannot re-submit candidacy."
        ]
      },
      {
        "name": "InsufficientCandidateFunds",
        "doc": [
          "Candidate does not have enough funds."
        ]
      },
      {
        "name": "NotMember",
        "doc": [
          "Not a member."
        ]
      },
      {
        "name": "InvalidWitnessData",
        "doc": [
          "The provided count of number of candidates is incorrect."
        ]
      },
      {
        "name": "InvalidVoteCount",
        "doc": [
          "The provided count of number of votes is incorrect."
        ]
      },
      {
        "name": "InvalidRenouncing",
        "doc": [
          "The renouncing origin presented a wrong `Renouncing` parameter."
        ]
      },
      {
        "name": "InvalidReplacement",
        "doc": [
          "Prediction regarding replacement after member removal is wrong."
        ]
      }
    ],
    "errors_value": {
      "type": 456
    },
    "index": 21
  },
  {
    "name": "Council",
    "prefix": "Council",
    "storage": [
      {
        "name": "Proposals",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<H256>",
          "PlainTypeValue": 457
        },
        "fallback": "0x00",
        "docs": [
          " The hashes of the active proposals."
        ]
      },
      {
        "name": "ProposalOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Call",
            "keys_id": 12,
            "value_id": 250
          }
        },
        "fallback": "0x00",
        "docs": [
          " Actual proposal for a given hash, if it's current."
        ]
      },
      {
        "name": "Voting",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "pallet_collective:Votes",
            "keys_id": 12,
            "value_id": 458
          }
        },
        "fallback": "0x00",
        "docs": [
          " Votes on a given proposal, if it is ongoing."
        ]
      },
      {
        "name": "ProposalCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Proposals so far."
        ]
      },
      {
        "name": "Members",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 204
        },
        "fallback": "0x00",
        "docs": [
          " The current members of the collective. This is stored sorted (just by value)."
        ]
      },
      {
        "name": "Prime",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "AccountId",
          "PlainTypeValue": 0
        },
        "fallback": "0x00",
        "docs": [
          " The prime member that helps determine the default vote behavior in case of absentations."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1700",
        "name": "set_members",
        "docs": [
          "See [`Pallet::set_members`]."
        ],
        "args": [
          {
            "name": "new_members",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "prime",
            "type": "option<AccountId>",
            "type_name": "Option<AccountId>"
          },
          {
            "name": "old_count",
            "type": "U32",
            "type_name": "MemberCount"
          }
        ]
      },
      {
        "lookup": "1701",
        "name": "execute",
        "docs": [
          "See [`Pallet::execute`]."
        ],
        "args": [
          {
            "name": "proposal",
            "type": "Call",
            "type_name": "Box<<T as Config<I>>::Proposal>"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1702",
        "name": "propose",
        "docs": [
          "See [`Pallet::propose`]."
        ],
        "args": [
          {
            "name": "threshold",
            "type": "compact<U32>",
            "type_name": "MemberCount"
          },
          {
            "name": "proposal",
            "type": "Call",
            "type_name": "Box<<T as Config<I>>::Proposal>"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1703",
        "name": "vote",
        "docs": [
          "See [`Pallet::vote`]."
        ],
        "args": [
          {
            "name": "proposal",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          },
          {
            "name": "approve",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "1705",
        "name": "disapprove_proposal",
        "docs": [
          "See [`Pallet::disapprove_proposal`]."
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "1706",
        "name": "close",
        "docs": [
          "See [`Pallet::close`]."
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          },
          {
            "name": "proposal_weight_bound",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 299
    },
    "events": [
      {
        "lookup": "1700",
        "name": "Proposed",
        "docs": [
          "A motion (given hash) has been proposed (by given account) with a threshold (given",
          "`MemberCount`)."
        ],
        "args": [
          "AccountId",
          "U32",
          "H256",
          "U32"
        ],
        "args_name": [
          "account",
          "proposal_index",
          "proposal_hash",
          "threshold"
        ],
        "args_type_name": [
          "AccountId",
          "ProposalIndex",
          "Hash",
          "MemberCount"
        ]
      },
      {
        "lookup": "1701",
        "name": "Voted",
        "docs": [
          "A motion (given hash) has been voted on by given account, leaving",
          "a tally (yes votes and no votes given respectively as `MemberCount`)."
        ],
        "args": [
          "AccountId",
          "H256",
          "Bool",
          "U32",
          "U32"
        ],
        "args_name": [
          "account",
          "proposal_hash",
          "voted",
          "yes",
          "no"
        ],
        "args_type_name": [
          "AccountId",
          "Hash",
          "bool",
          "MemberCount",
          "MemberCount"
        ]
      },
      {
        "lookup": "1702",
        "name": "Approved",
        "docs": [
          "A motion was approved by the required threshold."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "proposal_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1703",
        "name": "Disapproved",
        "docs": [
          "A motion was not approved by the required threshold."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "proposal_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1704",
        "name": "Executed",
        "docs": [
          "A motion was executed; result will be `Ok` if it returned without error."
        ],
        "args": [
          "H256",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "proposal_hash",
          "result"
        ],
        "args_type_name": [
          "Hash",
          "DispatchResult"
        ]
      },
      {
        "lookup": "1705",
        "name": "MemberExecuted",
        "docs": [
          "A single member did some action; result will be `Ok` if it returned without error."
        ],
        "args": [
          "H256",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "proposal_hash",
          "result"
        ],
        "args_type_name": [
          "Hash",
          "DispatchResult"
        ]
      },
      {
        "lookup": "1706",
        "name": "Closed",
        "docs": [
          "A proposal was closed because its threshold was reached or after its duration was up."
        ],
        "args": [
          "H256",
          "U32",
          "U32"
        ],
        "args_name": [
          "proposal_hash",
          "yes",
          "no"
        ],
        "args_type_name": [
          "Hash",
          "MemberCount",
          "MemberCount"
        ]
      }
    ],
    "events_value": {
      "type": 47
    },
    "constants": [
      {
        "name": "MaxProposalWeight",
        "type": "sp_weights:weight_v2:Weight",
        "type_value": 9,
        "constants_value": "07004429353a0200a000",
        "docs": [
          " The maximum weight of a dispatch call that can be proposed and executed."
        ]
      }
    ],
    "errors": [
      {
        "name": "NotMember",
        "doc": [
          "Account is not a member"
        ]
      },
      {
        "name": "DuplicateProposal",
        "doc": [
          "Duplicate proposals not allowed"
        ]
      },
      {
        "name": "ProposalMissing",
        "doc": [
          "Proposal must exist"
        ]
      },
      {
        "name": "WrongIndex",
        "doc": [
          "Mismatched index"
        ]
      },
      {
        "name": "DuplicateVote",
        "doc": [
          "Duplicate vote ignored"
        ]
      },
      {
        "name": "AlreadyInitialized",
        "doc": [
          "Members are already initialized!"
        ]
      },
      {
        "name": "TooEarly",
        "doc": [
          "The close call was made too early, before the end of the voting."
        ]
      },
      {
        "name": "TooManyProposals",
        "doc": [
          "There can only be a maximum of `MaxProposals` active proposals."
        ]
      },
      {
        "name": "WrongProposalWeight",
        "doc": [
          "The given weight bound for the proposal was too low."
        ]
      },
      {
        "name": "WrongProposalLength",
        "doc": [
          "The given length bound for the proposal was too low."
        ]
      },
      {
        "name": "PrimeAccountNotMember",
        "doc": [
          "Prime account is not a member"
        ]
      }
    ],
    "errors_value": {
      "type": 459
    },
    "index": 23
  },
  {
    "name": "TechnicalCommittee",
    "prefix": "TechnicalCommittee",
    "storage": [
      {
        "name": "Proposals",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<H256>",
          "PlainTypeValue": 460
        },
        "fallback": "0x00",
        "docs": [
          " The hashes of the active proposals."
        ]
      },
      {
        "name": "ProposalOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Call",
            "keys_id": 12,
            "value_id": 250
          }
        },
        "fallback": "0x00",
        "docs": [
          " Actual proposal for a given hash, if it's current."
        ]
      },
      {
        "name": "Voting",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "pallet_collective:Votes",
            "keys_id": 12,
            "value_id": 458
          }
        },
        "fallback": "0x00",
        "docs": [
          " Votes on a given proposal, if it is ongoing."
        ]
      },
      {
        "name": "ProposalCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Proposals so far."
        ]
      },
      {
        "name": "Members",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 204
        },
        "fallback": "0x00",
        "docs": [
          " The current members of the collective. This is stored sorted (just by value)."
        ]
      },
      {
        "name": "Prime",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "AccountId",
          "PlainTypeValue": 0
        },
        "fallback": "0x00",
        "docs": [
          " The prime member that helps determine the default vote behavior in case of absentations."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1900",
        "name": "set_members",
        "docs": [
          "See [`Pallet::set_members`]."
        ],
        "args": [
          {
            "name": "new_members",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "prime",
            "type": "option<AccountId>",
            "type_name": "Option<AccountId>"
          },
          {
            "name": "old_count",
            "type": "U32",
            "type_name": "MemberCount"
          }
        ]
      },
      {
        "lookup": "1901",
        "name": "execute",
        "docs": [
          "See [`Pallet::execute`]."
        ],
        "args": [
          {
            "name": "proposal",
            "type": "Call",
            "type_name": "Box<<T as Config<I>>::Proposal>"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1902",
        "name": "propose",
        "docs": [
          "See [`Pallet::propose`]."
        ],
        "args": [
          {
            "name": "threshold",
            "type": "compact<U32>",
            "type_name": "MemberCount"
          },
          {
            "name": "proposal",
            "type": "Call",
            "type_name": "Box<<T as Config<I>>::Proposal>"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1903",
        "name": "vote",
        "docs": [
          "See [`Pallet::vote`]."
        ],
        "args": [
          {
            "name": "proposal",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          },
          {
            "name": "approve",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "1905",
        "name": "disapprove_proposal",
        "docs": [
          "See [`Pallet::disapprove_proposal`]."
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "1906",
        "name": "close",
        "docs": [
          "See [`Pallet::close`]."
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          },
          {
            "name": "proposal_weight_bound",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 300
    },
    "events": [
      {
        "lookup": "1900",
        "name": "Proposed",
        "docs": [
          "A motion (given hash) has been proposed (by given account) with a threshold (given",
          "`MemberCount`)."
        ],
        "args": [
          "AccountId",
          "U32",
          "H256",
          "U32"
        ],
        "args_name": [
          "account",
          "proposal_index",
          "proposal_hash",
          "threshold"
        ],
        "args_type_name": [
          "AccountId",
          "ProposalIndex",
          "Hash",
          "MemberCount"
        ]
      },
      {
        "lookup": "1901",
        "name": "Voted",
        "docs": [
          "A motion (given hash) has been voted on by given account, leaving",
          "a tally (yes votes and no votes given respectively as `MemberCount`)."
        ],
        "args": [
          "AccountId",
          "H256",
          "Bool",
          "U32",
          "U32"
        ],
        "args_name": [
          "account",
          "proposal_hash",
          "voted",
          "yes",
          "no"
        ],
        "args_type_name": [
          "AccountId",
          "Hash",
          "bool",
          "MemberCount",
          "MemberCount"
        ]
      },
      {
        "lookup": "1902",
        "name": "Approved",
        "docs": [
          "A motion was approved by the required threshold."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "proposal_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1903",
        "name": "Disapproved",
        "docs": [
          "A motion was not approved by the required threshold."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "proposal_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1904",
        "name": "Executed",
        "docs": [
          "A motion was executed; result will be `Ok` if it returned without error."
        ],
        "args": [
          "H256",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "proposal_hash",
          "result"
        ],
        "args_type_name": [
          "Hash",
          "DispatchResult"
        ]
      },
      {
        "lookup": "1905",
        "name": "MemberExecuted",
        "docs": [
          "A single member did some action; result will be `Ok` if it returned without error."
        ],
        "args": [
          "H256",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "proposal_hash",
          "result"
        ],
        "args_type_name": [
          "Hash",
          "DispatchResult"
        ]
      },
      {
        "lookup": "1906",
        "name": "Closed",
        "docs": [
          "A proposal was closed because its threshold was reached or after its duration was up."
        ],
        "args": [
          "H256",
          "U32",
          "U32"
        ],
        "args_name": [
          "proposal_hash",
          "yes",
          "no"
        ],
        "args_type_name": [
          "Hash",
          "MemberCount",
          "MemberCount"
        ]
      }
    ],
    "events_value": {
      "type": 49
    },
    "constants": [
      {
        "name": "MaxProposalWeight",
        "type": "sp_weights:weight_v2:Weight",
        "type_value": 9,
        "constants_value": "07004429353a0200a000",
        "docs": [
          " The maximum weight of a dispatch call that can be proposed and executed."
        ]
      }
    ],
    "errors": [
      {
        "name": "NotMember",
        "doc": [
          "Account is not a member"
        ]
      },
      {
        "name": "DuplicateProposal",
        "doc": [
          "Duplicate proposals not allowed"
        ]
      },
      {
        "name": "ProposalMissing",
        "doc": [
          "Proposal must exist"
        ]
      },
      {
        "name": "WrongIndex",
        "doc": [
          "Mismatched index"
        ]
      },
      {
        "name": "DuplicateVote",
        "doc": [
          "Duplicate vote ignored"
        ]
      },
      {
        "name": "AlreadyInitialized",
        "doc": [
          "Members are already initialized!"
        ]
      },
      {
        "name": "TooEarly",
        "doc": [
          "The close call was made too early, before the end of the voting."
        ]
      },
      {
        "name": "TooManyProposals",
        "doc": [
          "There can only be a maximum of `MaxProposals` active proposals."
        ]
      },
      {
        "name": "WrongProposalWeight",
        "doc": [
          "The given weight bound for the proposal was too low."
        ]
      },
      {
        "name": "WrongProposalLength",
        "doc": [
          "The given length bound for the proposal was too low."
        ]
      },
      {
        "name": "PrimeAccountNotMember",
        "doc": [
          "Prime account is not a member"
        ]
      }
    ],
    "errors_value": {
      "type": 461
    },
    "index": 25
  },
  {
    "name": "Tips",
    "prefix": "Tips",
    "storage": [
      {
        "name": "Tips",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "pallet_tips:OpenTip",
            "keys_id": 12,
            "value_id": 462
          }
        },
        "fallback": "0x00",
        "docs": [
          " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
          " This has the insecure enumerable hash function since the key itself is already",
          " guaranteed to be a secure hash."
        ]
      },
      {
        "name": "Reasons",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Vec<U8>",
            "keys_id": 12,
            "value_id": 13
          }
        },
        "fallback": "0x00",
        "docs": [
          " Simple preimage lookup from the reason's hash to the original data. Again, has an",
          " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1b00",
        "name": "report_awesome",
        "docs": [
          "See [`Pallet::report_awesome`]."
        ],
        "args": [
          {
            "name": "reason",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "1b01",
        "name": "retract_tip",
        "docs": [
          "See [`Pallet::retract_tip`]."
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "1b02",
        "name": "tip_new",
        "docs": [
          "See [`Pallet::tip_new`]."
        ],
        "args": [
          {
            "name": "reason",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "tip_value",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1b03",
        "name": "tip",
        "docs": [
          "See [`Pallet::tip`]."
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "tip_value",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1b04",
        "name": "close_tip",
        "docs": [
          "See [`Pallet::close_tip`]."
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "1b05",
        "name": "slash_tip",
        "docs": [
          "See [`Pallet::slash_tip`]."
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 301
    },
    "events": [
      {
        "lookup": "1b00",
        "name": "NewTip",
        "docs": [
          "A new tip suggestion has been opened."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "tip_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1b01",
        "name": "TipClosing",
        "docs": [
          "A tip suggestion has reached threshold and is closing."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "tip_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1b02",
        "name": "TipClosed",
        "docs": [
          "A tip suggestion has been closed."
        ],
        "args": [
          "H256",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "tip_hash",
          "who",
          "payout"
        ],
        "args_type_name": [
          "Hash",
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1b03",
        "name": "TipRetracted",
        "docs": [
          "A tip suggestion has been retracted."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "tip_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1b04",
        "name": "TipSlashed",
        "docs": [
          "A tip suggestion has been slashed."
        ],
        "args": [
          "H256",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "tip_hash",
          "finder",
          "deposit"
        ],
        "args_type_name": [
          "Hash",
          "AccountId",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 50
    },
    "constants": [
      {
        "name": "MaximumReasonLength",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00040000",
        "docs": [
          " Maximum acceptable reason length.",
          "",
          " Benchmarks depend on this value, be sure to update weights file when changing this value"
        ]
      },
      {
        "name": "DataDepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0010a5d4e80000000000000000000000",
        "docs": [
          " The amount held on deposit per byte within the tip report reason or bounty description."
        ]
      },
      {
        "name": "TipCountdown",
        "type": "U32",
        "type_value": 4,
        "constants_value": "201c0000",
        "docs": [
          " The period for which a tip remains open after is has achieved threshold tippers."
        ]
      },
      {
        "name": "TipFindersFee",
        "type": "U8",
        "type_value": 463,
        "constants_value": "01",
        "docs": [
          " The percent of the final tip which goes to the original reporter of the tip."
        ]
      },
      {
        "name": "TipReportDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0080c6a47e8d03000000000000000000",
        "docs": [
          " The amount held on deposit for placing a tip report."
        ]
      }
    ],
    "errors": [
      {
        "name": "ReasonTooBig",
        "doc": [
          "The reason given is just too big."
        ]
      },
      {
        "name": "AlreadyKnown",
        "doc": [
          "The tip was already found/started."
        ]
      },
      {
        "name": "UnknownTip",
        "doc": [
          "The tip hash is unknown."
        ]
      },
      {
        "name": "NotFinder",
        "doc": [
          "The account attempting to retract the tip is not the finder of the tip."
        ]
      },
      {
        "name": "StillOpen",
        "doc": [
          "The tip cannot be claimed/closed because there are not enough tippers yet."
        ]
      },
      {
        "name": "Premature",
        "doc": [
          "The tip cannot be claimed/closed because it's still in the countdown period."
        ]
      }
    ],
    "errors_value": {
      "type": 464
    },
    "index": 27
  },
  {
    "name": "Proxy",
    "prefix": "Proxy",
    "storage": [
      {
        "name": "Proxies",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@466U128",
            "keys_id": 0,
            "value_id": 465
          }
        },
        "fallback": "0x0000000000000000000000000000000000",
        "docs": [
          " The set of account proxies. Maps the account which has delegated to the accounts",
          " which are being delegated to, together with the amount held on deposit."
        ]
      },
      {
        "name": "Announcements",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:bounded_collections:bounded_vec:BoundedVec@470U128",
            "keys_id": 0,
            "value_id": 469
          }
        },
        "fallback": "0x0000000000000000000000000000000000",
        "docs": [
          " The announcements made by the proxy (key)."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1d00",
        "name": "proxy",
        "docs": [
          "See [`Pallet::proxy`]."
        ],
        "args": [
          {
            "name": "real",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "force_proxy_type",
            "type": "option<hydradx_runtime:system:ProxyType>",
            "type_name": "Option<ProxyType>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "1d01",
        "name": "add_proxy",
        "docs": [
          "See [`Pallet::add_proxy`]."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "proxy_type",
            "type": "hydradx_runtime:system:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumberFor"
          }
        ]
      },
      {
        "lookup": "1d02",
        "name": "remove_proxy",
        "docs": [
          "See [`Pallet::remove_proxy`]."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "proxy_type",
            "type": "hydradx_runtime:system:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumberFor"
          }
        ]
      },
      {
        "lookup": "1d03",
        "name": "remove_proxies",
        "docs": [
          "See [`Pallet::remove_proxies`]."
        ],
        "args": null
      },
      {
        "lookup": "1d04",
        "name": "create_pure",
        "docs": [
          "See [`Pallet::create_pure`]."
        ],
        "args": [
          {
            "name": "proxy_type",
            "type": "hydradx_runtime:system:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          }
        ]
      },
      {
        "lookup": "1d05",
        "name": "kill_pure",
        "docs": [
          "See [`Pallet::kill_pure`]."
        ],
        "args": [
          {
            "name": "spawner",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "proxy_type",
            "type": "hydradx_runtime:system:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "height",
            "type": "compact<U32>",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "ext_index",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1d06",
        "name": "announce",
        "docs": [
          "See [`Pallet::announce`]."
        ],
        "args": [
          {
            "name": "real",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "1d07",
        "name": "remove_announcement",
        "docs": [
          "See [`Pallet::remove_announcement`]."
        ],
        "args": [
          {
            "name": "real",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "1d08",
        "name": "reject_announcement",
        "docs": [
          "See [`Pallet::reject_announcement`]."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "1d09",
        "name": "proxy_announced",
        "docs": [
          "See [`Pallet::proxy_announced`]."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "real",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "force_proxy_type",
            "type": "option<hydradx_runtime:system:ProxyType>",
            "type_name": "Option<ProxyType>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 302
    },
    "events": [
      {
        "lookup": "1d00",
        "name": "ProxyExecuted",
        "docs": [
          "A proxy was executed correctly, with the given."
        ],
        "args": [
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "result"
        ],
        "args_type_name": [
          "DispatchResult"
        ]
      },
      {
        "lookup": "1d01",
        "name": "PureCreated",
        "docs": [
          "A pure account has been created by new proxy with given",
          "disambiguation index and proxy type."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "hydradx_runtime:system:ProxyType",
          "U16"
        ],
        "args_name": [
          "pure",
          "who",
          "proxy_type",
          "disambiguation_index"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "u16"
        ]
      },
      {
        "lookup": "1d02",
        "name": "Announced",
        "docs": [
          "An announcement was placed to make a call in the future."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "H256"
        ],
        "args_name": [
          "real",
          "proxy",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "CallHashOf"
        ]
      },
      {
        "lookup": "1d03",
        "name": "ProxyAdded",
        "docs": [
          "A proxy was added."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "hydradx_runtime:system:ProxyType",
          "U32"
        ],
        "args_name": [
          "delegator",
          "delegatee",
          "proxy_type",
          "delay"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "1d04",
        "name": "ProxyRemoved",
        "docs": [
          "A proxy was removed."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "hydradx_runtime:system:ProxyType",
          "U32"
        ],
        "args_name": [
          "delegator",
          "delegatee",
          "proxy_type",
          "delay"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "BlockNumberFor"
        ]
      }
    ],
    "events_value": {
      "type": 51
    },
    "constants": [
      {
        "name": "ProxyDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e011021eb600000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating a proxy.",
          "",
          " This is held for an additional storage item whose value size is",
          " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
        ]
      },
      {
        "name": "ProxyDepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "002c9980e60000000000000000000000",
        "docs": [
          " The amount of currency needed per proxy added.",
          "",
          " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
          " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
          " into account `32 + proxy_type.encode().len()` bytes of data."
        ]
      },
      {
        "name": "MaxProxies",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum amount of proxies allowed for a single account."
        ]
      },
      {
        "name": "MaxPending",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum amount of time-delayed announcements that are allowed to be pending."
        ]
      },
      {
        "name": "AnnouncementDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e011021eb600000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating an announcement.",
          "",
          " This is held when a new storage item holding a `Balance` is created (typically 16",
          " bytes)."
        ]
      },
      {
        "name": "AnnouncementDepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00583201cd0100000000000000000000",
        "docs": [
          " The amount of currency needed per announcement made.",
          "",
          " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
          " into a pre-existing storage value."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooMany",
        "doc": [
          "There are too many proxies registered or too many announcements pending."
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Proxy registration not found."
        ]
      },
      {
        "name": "NotProxy",
        "doc": [
          "Sender is not a proxy of the account to be proxied."
        ]
      },
      {
        "name": "Unproxyable",
        "doc": [
          "A call which is incompatible with the proxy type's filter was attempted."
        ]
      },
      {
        "name": "Duplicate",
        "doc": [
          "Account is already a proxy."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "Call may not be made by proxy because it may escalate its privileges."
        ]
      },
      {
        "name": "Unannounced",
        "doc": [
          "Announcement, if made at all, was made too recently."
        ]
      },
      {
        "name": "NoSelfProxy",
        "doc": [
          "Cannot add self as proxy."
        ]
      }
    ],
    "errors_value": {
      "type": 473
    },
    "index": 29
  },
  {
    "name": "Multisig",
    "prefix": "Multisig",
    "storage": [
      {
        "name": "Multisigs",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "[U8; 32]"
            ],
            "value": "pallet_multisig:Multisig",
            "keys_id": 474,
            "value_id": 475
          }
        },
        "fallback": "0x00",
        "docs": [
          " The set of open multisig operations."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1f00",
        "name": "as_multi_threshold_1",
        "docs": [
          "See [`Pallet::as_multi_threshold_1`]."
        ],
        "args": [
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "1f01",
        "name": "as_multi",
        "docs": [
          "See [`Pallet::as_multi`]."
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "maybe_timepoint",
            "type": "option<pallet_multisig:Timepoint>",
            "type_name": "Option<Timepoint<BlockNumberFor>>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          },
          {
            "name": "max_weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "1f02",
        "name": "approve_as_multi",
        "docs": [
          "See [`Pallet::approve_as_multi`]."
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "maybe_timepoint",
            "type": "option<pallet_multisig:Timepoint>",
            "type_name": "Option<Timepoint<BlockNumberFor>>"
          },
          {
            "name": "call_hash",
            "type": "[U8; 32]",
            "type_name": "[u8; 32]"
          },
          {
            "name": "max_weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "1f03",
        "name": "cancel_as_multi",
        "docs": [
          "See [`Pallet::cancel_as_multi`]."
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "timepoint",
            "type": "pallet_multisig:Timepoint",
            "type_name": "Timepoint<BlockNumberFor>"
          },
          {
            "name": "call_hash",
            "type": "[U8; 32]",
            "type_name": "[u8; 32]"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 304
    },
    "events": [
      {
        "lookup": "1f00",
        "name": "NewMultisig",
        "docs": [
          "A new multisig operation has begun."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "approving",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "CallHash"
        ]
      },
      {
        "lookup": "1f01",
        "name": "MultisigApproval",
        "docs": [
          "A multisig operation has been approved by someone."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "approving",
          "timepoint",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumberFor>",
          "AccountId",
          "CallHash"
        ]
      },
      {
        "lookup": "1f02",
        "name": "MultisigExecuted",
        "docs": [
          "A multisig operation has been executed."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "approving",
          "timepoint",
          "multisig",
          "call_hash",
          "result"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumberFor>",
          "AccountId",
          "CallHash",
          "DispatchResult"
        ]
      },
      {
        "lookup": "1f03",
        "name": "MultisigCancelled",
        "docs": [
          "A multisig operation has been cancelled."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "cancelling",
          "timepoint",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumberFor>",
          "AccountId",
          "CallHash"
        ]
      }
    ],
    "events_value": {
      "type": 54
    },
    "constants": [
      {
        "name": "DepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00a037cd4cb800000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating a multisig execution or to",
          " store a dispatch call for later.",
          "",
          " This is held for an additional storage item whose value size is",
          " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
          " `32 + sizeof(AccountId)` bytes."
        ]
      },
      {
        "name": "DepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00807584df0000000000000000000000",
        "docs": [
          " The amount of currency needed per unit threshold when creating a multisig execution.",
          "",
          " This is held for adding 32 bytes more into a pre-existing storage value."
        ]
      },
      {
        "name": "MaxSignatories",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum amount of signatories allowed in the multisig."
        ]
      }
    ],
    "errors": [
      {
        "name": "MinimumThreshold",
        "doc": [
          "Threshold must be 2 or greater."
        ]
      },
      {
        "name": "AlreadyApproved",
        "doc": [
          "Call is already approved by this signatory."
        ]
      },
      {
        "name": "NoApprovalsNeeded",
        "doc": [
          "Call doesn't need any (more) approvals."
        ]
      },
      {
        "name": "TooFewSignatories",
        "doc": [
          "There are too few signatories in the list."
        ]
      },
      {
        "name": "TooManySignatories",
        "doc": [
          "There are too many signatories in the list."
        ]
      },
      {
        "name": "SignatoriesOutOfOrder",
        "doc": [
          "The signatories were provided out of order; they should be ordered."
        ]
      },
      {
        "name": "SenderInSignatories",
        "doc": [
          "The sender was contained in the other signatories; it shouldn't be."
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Multisig operation not found when attempting to cancel."
        ]
      },
      {
        "name": "NotOwner",
        "doc": [
          "Only the account that originally created the multisig is able to cancel it."
        ]
      },
      {
        "name": "NoTimepoint",
        "doc": [
          "No timepoint was given, yet the multisig operation is already underway."
        ]
      },
      {
        "name": "WrongTimepoint",
        "doc": [
          "A different timepoint was given to the multisig operation that is underway."
        ]
      },
      {
        "name": "UnexpectedTimepoint",
        "doc": [
          "A timepoint was given, yet no multisig operation is underway."
        ]
      },
      {
        "name": "MaxWeightTooLow",
        "doc": [
          "The maximum weight information provided was too low."
        ]
      },
      {
        "name": "AlreadyStored",
        "doc": [
          "The data to be stored is already stored."
        ]
      }
    ],
    "errors_value": {
      "type": 477
    },
    "index": 31
  },
  {
    "name": "Uniques",
    "prefix": "Uniques",
    "storage": [
      {
        "name": "Class",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "pallet_uniques:types:CollectionDetails",
            "keys_id": 6,
            "value_id": 478
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of a collection."
        ]
      },
      {
        "name": "OwnershipAcceptance",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U128",
            "keys_id": 0,
            "value_id": 6
          }
        },
        "fallback": "0x00",
        "docs": [
          " The collection, if any, of which an account is willing to take ownership."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U128",
              "U128"
            ],
            "value": "NULL",
            "keys_id": 479,
            "value_id": 36
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items held by any given account; set out this way so that items owned by a single",
          " account can be enumerated."
        ]
      },
      {
        "name": "ClassAccount",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U128"
            ],
            "value": "NULL",
            "keys_id": 46,
            "value_id": 36
          }
        },
        "fallback": "0x00",
        "docs": [
          " The collections owned by any given account; set out this way so that collections owned by",
          " a single account can be enumerated."
        ]
      },
      {
        "name": "Asset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128",
              "U128"
            ],
            "value": "pallet_uniques:types:ItemDetails",
            "keys_id": 317,
            "value_id": 480
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items in existence and their ownership details."
        ]
      },
      {
        "name": "ClassMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "pallet_uniques:types:CollectionMetadata",
            "keys_id": 6,
            "value_id": 481
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of a collection."
        ]
      },
      {
        "name": "InstanceMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128",
              "U128"
            ],
            "value": "pallet_uniques:types:ItemMetadata",
            "keys_id": 317,
            "value_id": 482
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of an item."
        ]
      },
      {
        "name": "Attribute",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128",
              "option<U128>",
              "Vec<U8>"
            ],
            "value": "Tuple:Vec<U8>U128",
            "keys_id": 483,
            "value_id": 484
          }
        },
        "fallback": "0x00",
        "docs": [
          " Attributes of a collection."
        ]
      },
      {
        "name": "ItemPriceOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128",
              "U128"
            ],
            "value": "Tuple:U128option<AccountId>",
            "keys_id": 317,
            "value_id": 485
          }
        },
        "fallback": "0x00",
        "docs": [
          " Price of an asset instance."
        ]
      },
      {
        "name": "CollectionMaxSupply",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "U32",
            "keys_id": 6,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Keeps track of the number of items a collection might have."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "2000",
        "name": "create",
        "docs": [
          "See [`Pallet::create`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "admin",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "2001",
        "name": "force_create",
        "docs": [
          "See [`Pallet::force_create`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "owner",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "free_holding",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "2002",
        "name": "destroy",
        "docs": [
          "See [`Pallet::destroy`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "witness",
            "type": "pallet_uniques:types:DestroyWitness",
            "type_name": "DestroyWitness"
          }
        ]
      },
      {
        "lookup": "2003",
        "name": "mint",
        "docs": [
          "See [`Pallet::mint`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "owner",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "2004",
        "name": "burn",
        "docs": [
          "See [`Pallet::burn`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "check_owner",
            "type": "option<AccountId>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "2005",
        "name": "transfer",
        "docs": [
          "See [`Pallet::transfer`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "2006",
        "name": "redeposit",
        "docs": [
          "See [`Pallet::redeposit`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "items",
            "type": "Vec<U128>",
            "type_name": "Vec<ItemId>"
          }
        ]
      },
      {
        "lookup": "2007",
        "name": "freeze",
        "docs": [
          "See [`Pallet::freeze`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "2008",
        "name": "thaw",
        "docs": [
          "See [`Pallet::thaw`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "2009",
        "name": "freeze_collection",
        "docs": [
          "See [`Pallet::freeze_collection`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "200a",
        "name": "thaw_collection",
        "docs": [
          "See [`Pallet::thaw_collection`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "200b",
        "name": "transfer_ownership",
        "docs": [
          "See [`Pallet::transfer_ownership`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "owner",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "200c",
        "name": "set_team",
        "docs": [
          "See [`Pallet::set_team`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "issuer",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "200d",
        "name": "approve_transfer",
        "docs": [
          "See [`Pallet::approve_transfer`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "200e",
        "name": "cancel_approval",
        "docs": [
          "See [`Pallet::cancel_approval`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "maybe_check_delegate",
            "type": "option<AccountId>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "200f",
        "name": "force_item_status",
        "docs": [
          "See [`Pallet::force_item_status`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "owner",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "issuer",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "free_holding",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "2010",
        "name": "set_attribute",
        "docs": [
          "See [`Pallet::set_attribute`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U128>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          },
          {
            "name": "value",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, ValueLimit>"
          }
        ]
      },
      {
        "lookup": "2011",
        "name": "clear_attribute",
        "docs": [
          "See [`Pallet::clear_attribute`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U128>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          }
        ]
      },
      {
        "lookup": "2012",
        "name": "set_metadata",
        "docs": [
          "See [`Pallet::set_metadata`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "2013",
        "name": "clear_metadata",
        "docs": [
          "See [`Pallet::clear_metadata`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "2014",
        "name": "set_collection_metadata",
        "docs": [
          "See [`Pallet::set_collection_metadata`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "2015",
        "name": "clear_collection_metadata",
        "docs": [
          "See [`Pallet::clear_collection_metadata`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "2016",
        "name": "set_accept_ownership",
        "docs": [
          "See [`Pallet::set_accept_ownership`]."
        ],
        "args": [
          {
            "name": "maybe_collection",
            "type": "option<U128>",
            "type_name": "Option<CollectionId>"
          }
        ]
      },
      {
        "lookup": "2017",
        "name": "set_collection_max_supply",
        "docs": [
          "See [`Pallet::set_collection_max_supply`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "max_supply",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "2018",
        "name": "set_price",
        "docs": [
          "See [`Pallet::set_price`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "price",
            "type": "option<U128>",
            "type_name": "Option<ItemPrice>"
          },
          {
            "name": "whitelisted_buyer",
            "type": "option<AccountId>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "2019",
        "name": "buy_item",
        "docs": [
          "See [`Pallet::buy_item`]."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "bid_price",
            "type": "U128",
            "type_name": "ItemPrice"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 306
    },
    "events": [
      {
        "lookup": "2000",
        "name": "Created",
        "docs": [
          "A `collection` was created."
        ],
        "args": [
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "2001",
        "name": "ForceCreated",
        "docs": [
          "A `collection` was force-created."
        ],
        "args": [
          "U128",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId"
        ]
      },
      {
        "lookup": "2002",
        "name": "Destroyed",
        "docs": [
          "A `collection` was destroyed."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "2003",
        "name": "Issued",
        "docs": [
          "An `item` was issued."
        ],
        "args": [
          "U128",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "2004",
        "name": "Transferred",
        "docs": [
          "An `item` was transferred."
        ],
        "args": [
          "U128",
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "from",
          "to"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "2005",
        "name": "Burned",
        "docs": [
          "An `item` was destroyed."
        ],
        "args": [
          "U128",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "2006",
        "name": "Frozen",
        "docs": [
          "Some `item` was frozen."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "2007",
        "name": "Thawed",
        "docs": [
          "Some `item` was thawed."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "2008",
        "name": "CollectionFrozen",
        "docs": [
          "Some `collection` was frozen."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "2009",
        "name": "CollectionThawed",
        "docs": [
          "Some `collection` was thawed."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "200a",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "U128",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "new_owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId"
        ]
      },
      {
        "lookup": "200b",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "U128",
          "AccountId",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "200c",
        "name": "ApprovedTransfer",
        "docs": [
          "An `item` of a `collection` has been approved by the `owner` for transfer by",
          "a `delegate`."
        ],
        "args": [
          "U128",
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "200d",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for a `delegate` account to transfer the `item` of an item",
          "`collection` was cancelled by its `owner`."
        ],
        "args": [
          "U128",
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "200e",
        "name": "ItemStatusChanged",
        "docs": [
          "A `collection` has had its attributes changed by the `Force` origin."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "200f",
        "name": "CollectionMetadataSet",
        "docs": [
          "New metadata has been set for a `collection`."
        ],
        "args": [
          "U128",
          "Vec<U8>",
          "Bool"
        ],
        "args_name": [
          "collection",
          "data",
          "is_frozen"
        ],
        "args_type_name": [
          "CollectionId",
          "BoundedVec<u8, StringLimit>",
          "bool"
        ]
      },
      {
        "lookup": "2010",
        "name": "CollectionMetadataCleared",
        "docs": [
          "Metadata has been cleared for a `collection`."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "2011",
        "name": "MetadataSet",
        "docs": [
          "New metadata has been set for an item."
        ],
        "args": [
          "U128",
          "U128",
          "Vec<U8>",
          "Bool"
        ],
        "args_name": [
          "collection",
          "item",
          "data",
          "is_frozen"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "BoundedVec<u8, StringLimit>",
          "bool"
        ]
      },
      {
        "lookup": "2012",
        "name": "MetadataCleared",
        "docs": [
          "Metadata has been cleared for an item."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "2013",
        "name": "Redeposited",
        "docs": [
          "Metadata has been cleared for an item."
        ],
        "args": [
          "U128",
          "Vec<U128>"
        ],
        "args_name": [
          "collection",
          "successful_items"
        ],
        "args_type_name": [
          "CollectionId",
          "Vec<ItemId>"
        ]
      },
      {
        "lookup": "2014",
        "name": "AttributeSet",
        "docs": [
          "New attribute metadata has been set for a `collection` or `item`."
        ],
        "args": [
          "U128",
          "option<U128>",
          "Vec<U8>",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "maybe_item",
          "key",
          "value"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "BoundedVec<u8, KeyLimit>",
          "BoundedVec<u8, ValueLimit>"
        ]
      },
      {
        "lookup": "2015",
        "name": "AttributeCleared",
        "docs": [
          "Attribute metadata has been cleared for a `collection` or `item`."
        ],
        "args": [
          "U128",
          "option<U128>",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "maybe_item",
          "key"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "BoundedVec<u8, KeyLimit>"
        ]
      },
      {
        "lookup": "2016",
        "name": "OwnershipAcceptanceChanged",
        "docs": [
          "Ownership acceptance has changed for an account."
        ],
        "args": [
          "AccountId",
          "option<U128>"
        ],
        "args_name": [
          "who",
          "maybe_collection"
        ],
        "args_type_name": [
          "AccountId",
          "Option<CollectionId>"
        ]
      },
      {
        "lookup": "2017",
        "name": "CollectionMaxSupplySet",
        "docs": [
          "Max supply has been set for a collection."
        ],
        "args": [
          "U128",
          "U32"
        ],
        "args_name": [
          "collection",
          "max_supply"
        ],
        "args_type_name": [
          "CollectionId",
          "u32"
        ]
      },
      {
        "lookup": "2018",
        "name": "ItemPriceSet",
        "docs": [
          "The price was set for the instance."
        ],
        "args": [
          "U128",
          "U128",
          "U128",
          "option<AccountId>"
        ],
        "args_name": [
          "collection",
          "item",
          "price",
          "whitelisted_buyer"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "ItemPrice",
          "Option<AccountId>"
        ]
      },
      {
        "lookup": "2019",
        "name": "ItemPriceRemoved",
        "docs": [
          "The price for the instance was removed."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "201a",
        "name": "ItemBought",
        "docs": [
          "An item was bought."
        ],
        "args": [
          "U128",
          "U128",
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "price",
          "seller",
          "buyer"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "ItemPrice",
          "AccountId",
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 56
    },
    "constants": [
      {
        "name": "CollectionDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00000000000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for collection."
        ]
      },
      {
        "name": "ItemDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00000000000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an item."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0080c6a47e8d03000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your item."
        ]
      },
      {
        "name": "AttributeDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0010a5d4e80000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding an attribute to an item."
        ]
      },
      {
        "name": "DepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0010a5d4e80000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes store in metadata,",
          " either \"normal\" metadata or attribute metadata."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "48000000",
        "docs": [
          " The maximum length of data stored on-chain."
        ]
      },
      {
        "name": "KeyLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00010000",
        "docs": [
          " The maximum length of an attribute key."
        ]
      },
      {
        "name": "ValueLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00040000",
        "docs": [
          " The maximum length of an attribute value."
        ]
      }
    ],
    "errors": [
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "UnknownCollection",
        "doc": [
          "The given item ID is unknown."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The item ID has already been used for an item."
        ]
      },
      {
        "name": "WrongOwner",
        "doc": [
          "The owner turned out to be different to what was expected."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "Invalid witness data given."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The item ID is already taken."
        ]
      },
      {
        "name": "Frozen",
        "doc": [
          "The item or collection is frozen."
        ]
      },
      {
        "name": "WrongDelegate",
        "doc": [
          "The delegate turned out to be different to what was expected."
        ]
      },
      {
        "name": "NoDelegate",
        "doc": [
          "There is no delegate approved."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      },
      {
        "name": "Unaccepted",
        "doc": [
          "The named owner has not signed ownership of the collection is acceptable."
        ]
      },
      {
        "name": "Locked",
        "doc": [
          "The item is locked."
        ]
      },
      {
        "name": "MaxSupplyReached",
        "doc": [
          "All items have been minted."
        ]
      },
      {
        "name": "MaxSupplyAlreadySet",
        "doc": [
          "The max supply has already been set."
        ]
      },
      {
        "name": "MaxSupplyTooSmall",
        "doc": [
          "The provided max supply is less to the amount of items a collection already has."
        ]
      },
      {
        "name": "UnknownItem",
        "doc": [
          "The given item ID is unknown."
        ]
      },
      {
        "name": "NotForSale",
        "doc": [
          "Item is not for sale."
        ]
      },
      {
        "name": "BidTooLow",
        "doc": [
          "The provided bid is too low."
        ]
      }
    ],
    "errors_value": {
      "type": 486
    },
    "index": 32
  },
  {
    "name": "AssetRegistry",
    "prefix": "AssetRegistry",
    "storage": [
      {
        "name": "Assets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_asset_registry:types:AssetDetails",
            "keys_id": 4,
            "value_id": 487
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of an asset."
        ]
      },
      {
        "name": "NextAssetId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x01000000",
        "docs": [
          " Next available asset id. This is sequential id assigned for each new registered asset."
        ]
      },
      {
        "name": "AssetIds",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "Vec<U8>"
            ],
            "value": "U32",
            "keys_id": 65,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Mapping between asset name and asset id."
        ]
      },
      {
        "name": "AssetLocations",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "staging_xcm:v3:multilocation:MultiLocation",
            "keys_id": 4,
            "value_id": 68
          }
        },
        "fallback": "0x00",
        "docs": [
          " Native location of an asset."
        ]
      },
      {
        "name": "BannedAssets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "NULL",
            "keys_id": 4,
            "value_id": 36
          }
        },
        "fallback": "0x00",
        "docs": [
          " Non-native assets which transfer is banned."
        ]
      },
      {
        "name": "LocationAssets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "staging_xcm:v3:multilocation:MultiLocation"
            ],
            "value": "U32",
            "keys_id": 68,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Local asset for native location."
        ]
      },
      {
        "name": "ExistentialDepositCounter",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Number of accounts that paid existential deposits for insufficient assets.",
          " This storage is used by `SufficiencyCheck`."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3300",
        "name": "register",
        "docs": [
          "See [`Pallet::register`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "option<U32>",
            "type_name": "Option<AssetId>"
          },
          {
            "name": "name",
            "type": "option<bounded_collections:bounded_vec:BoundedVec@65>",
            "type_name": "Option<Name<StringLimit>>"
          },
          {
            "name": "asset_type",
            "type": "pallet_asset_registry:types:AssetType",
            "type_name": "AssetType"
          },
          {
            "name": "existential_deposit",
            "type": "option<U128>",
            "type_name": "Option<Balance>"
          },
          {
            "name": "symbol",
            "type": "option<bounded_collections:bounded_vec:BoundedVec@65>",
            "type_name": "Option<Symbol<StringLimit>>"
          },
          {
            "name": "decimals",
            "type": "option<U8>",
            "type_name": "Option<u8>"
          },
          {
            "name": "location",
            "type": "option<staging_xcm:v3:multilocation:MultiLocation>",
            "type_name": "Option<AssetNativeLocation>"
          },
          {
            "name": "xcm_rate_limit",
            "type": "option<U128>",
            "type_name": "Option<Balance>"
          },
          {
            "name": "is_sufficient",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "3301",
        "name": "update",
        "docs": [
          "See [`Pallet::update`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "name",
            "type": "option<bounded_collections:bounded_vec:BoundedVec@65>",
            "type_name": "Option<Name<StringLimit>>"
          },
          {
            "name": "asset_type",
            "type": "option<pallet_asset_registry:types:AssetType>",
            "type_name": "Option<AssetType>"
          },
          {
            "name": "existential_deposit",
            "type": "option<U128>",
            "type_name": "Option<Balance>"
          },
          {
            "name": "xcm_rate_limit",
            "type": "option<U128>",
            "type_name": "Option<Balance>"
          },
          {
            "name": "is_sufficient",
            "type": "option<Bool>",
            "type_name": "Option<bool>"
          },
          {
            "name": "symbol",
            "type": "option<bounded_collections:bounded_vec:BoundedVec@65>",
            "type_name": "Option<Symbol<StringLimit>>"
          },
          {
            "name": "decimals",
            "type": "option<U8>",
            "type_name": "Option<u8>"
          },
          {
            "name": "location",
            "type": "option<staging_xcm:v3:multilocation:MultiLocation>",
            "type_name": "Option<AssetNativeLocation>"
          }
        ]
      },
      {
        "lookup": "3304",
        "name": "register_external",
        "docs": [
          "See [`Pallet::register_external`]."
        ],
        "args": [
          {
            "name": "location",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetNativeLocation"
          }
        ]
      },
      {
        "lookup": "3305",
        "name": "ban_asset",
        "docs": [
          "See [`Pallet::ban_asset`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          }
        ]
      },
      {
        "lookup": "3306",
        "name": "unban_asset",
        "docs": [
          "See [`Pallet::unban_asset`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 308
    },
    "events": [
      {
        "lookup": "3300",
        "name": "ExistentialDepositPaid",
        "docs": [
          "Existential deposit for insufficinet asset was paid.",
          "`SufficiencyCheck` triggers this event."
        ],
        "args": [
          "AccountId",
          "U32",
          "U128"
        ],
        "args_name": [
          "who",
          "fee_asset",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "Balance"
        ]
      },
      {
        "lookup": "3301",
        "name": "Registered",
        "docs": [
          "Asset was registered."
        ],
        "args": [
          "U32",
          "option<bounded_collections:bounded_vec:BoundedVec@65>",
          "pallet_asset_registry:types:AssetType",
          "U128",
          "option<U128>",
          "option<bounded_collections:bounded_vec:BoundedVec@65>",
          "option<U8>",
          "Bool"
        ],
        "args_name": [
          "asset_id",
          "asset_name",
          "asset_type",
          "existential_deposit",
          "xcm_rate_limit",
          "symbol",
          "decimals",
          "is_sufficient"
        ],
        "args_type_name": [
          "AssetId",
          "Option<BoundedVec<u8, StringLimit>>",
          "AssetType",
          "Balance",
          "Option<Balance>",
          "Option<BoundedVec<u8, StringLimit>>",
          "Option<u8>",
          "bool"
        ]
      },
      {
        "lookup": "3302",
        "name": "Updated",
        "docs": [
          "Asset was updated."
        ],
        "args": [
          "U32",
          "option<bounded_collections:bounded_vec:BoundedVec@65>",
          "pallet_asset_registry:types:AssetType",
          "U128",
          "option<U128>",
          "option<bounded_collections:bounded_vec:BoundedVec@65>",
          "option<U8>",
          "Bool"
        ],
        "args_name": [
          "asset_id",
          "asset_name",
          "asset_type",
          "existential_deposit",
          "xcm_rate_limit",
          "symbol",
          "decimals",
          "is_sufficient"
        ],
        "args_type_name": [
          "AssetId",
          "Option<BoundedVec<u8, StringLimit>>",
          "AssetType",
          "Balance",
          "Option<Balance>",
          "Option<BoundedVec<u8, StringLimit>>",
          "Option<u8>",
          "bool"
        ]
      },
      {
        "lookup": "3303",
        "name": "LocationSet",
        "docs": [
          "Native location set for an asset."
        ],
        "args": [
          "U32",
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id",
          "location"
        ],
        "args_type_name": [
          "AssetId",
          "AssetNativeLocation"
        ]
      },
      {
        "lookup": "3304",
        "name": "AssetBanned",
        "docs": [
          "Asset was banned."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      },
      {
        "lookup": "3305",
        "name": "AssetUnbanned",
        "docs": [
          "Asset's ban was removed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetId"
        ]
      }
    ],
    "events_value": {
      "type": 63
    },
    "constants": [
      {
        "name": "SequentialIdStartAt",
        "type": "U32",
        "type_value": 4,
        "constants_value": "40420f00",
        "docs": null
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum length of a name or symbol stored on-chain."
        ]
      },
      {
        "name": "MinStringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "03000000",
        "docs": [
          " The min length of a name or symbol stored on-chain."
        ]
      },
      {
        "name": "RegExternalWeightMultiplier",
        "type": "U64",
        "type_value": 11,
        "constants_value": "0a00000000000000",
        "docs": [
          " Weight multiplier for `register_external` extrinsic"
        ]
      }
    ],
    "errors": [
      {
        "name": "NoIdAvailable",
        "doc": [
          "Asset ID is not available. This only happens when it reaches the MAX value of given id type."
        ]
      },
      {
        "name": "AssetNotFound",
        "doc": [
          "Invalid asset name or symbol."
        ]
      },
      {
        "name": "TooShort",
        "doc": [
          "Length of name or symbol is less than min. length."
        ]
      },
      {
        "name": "InvalidSymbol",
        "doc": [
          "Asset's symbol can't contain whitespace characters ."
        ]
      },
      {
        "name": "AssetNotRegistered",
        "doc": [
          "Asset ID is not registered in the asset-registry."
        ]
      },
      {
        "name": "AssetAlreadyRegistered",
        "doc": [
          "Asset is already registered."
        ]
      },
      {
        "name": "InvalidSharedAssetLen",
        "doc": [
          "Incorrect number of assets provided to create shared asset."
        ]
      },
      {
        "name": "CannotUpdateLocation",
        "doc": [
          "Cannot update asset location."
        ]
      },
      {
        "name": "NotInReservedRange",
        "doc": [
          "Selected asset id is out of reserved range."
        ]
      },
      {
        "name": "LocationAlreadyRegistered",
        "doc": [
          "Location already registered with different asset."
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "Origin is forbidden to set/update value."
        ]
      },
      {
        "name": "InsufficientBalance",
        "doc": [
          "Balance too low."
        ]
      },
      {
        "name": "ForbiddenSufficiencyChange",
        "doc": [
          "Sufficient assets can't be changed to insufficient."
        ]
      },
      {
        "name": "AssetAlreadyBanned",
        "doc": [
          "Asset is already banned."
        ]
      },
      {
        "name": "AssetNotBanned",
        "doc": [
          "Asset is not banned."
        ]
      }
    ],
    "errors_value": {
      "type": 488
    },
    "index": 51
  },
  {
    "name": "Claims",
    "prefix": "Claims",
    "storage": [
      {
        "name": "Claims",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "[U8; 20]"
            ],
            "value": "U128",
            "keys_id": 80,
            "value_id": 6
          }
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Asset id storage for each shared token"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3500",
        "name": "claim",
        "docs": [
          "See [`Pallet::claim`]."
        ],
        "args": [
          {
            "name": "ethereum_signature",
            "type": "[U8; 65]",
            "type_name": "EcdsaSignature"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 312
    },
    "events": [
      {
        "lookup": "3500",
        "name": "Claim",
        "docs": null,
        "args": [
          "AccountId",
          "[U8; 20]",
          "U128"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "AccountId",
          "EthereumAddress",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 79
    },
    "errors": [
      {
        "name": "InvalidEthereumSignature",
        "doc": [
          "Ethereum signature is not valid"
        ]
      },
      {
        "name": "NoClaimOrAlreadyClaimed",
        "doc": [
          "Claim is not valid"
        ]
      },
      {
        "name": "BalanceOverflow",
        "doc": [
          "Value reached maximum and cannot be incremented further"
        ]
      }
    ],
    "errors_value": {
      "type": 489
    },
    "index": 53
  },
  {
    "name": "GenesisHistory",
    "prefix": "GenesisHistory",
    "storage": [
      {
        "name": "PreviousChain",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_genesis_history:Chain",
          "PlainTypeValue": 490
        },
        "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "docs": null
      }
    ],
    "calls_value": {
      "type": 315
    },
    "errors": null,
    "errors_value": null,
    "index": 55
  },
  {
    "name": "CollatorRewards",
    "prefix": "CollatorRewards",
    "storage": [
      {
        "name": "Collators",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<AccountId>",
            "keys_id": 4,
            "value_id": 491
          }
        },
        "fallback": "0x00",
        "docs": [
          " Stores the collators per session (index)."
        ]
      }
    ],
    "events": [
      {
        "lookup": "3900",
        "name": "CollatorRewarded",
        "docs": [
          "Collator was rewarded."
        ],
        "args": [
          "AccountId",
          "U128",
          "U32"
        ],
        "args_name": [
          "who",
          "amount",
          "currency"
        ],
        "args_type_name": [
          "AccountId",
          "Balance",
          "CurrencyId"
        ]
      }
    ],
    "events_value": {
      "type": 81
    },
    "constants": [
      {
        "name": "RewardPerCollator",
        "type": "U128",
        "type_value": 6,
        "constants_value": "78fa8b75289e01000000000000000000",
        "docs": [
          " Reward amount per one collator."
        ]
      },
      {
        "name": "RewardCurrencyId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Reward Asset Id"
        ]
      }
    ],
    "errors": null,
    "errors_value": {
      "type": 492
    },
    "index": 57
  },
  {
    "name": "Omnipool",
    "prefix": "Omnipool",
    "storage": [
      {
        "name": "Assets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_omnipool:types:AssetState",
            "keys_id": 4,
            "value_id": 493
          }
        },
        "fallback": "0x00",
        "docs": [
          " State of an asset in the omnipool"
        ]
      },
      {
        "name": "HubAssetImbalance",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_omnipool:types:SimpleImbalance",
          "PlainTypeValue": 494
        },
        "fallback": "0x0000000000000000000000000000000001",
        "docs": [
          " Imbalance of hub asset"
        ]
      },
      {
        "name": "HubAssetTradability",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U8",
          "PlainTypeValue": 84
        },
        "fallback": "0x01",
        "docs": [
          " Tradable state of hub asset."
        ]
      },
      {
        "name": "Positions",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "pallet_omnipool:types:Position",
            "keys_id": 6,
            "value_id": 495
          }
        },
        "fallback": "0x00",
        "docs": [
          " LP positions. Maps NFT instance id to corresponding position"
        ]
      },
      {
        "name": "NextPositionId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Position ids sequencer"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3b01",
        "name": "add_token",
        "docs": [
          "See [`Pallet::add_token`]."
        ],
        "args": [
          {
            "name": "asset",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "initial_price",
            "type": "U128",
            "type_name": "Price"
          },
          {
            "name": "weight_cap",
            "type": "U32",
            "type_name": "Permill"
          },
          {
            "name": "position_owner",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3b02",
        "name": "add_liquidity",
        "docs": [
          "See [`Pallet::add_liquidity`]."
        ],
        "args": [
          {
            "name": "asset",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3b03",
        "name": "remove_liquidity",
        "docs": [
          "See [`Pallet::remove_liquidity`]."
        ],
        "args": [
          {
            "name": "position_id",
            "type": "U128",
            "type_name": "PositionItemId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3b04",
        "name": "sacrifice_position",
        "docs": [
          "See [`Pallet::sacrifice_position`]."
        ],
        "args": [
          {
            "name": "position_id",
            "type": "U128",
            "type_name": "PositionItemId"
          }
        ]
      },
      {
        "lookup": "3b05",
        "name": "sell",
        "docs": [
          "See [`Pallet::sell`]."
        ],
        "args": [
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "min_buy_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3b06",
        "name": "buy",
        "docs": [
          "See [`Pallet::buy`]."
        ],
        "args": [
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "max_sell_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3b07",
        "name": "set_asset_tradable_state",
        "docs": [
          "See [`Pallet::set_asset_tradable_state`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "state",
            "type": "U8",
            "type_name": "Tradability"
          }
        ]
      },
      {
        "lookup": "3b08",
        "name": "refund_refused_asset",
        "docs": [
          "See [`Pallet::refund_refused_asset`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "recipient",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3b09",
        "name": "set_asset_weight_cap",
        "docs": [
          "See [`Pallet::set_asset_weight_cap`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "cap",
            "type": "U32",
            "type_name": "Permill"
          }
        ]
      },
      {
        "lookup": "3b0b",
        "name": "withdraw_protocol_liquidity",
        "docs": [
          "See [`Pallet::withdraw_protocol_liquidity`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "price",
            "type": "Tuple:U128U128",
            "type_name": "(Balance, Balance)"
          },
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3b0c",
        "name": "remove_token",
        "docs": [
          "See [`Pallet::remove_token`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "beneficiary",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 316
    },
    "events": [
      {
        "lookup": "3b00",
        "name": "TokenAdded",
        "docs": [
          "An asset was added to Omnipool"
        ],
        "args": [
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "initial_amount",
          "initial_price"
        ],
        "args_type_name": [
          "AssetId",
          "Balance",
          "Price"
        ]
      },
      {
        "lookup": "3b01",
        "name": "TokenRemoved",
        "docs": [
          "An asset was removed from Omnipool"
        ],
        "args": [
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "amount",
          "hub_withdrawn"
        ],
        "args_type_name": [
          "AssetId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "3b02",
        "name": "LiquidityAdded",
        "docs": [
          "Liquidity of an asset was added to Omnipool."
        ],
        "args": [
          "AccountId",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_id",
          "amount",
          "position_id"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "Balance",
          "PositionItemId"
        ]
      },
      {
        "lookup": "3b03",
        "name": "LiquidityRemoved",
        "docs": [
          "Liquidity of an asset was removed from Omnipool."
        ],
        "args": [
          "AccountId",
          "U128",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "position_id",
          "asset_id",
          "shares_removed",
          "fee"
        ],
        "args_type_name": [
          "AccountId",
          "PositionItemId",
          "AssetId",
          "Balance",
          "FixedU128"
        ]
      },
      {
        "lookup": "3b04",
        "name": "ProtocolLiquidityRemoved",
        "docs": [
          "PRotocol Liquidity was removed from Omnipool."
        ],
        "args": [
          "AccountId",
          "U32",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_id",
          "amount",
          "hub_amount",
          "shares_removed"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "Balance",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "3b05",
        "name": "SellExecuted",
        "docs": [
          "Sell trade executed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128",
          "U128",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_in",
          "asset_out",
          "amount_in",
          "amount_out",
          "hub_amount_in",
          "hub_amount_out",
          "asset_fee_amount",
          "protocol_fee_amount"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "Balance",
          "Balance",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "3b06",
        "name": "BuyExecuted",
        "docs": [
          "Buy trade executed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128",
          "U128",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_in",
          "asset_out",
          "amount_in",
          "amount_out",
          "hub_amount_in",
          "hub_amount_out",
          "asset_fee_amount",
          "protocol_fee_amount"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "Balance",
          "Balance",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "3b07",
        "name": "PositionCreated",
        "docs": [
          "LP Position was created and NFT instance minted."
        ],
        "args": [
          "U128",
          "AccountId",
          "U32",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "position_id",
          "owner",
          "asset",
          "amount",
          "shares",
          "price"
        ],
        "args_type_name": [
          "PositionItemId",
          "AccountId",
          "AssetId",
          "Balance",
          "Balance",
          "Price"
        ]
      },
      {
        "lookup": "3b08",
        "name": "PositionDestroyed",
        "docs": [
          "LP Position was destroyed and NFT instance burned."
        ],
        "args": [
          "U128",
          "AccountId"
        ],
        "args_name": [
          "position_id",
          "owner"
        ],
        "args_type_name": [
          "PositionItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3b09",
        "name": "PositionUpdated",
        "docs": [
          "LP Position was updated."
        ],
        "args": [
          "U128",
          "AccountId",
          "U32",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "position_id",
          "owner",
          "asset",
          "amount",
          "shares",
          "price"
        ],
        "args_type_name": [
          "PositionItemId",
          "AccountId",
          "AssetId",
          "Balance",
          "Balance",
          "Price"
        ]
      },
      {
        "lookup": "3b0a",
        "name": "TradableStateUpdated",
        "docs": [
          "Asset's tradable state has been updated."
        ],
        "args": [
          "U32",
          "U8"
        ],
        "args_name": [
          "asset_id",
          "state"
        ],
        "args_type_name": [
          "AssetId",
          "Tradability"
        ]
      },
      {
        "lookup": "3b0b",
        "name": "AssetRefunded",
        "docs": [
          "Amount has been refunded for asset which has not been accepted to add to omnipool."
        ],
        "args": [
          "U32",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "amount",
          "recipient"
        ],
        "args_type_name": [
          "AssetId",
          "Balance",
          "AccountId"
        ]
      },
      {
        "lookup": "3b0c",
        "name": "AssetWeightCapUpdated",
        "docs": [
          "Asset's weight cap has been updated."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "cap"
        ],
        "args_type_name": [
          "AssetId",
          "Permill"
        ]
      }
    ],
    "events_value": {
      "type": 82
    },
    "constants": [
      {
        "name": "HdxAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset ID"
        ]
      },
      {
        "name": "HubAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "01000000",
        "docs": [
          " Hub Asset ID"
        ]
      },
      {
        "name": "MinWithdrawalFee",
        "type": "U32",
        "type_value": 85,
        "constants_value": "64000000",
        "docs": [
          " Minimum withdrawal fee"
        ]
      },
      {
        "name": "MinimumTradingLimit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "e8030000000000000000000000000000",
        "docs": [
          " Minimum trading limit"
        ]
      },
      {
        "name": "MinimumPoolLiquidity",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40420f00000000000000000000000000",
        "docs": [
          " Minimum pool liquidity which can be added"
        ]
      },
      {
        "name": "MaxInRatio",
        "type": "U128",
        "type_value": 6,
        "constants_value": "03000000000000000000000000000000",
        "docs": [
          " Max fraction of asset reserve to sell in single transaction"
        ]
      },
      {
        "name": "MaxOutRatio",
        "type": "U128",
        "type_value": 6,
        "constants_value": "03000000000000000000000000000000",
        "docs": [
          " Max fraction of asset reserve to buy in single transaction"
        ]
      },
      {
        "name": "NFTCollectionId",
        "type": "U128",
        "type_value": 6,
        "constants_value": "39050000000000000000000000000000",
        "docs": [
          " Non fungible class id"
        ]
      }
    ],
    "errors": [
      {
        "name": "InsufficientBalance",
        "doc": [
          "Balance too low"
        ]
      },
      {
        "name": "AssetAlreadyAdded",
        "doc": [
          "Asset is already in omnipool"
        ]
      },
      {
        "name": "AssetNotFound",
        "doc": [
          "Asset is not in omnipool"
        ]
      },
      {
        "name": "MissingBalance",
        "doc": [
          "Failed to add token to Omnipool due to insufficient initial liquidity."
        ]
      },
      {
        "name": "InvalidInitialAssetPrice",
        "doc": [
          "Invalid initial asset price."
        ]
      },
      {
        "name": "BuyLimitNotReached",
        "doc": [
          "Slippage protection - minimum limit has not been reached."
        ]
      },
      {
        "name": "SellLimitExceeded",
        "doc": [
          "Slippage protection - maximum limit has been exceeded."
        ]
      },
      {
        "name": "PositionNotFound",
        "doc": [
          "Position has not been found."
        ]
      },
      {
        "name": "InsufficientShares",
        "doc": [
          "Insufficient shares in position"
        ]
      },
      {
        "name": "NotAllowed",
        "doc": [
          "Asset is not allowed to be traded."
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "Signed account is not owner of position instance."
        ]
      },
      {
        "name": "AssetWeightCapExceeded",
        "doc": [
          "Asset weight cap has been exceeded."
        ]
      },
      {
        "name": "AssetNotRegistered",
        "doc": [
          "Asset is not registered in asset registry"
        ]
      },
      {
        "name": "InsufficientLiquidity",
        "doc": [
          "Provided liquidity is below minimum allowed limit"
        ]
      },
      {
        "name": "InsufficientTradingAmount",
        "doc": [
          "Traded amount is below minimum allowed limit"
        ]
      },
      {
        "name": "SameAssetTradeNotAllowed",
        "doc": [
          "Sell or buy with same asset ids is not allowed."
        ]
      },
      {
        "name": "HubAssetUpdateError",
        "doc": [
          "LRNA update after trade results in positive value."
        ]
      },
      {
        "name": "PositiveImbalance",
        "doc": [
          "Imbalance results in positive value."
        ]
      },
      {
        "name": "InvalidSharesAmount",
        "doc": [
          "Amount of shares provided cannot be 0."
        ]
      },
      {
        "name": "InvalidHubAssetTradableState",
        "doc": [
          "Hub asset is only allowed to be sold."
        ]
      },
      {
        "name": "AssetRefundNotAllowed",
        "doc": [
          "Asset is not allowed to be refunded."
        ]
      },
      {
        "name": "MaxOutRatioExceeded",
        "doc": [
          "Max fraction of asset to buy has been exceeded."
        ]
      },
      {
        "name": "MaxInRatioExceeded",
        "doc": [
          "Max fraction of asset to sell has been exceeded."
        ]
      },
      {
        "name": "PriceDifferenceTooHigh",
        "doc": [
          "Max allowed price difference has been exceeded."
        ]
      },
      {
        "name": "InvalidOraclePrice",
        "doc": [
          "Invalid oracle price - division by zero."
        ]
      },
      {
        "name": "InvalidWithdrawalFee",
        "doc": [
          "Failed to calculate withdrawal fee."
        ]
      },
      {
        "name": "FeeOverdraft",
        "doc": [
          "More than allowed amount of fee has been transferred."
        ]
      },
      {
        "name": "SharesRemaining",
        "doc": [
          "Token cannot be removed from Omnipool due to shares still owned by other users."
        ]
      },
      {
        "name": "AssetNotFrozen",
        "doc": [
          "Token cannot be removed from Omnipool because asset is not frozen."
        ]
      },
      {
        "name": "ZeroAmountOut",
        "doc": [
          "Calculated amount out from sell trade is zero."
        ]
      }
    ],
    "errors_value": {
      "type": 496
    },
    "index": 59
  },
  {
    "name": "TransactionPause",
    "prefix": "TransactionPause",
    "storage": [
      {
        "name": "PausedTransactions",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "Tuple:bounded_collections:bounded_vec:BoundedVec@498bounded_collections:bounded_vec:BoundedVec@498"
            ],
            "value": "NULL",
            "keys_id": 497,
            "value_id": 36
          }
        },
        "fallback": "0x00",
        "docs": [
          " The paused transaction map",
          "",
          " map (PalletNameBytes, FunctionNameBytes) => Option<()>"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3c00",
        "name": "pause_transaction",
        "docs": [
          "See [`Pallet::pause_transaction`]."
        ],
        "args": [
          {
            "name": "pallet_name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "function_name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "3c01",
        "name": "unpause_transaction",
        "docs": [
          "See [`Pallet::unpause_transaction`]."
        ],
        "args": [
          {
            "name": "pallet_name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "function_name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 318
    },
    "events": [
      {
        "lookup": "3c00",
        "name": "TransactionPaused",
        "docs": [
          "Paused transaction"
        ],
        "args": [
          "Vec<U8>",
          "Vec<U8>"
        ],
        "args_name": [
          "pallet_name_bytes",
          "function_name_bytes"
        ],
        "args_type_name": [
          "Bytes",
          "Bytes"
        ]
      },
      {
        "lookup": "3c01",
        "name": "TransactionUnpaused",
        "docs": [
          "Unpaused transaction"
        ],
        "args": [
          "Vec<U8>",
          "Vec<U8>"
        ],
        "args_name": [
          "pallet_name_bytes",
          "function_name_bytes"
        ],
        "args_type_name": [
          "Bytes",
          "Bytes"
        ]
      }
    ],
    "events_value": {
      "type": 86
    },
    "errors": [
      {
        "name": "CannotPause",
        "doc": [
          "can not pause"
        ]
      },
      {
        "name": "InvalidCharacter",
        "doc": [
          "invalid character encoding"
        ]
      },
      {
        "name": "NameTooLong",
        "doc": [
          "pallet name or function name is too long"
        ]
      }
    ],
    "errors_value": {
      "type": 499
    },
    "index": 60
  },
  {
    "name": "Duster",
    "prefix": "Duster",
    "storage": [
      {
        "name": "AccountBlacklist",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "NULL",
            "keys_id": 0,
            "value_id": 36
          }
        },
        "fallback": "0x00",
        "docs": [
          " Accounts excluded from dusting."
        ]
      },
      {
        "name": "RewardAccount",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "AccountId",
          "PlainTypeValue": 0
        },
        "fallback": "0x00",
        "docs": [
          " Account to take reward from."
        ]
      },
      {
        "name": "DustAccount",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "AccountId",
          "PlainTypeValue": 0
        },
        "fallback": "0x00",
        "docs": [
          " Account to send dust to."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3d00",
        "name": "dust_account",
        "docs": [
          "See [`Pallet::dust_account`]."
        ],
        "args": [
          {
            "name": "account",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          }
        ]
      },
      {
        "lookup": "3d01",
        "name": "add_nondustable_account",
        "docs": [
          "See [`Pallet::add_nondustable_account`]."
        ],
        "args": [
          {
            "name": "account",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3d02",
        "name": "remove_nondustable_account",
        "docs": [
          "See [`Pallet::remove_nondustable_account`]."
        ],
        "args": [
          {
            "name": "account",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 319
    },
    "events": [
      {
        "lookup": "3d00",
        "name": "Dusted",
        "docs": [
          "Account dusted."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3d01",
        "name": "Added",
        "docs": [
          "Account added to non-dustable list."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "who"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "3d02",
        "name": "Removed",
        "docs": [
          "Account removed from non-dustable list."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "who"
        ],
        "args_type_name": [
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 87
    },
    "constants": [
      {
        "name": "Reward",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00000000000000000000000000000000",
        "docs": [
          " Reward amount"
        ]
      },
      {
        "name": "NativeCurrencyId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset Id"
        ]
      }
    ],
    "errors": [
      {
        "name": "AccountBlacklisted",
        "doc": [
          "Account is excluded from dusting."
        ]
      },
      {
        "name": "AccountNotBlacklisted",
        "doc": [
          "Account is not present in the non-dustable list."
        ]
      },
      {
        "name": "ZeroBalance",
        "doc": [
          "The balance is zero."
        ]
      },
      {
        "name": "BalanceSufficient",
        "doc": [
          "The balance is sufficient to keep account open."
        ]
      },
      {
        "name": "DustAccountNotSet",
        "doc": [
          "Dust account is not set."
        ]
      },
      {
        "name": "ReserveAccountNotSet",
        "doc": [
          "Reserve account is not set."
        ]
      }
    ],
    "errors_value": {
      "type": 500
    },
    "index": 61
  },
  {
    "name": "OmnipoolWarehouseLM",
    "prefix": "OmnipoolWarehouseLM",
    "storage": [
      {
        "name": "FarmSequencer",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Id sequencer for `GlobalFarm` and `YieldFarm`."
        ]
      },
      {
        "name": "DepositSequencer",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": null
      },
      {
        "name": "GlobalFarm",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_liquidity_mining:types:GlobalFarmData@501",
            "keys_id": 4,
            "value_id": 501
          }
        },
        "fallback": "0x00",
        "docs": null
      },
      {
        "name": "YieldFarm",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32",
              "U32"
            ],
            "value": "pallet_liquidity_mining:types:YieldFarmData@504",
            "keys_id": 503,
            "value_id": 504
          }
        },
        "fallback": "0x00",
        "docs": [
          " Yield farm details."
        ]
      },
      {
        "name": "Deposit",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "pallet_liquidity_mining:types:DepositData@505",
            "keys_id": 6,
            "value_id": 505
          }
        },
        "fallback": "0x00",
        "docs": [
          " Deposit details."
        ]
      },
      {
        "name": "ActiveYieldFarm",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "U32",
            "keys_id": 95,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Active(farms able to receive LP shares deposits) yield farms."
        ]
      }
    ],
    "calls_value": {
      "type": 320
    },
    "events": [
      {
        "lookup": "3e00",
        "name": "GlobalFarmAccRPZUpdated",
        "docs": [
          "Global farm accumulated reward per share was updated."
        ],
        "args": [
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "accumulated_rpz",
          "total_shares_z"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "FixedU128",
          "Balance"
        ]
      },
      {
        "lookup": "3e01",
        "name": "YieldFarmAccRPVSUpdated",
        "docs": [
          "Yield farm accumulated reward per valued share was updated."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "accumulated_rpvs",
          "total_valued_shares"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "FixedU128",
          "Balance"
        ]
      },
      {
        "lookup": "3e02",
        "name": "AllRewardsDistributed",
        "docs": [
          "Global farm has no more rewards to distribute in the moment."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "global_farm_id"
        ],
        "args_type_name": [
          "GlobalFarmId"
        ]
      }
    ],
    "events_value": {
      "type": 88
    },
    "constants": [
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 246,
        "constants_value": "4f6d6e6957684c4d",
        "docs": [
          " Pallet id."
        ]
      },
      {
        "name": "MinTotalFarmRewards",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00407a10f35a00000000000000000000",
        "docs": [
          " Minimum total rewards to distribute from global farm during liquidity mining."
        ]
      },
      {
        "name": "MinPlannedYieldingPeriods",
        "type": "U32",
        "type_value": 4,
        "constants_value": "68380000",
        "docs": [
          " Minimum number of periods to run liquidity mining program."
        ]
      },
      {
        "name": "MaxFarmEntriesPerDeposit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "05000000",
        "docs": [
          " Maximum number of yield farms same LP shares can be re/deposited into. This value always",
          " MUST BE >= 1.         "
        ]
      },
      {
        "name": "MaxYieldFarmsPerGlobalFarm",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " Max number of yield farms can exist in global farm. This includes all farms in the",
          " storage(active, stopped, terminated)."
        ]
      }
    ],
    "errors": [
      {
        "name": "GlobalFarmNotFound",
        "doc": [
          "Global farm does not exist."
        ]
      },
      {
        "name": "YieldFarmNotFound",
        "doc": [
          "Yield farm does not exist."
        ]
      },
      {
        "name": "DoubleClaimInPeriod",
        "doc": [
          "Multiple claims in the same period is not allowed."
        ]
      },
      {
        "name": "LiquidityMiningCanceled",
        "doc": [
          "Liquidity mining is canceled."
        ]
      },
      {
        "name": "LiquidityMiningIsActive",
        "doc": [
          "Liquidity mining is not canceled."
        ]
      },
      {
        "name": "LiquidityMiningIsNotStopped",
        "doc": [
          "Liquidity mining is in `active` or `terminated` state and action cannot be completed."
        ]
      },
      {
        "name": "InvalidDepositAmount",
        "doc": [
          "LP shares amount is not valid."
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "Account is not allowed to perform action."
        ]
      },
      {
        "name": "InvalidMultiplier",
        "doc": [
          "Yield farm multiplier can't be 0."
        ]
      },
      {
        "name": "YieldFarmAlreadyExists",
        "doc": [
          "Yield farm with given `amm_pool_id` already exists in global farm."
        ]
      },
      {
        "name": "InvalidInitialRewardPercentage",
        "doc": [
          "Loyalty curve's initial reward percentage is not valid. Valid range is: [0, 1)."
        ]
      },
      {
        "name": "GlobalFarmIsNotEmpty",
        "doc": [
          "One or more yield farms exist in global farm."
        ]
      },
      {
        "name": "MissingIncentivizedAsset",
        "doc": [
          "Farm's `incentivized_asset` is missing in provided asset pair."
        ]
      },
      {
        "name": "InsufficientRewardCurrencyBalance",
        "doc": [
          "Reward currency balance is not sufficient."
        ]
      },
      {
        "name": "InvalidBlocksPerPeriod",
        "doc": [
          "Blocks per period can't be 0."
        ]
      },
      {
        "name": "InvalidYieldPerPeriod",
        "doc": [
          "Yield per period can't be 0."
        ]
      },
      {
        "name": "InvalidTotalRewards",
        "doc": [
          "Total rewards is less than `MinTotalFarmRewards`."
        ]
      },
      {
        "name": "InvalidPlannedYieldingPeriods",
        "doc": [
          "Planned yielding periods is less than `MinPlannedYieldingPeriods`."
        ]
      },
      {
        "name": "MaxEntriesPerDeposit",
        "doc": [
          "Maximum number of locks reached for deposit."
        ]
      },
      {
        "name": "DoubleLock",
        "doc": [
          "Trying to lock LP shares into already locked yield farm."
        ]
      },
      {
        "name": "YieldFarmEntryNotFound",
        "doc": [
          "Yield farm entry doesn't exist for given deposit."
        ]
      },
      {
        "name": "GlobalFarmIsFull",
        "doc": [
          "Max number of yield farms in global farm was reached. Global farm can't accept new",
          "yield farms until some yield farm is not removed from storage."
        ]
      },
      {
        "name": "InvalidMinDeposit",
        "doc": [
          "Invalid min. deposit was set for global farm."
        ]
      },
      {
        "name": "InvalidPriceAdjustment",
        "doc": [
          "Price adjustment multiplier can't be 0."
        ]
      },
      {
        "name": "ErrorGetAccountId",
        "doc": [
          "Account creation from id failed."
        ]
      },
      {
        "name": "IncorrectValuedShares",
        "doc": [
          "Value of deposited shares amount in reward currency is bellow min. limit."
        ]
      },
      {
        "name": "RewardCurrencyNotRegistered",
        "doc": [
          "`reward_currency` is not registered in asset registry."
        ]
      },
      {
        "name": "IncentivizedAssetNotRegistered",
        "doc": [
          "`incentivized_asset` is not registered in asset registry."
        ]
      },
      {
        "name": "InconsistentState",
        "doc": [
          "Action cannot be completed because unexpected error has occurred. This should be reported",
          "to protocol maintainers."
        ],
        "fields": [
          {
            "type": "pallet_liquidity_mining:pallet:InconsistentStateError",
            "type_name": "InconsistentStateError",
            "doc": null
          }
        ]
      }
    ],
    "errors_value": {
      "type": 509
    },
    "index": 62
  },
  {
    "name": "OmnipoolLiquidityMining",
    "prefix": "OmnipoolLiquidityMining",
    "storage": [
      {
        "name": "OmniPositionId",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "U128",
            "keys_id": 6,
            "value_id": 6
          }
        },
        "fallback": "0x00",
        "docs": [
          " Map of omnipool position's ids to LM's deposit ids."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3f00",
        "name": "create_global_farm",
        "docs": [
          "See [`Pallet::create_global_farm`]."
        ],
        "args": [
          {
            "name": "total_rewards",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "planned_yielding_periods",
            "type": "U32",
            "type_name": "PeriodOf"
          },
          {
            "name": "blocks_per_period",
            "type": "U32",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "reward_currency",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "owner",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "yield_per_period",
            "type": "U64",
            "type_name": "Perquintill"
          },
          {
            "name": "min_deposit",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "lrna_price_adjustment",
            "type": "U128",
            "type_name": "FixedU128"
          }
        ]
      },
      {
        "lookup": "3f02",
        "name": "terminate_global_farm",
        "docs": [
          "See [`Pallet::terminate_global_farm`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          }
        ]
      },
      {
        "lookup": "3f03",
        "name": "create_yield_farm",
        "docs": [
          "See [`Pallet::create_yield_farm`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "multiplier",
            "type": "U128",
            "type_name": "FarmMultiplier"
          },
          {
            "name": "loyalty_curve",
            "type": "option<pallet_liquidity_mining:types:LoyaltyCurve>",
            "type_name": "Option<LoyaltyCurve>"
          }
        ]
      },
      {
        "lookup": "3f04",
        "name": "update_yield_farm",
        "docs": [
          "See [`Pallet::update_yield_farm`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "multiplier",
            "type": "U128",
            "type_name": "FarmMultiplier"
          }
        ]
      },
      {
        "lookup": "3f05",
        "name": "stop_yield_farm",
        "docs": [
          "See [`Pallet::stop_yield_farm`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          }
        ]
      },
      {
        "lookup": "3f06",
        "name": "resume_yield_farm",
        "docs": [
          "See [`Pallet::resume_yield_farm`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "multiplier",
            "type": "U128",
            "type_name": "FarmMultiplier"
          }
        ]
      },
      {
        "lookup": "3f07",
        "name": "terminate_yield_farm",
        "docs": [
          "See [`Pallet::terminate_yield_farm`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          }
        ]
      },
      {
        "lookup": "3f08",
        "name": "deposit_shares",
        "docs": [
          "See [`Pallet::deposit_shares`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          },
          {
            "name": "position_id",
            "type": "U128",
            "type_name": "PositionItemId"
          }
        ]
      },
      {
        "lookup": "3f09",
        "name": "redeposit_shares",
        "docs": [
          "See [`Pallet::redeposit_shares`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          },
          {
            "name": "deposit_id",
            "type": "U128",
            "type_name": "DepositId"
          }
        ]
      },
      {
        "lookup": "3f0a",
        "name": "claim_rewards",
        "docs": [
          "See [`Pallet::claim_rewards`]."
        ],
        "args": [
          {
            "name": "deposit_id",
            "type": "U128",
            "type_name": "DepositId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          }
        ]
      },
      {
        "lookup": "3f0b",
        "name": "withdraw_shares",
        "docs": [
          "See [`Pallet::withdraw_shares`]."
        ],
        "args": [
          {
            "name": "deposit_id",
            "type": "U128",
            "type_name": "DepositId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 321
    },
    "events": [
      {
        "lookup": "3f00",
        "name": "GlobalFarmCreated",
        "docs": [
          "New global farm was created."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "U32",
          "U64",
          "U32",
          "U32",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "id",
          "owner",
          "total_rewards",
          "reward_currency",
          "yield_per_period",
          "planned_yielding_periods",
          "blocks_per_period",
          "max_reward_per_period",
          "min_deposit",
          "lrna_price_adjustment"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "AccountId",
          "Balance",
          "AssetId",
          "Perquintill",
          "PeriodOf",
          "BlockNumberFor",
          "Balance",
          "Balance",
          "FixedU128"
        ]
      },
      {
        "lookup": "3f01",
        "name": "GlobalFarmTerminated",
        "docs": [
          "Global farm was terminated."
        ],
        "args": [
          "U32",
          "AccountId",
          "U32",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "who",
          "reward_currency",
          "undistributed_rewards"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "AccountId",
          "AssetId",
          "Balance"
        ]
      },
      {
        "lookup": "3f02",
        "name": "YieldFarmCreated",
        "docs": [
          "New yield farm was added to the farm."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "U128",
          "option<pallet_liquidity_mining:types:LoyaltyCurve>"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "asset_id",
          "multiplier",
          "loyalty_curve"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AssetId",
          "FarmMultiplier",
          "Option<LoyaltyCurve>"
        ]
      },
      {
        "lookup": "3f03",
        "name": "YieldFarmUpdated",
        "docs": [
          "Yield farm multiplier was updated."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "asset_id",
          "who",
          "multiplier"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AssetId",
          "AccountId",
          "FarmMultiplier"
        ]
      },
      {
        "lookup": "3f04",
        "name": "YieldFarmStopped",
        "docs": [
          "Yield farm for `asset_id` was stopped."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3f05",
        "name": "YieldFarmResumed",
        "docs": [
          "Yield farm for `asset_id` was resumed."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "asset_id",
          "who",
          "multiplier"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AssetId",
          "AccountId",
          "FarmMultiplier"
        ]
      },
      {
        "lookup": "3f06",
        "name": "YieldFarmTerminated",
        "docs": [
          "Yield farm was terminated from the global farm."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3f07",
        "name": "SharesDeposited",
        "docs": [
          "New LP shares(LP position) were deposited."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "deposit_id",
          "asset_id",
          "who",
          "shares_amount",
          "position_id"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "DepositId",
          "AssetId",
          "AccountId",
          "Balance",
          "PositionItemId"
        ]
      },
      {
        "lookup": "3f08",
        "name": "SharesRedeposited",
        "docs": [
          "Already locked LP shares were redeposited to another yield farm."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "deposit_id",
          "asset_id",
          "who",
          "shares_amount",
          "position_id"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "DepositId",
          "AssetId",
          "AccountId",
          "Balance",
          "PositionItemId"
        ]
      },
      {
        "lookup": "3f09",
        "name": "RewardClaimed",
        "docs": [
          "Rewards were claimed."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "U128",
          "U32",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "who",
          "claimed",
          "reward_currency",
          "deposit_id"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AccountId",
          "Balance",
          "AssetId",
          "DepositId"
        ]
      },
      {
        "lookup": "3f0a",
        "name": "SharesWithdrawn",
        "docs": [
          "LP shares were withdrawn."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "who",
          "amount",
          "deposit_id"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AccountId",
          "Balance",
          "DepositId"
        ]
      },
      {
        "lookup": "3f0b",
        "name": "DepositDestroyed",
        "docs": [
          "All LP shares were unlocked and NFT representing deposit was destroyed."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "deposit_id"
        ],
        "args_type_name": [
          "AccountId",
          "DepositId"
        ]
      }
    ],
    "events_value": {
      "type": 89
    },
    "constants": [
      {
        "name": "NFTCollectionId",
        "type": "U128",
        "type_value": 6,
        "constants_value": "180a0000000000000000000000000000",
        "docs": [
          " NFT collection id for liquidity mining's deposit nfts."
        ]
      },
      {
        "name": "OracleSource",
        "type": "[U8; 8]",
        "type_value": 119,
        "constants_value": "6f6d6e69706f6f6c",
        "docs": [
          " Identifier of oracle data soruce"
        ]
      },
      {
        "name": "OraclePeriod",
        "type": "hydradx_traits:oracle:OraclePeriod",
        "type_value": 511,
        "constants_value": "02",
        "docs": [
          " Oracle's price aggregation period."
        ]
      }
    ],
    "errors": [
      {
        "name": "AssetNotFound",
        "doc": [
          "Asset is not in the omnipool."
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "Signed account is not owner of the deposit."
        ]
      },
      {
        "name": "ZeroClaimedRewards",
        "doc": [
          "Rewards to claim are 0."
        ]
      },
      {
        "name": "InconsistentState",
        "doc": [
          "Action cannot be completed because unexpected error has occurred. This should be reported",
          "to protocol maintainers."
        ],
        "fields": [
          {
            "type": "pallet_omnipool_liquidity_mining:pallet:InconsistentStateError",
            "type_name": "InconsistentStateError",
            "doc": null
          }
        ]
      },
      {
        "name": "OracleNotAvailable",
        "doc": [
          "Oracle could not be found for requested assets."
        ]
      },
      {
        "name": "PriceAdjustmentNotAvailable",
        "doc": [
          "Oracle providing `price_adjustment` could not be found for requested assets."
        ]
      }
    ],
    "errors_value": {
      "type": 512
    },
    "index": 63
  },
  {
    "name": "OTC",
    "prefix": "OTC",
    "storage": [
      {
        "name": "NextOrderId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " ID sequencer for Orders"
        ]
      },
      {
        "name": "Orders",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_otc:Order",
            "keys_id": 4,
            "value_id": 514
          }
        },
        "fallback": "0x00",
        "docs": null
      }
    ],
    "calls": [
      {
        "lookup": "4000",
        "name": "place_order",
        "docs": [
          "See [`Pallet::place_order`]."
        ],
        "args": [
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_in",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount_out",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "partially_fillable",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "4001",
        "name": "partial_fill_order",
        "docs": [
          "See [`Pallet::partial_fill_order`]."
        ],
        "args": [
          {
            "name": "order_id",
            "type": "U32",
            "type_name": "OrderId"
          },
          {
            "name": "amount_in",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4002",
        "name": "fill_order",
        "docs": [
          "See [`Pallet::fill_order`]."
        ],
        "args": [
          {
            "name": "order_id",
            "type": "U32",
            "type_name": "OrderId"
          }
        ]
      },
      {
        "lookup": "4003",
        "name": "cancel_order",
        "docs": [
          "See [`Pallet::cancel_order`]."
        ],
        "args": [
          {
            "name": "order_id",
            "type": "U32",
            "type_name": "OrderId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 322
    },
    "events": [
      {
        "lookup": "4000",
        "name": "Cancelled",
        "docs": [
          "An Order has been cancelled"
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "order_id"
        ],
        "args_type_name": [
          "OrderId"
        ]
      },
      {
        "lookup": "4001",
        "name": "Filled",
        "docs": [
          "An Order has been completely filled"
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "order_id",
          "who",
          "amount_in",
          "amount_out"
        ],
        "args_type_name": [
          "OrderId",
          "AccountId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4002",
        "name": "PartiallyFilled",
        "docs": [
          "An Order has been partially filled"
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "order_id",
          "who",
          "amount_in",
          "amount_out"
        ],
        "args_type_name": [
          "OrderId",
          "AccountId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4003",
        "name": "Placed",
        "docs": [
          "An Order has been placed"
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "U128",
          "U128",
          "Bool"
        ],
        "args_name": [
          "order_id",
          "asset_in",
          "asset_out",
          "amount_in",
          "amount_out",
          "partially_fillable"
        ],
        "args_type_name": [
          "OrderId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "bool"
        ]
      }
    ],
    "events_value": {
      "type": 93
    },
    "constants": [
      {
        "name": "ExistentialDepositMultiplier",
        "type": "U8",
        "type_value": 2,
        "constants_value": "05",
        "docs": null
      }
    ],
    "errors": [
      {
        "name": "AssetNotRegistered",
        "doc": [
          "Asset does not exist in registry"
        ]
      },
      {
        "name": "OrderNotFound",
        "doc": [
          "Order cannot be found"
        ]
      },
      {
        "name": "OrderIdOutOfBound",
        "doc": [
          "Size of order ID exceeds the bound"
        ]
      },
      {
        "name": "OrderNotPartiallyFillable",
        "doc": [
          "Cannot partially fill an order which is not partially fillable"
        ]
      },
      {
        "name": "OrderAmountTooSmall",
        "doc": [
          "Order amount_in and amount_out must at all times be greater than the existential deposit",
          "for the asset multiplied by the ExistentialDepositMultiplier.",
          "A fill order may not leave behind amounts smaller than this."
        ]
      },
      {
        "name": "MathError",
        "doc": [
          "Error with math calculations"
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "The caller does not have permission to complete the action"
        ]
      },
      {
        "name": "InsufficientReservedAmount",
        "doc": [
          "Reserved amount not sufficient."
        ]
      }
    ],
    "errors_value": {
      "type": 515
    },
    "index": 64
  },
  {
    "name": "CircuitBreaker",
    "prefix": "CircuitBreaker",
    "storage": [
      {
        "name": "TradeVolumeLimitPerAsset",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Tuple:U32U32",
            "keys_id": 4,
            "value_id": 95
          }
        },
        "fallback": "0x8813000010270000",
        "docs": [
          " Trade volume limits of assets set by set_trade_volume_limit.",
          " If not set, returns the default limit."
        ]
      },
      {
        "name": "AllowedTradeVolumeLimitPerAsset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_circuit_breaker:TradeVolumeLimit",
            "keys_id": 4,
            "value_id": 516
          }
        },
        "fallback": "0x00",
        "docs": [
          " Trade volumes per asset"
        ]
      },
      {
        "name": "LiquidityAddLimitPerAsset",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "option<Tuple:U32U32>",
            "keys_id": 4,
            "value_id": 96
          }
        },
        "fallback": "0x01f401000010270000",
        "docs": [
          " Liquidity limits of assets for adding liquidity.",
          " If not set, returns the default limit."
        ]
      },
      {
        "name": "AllowedAddLiquidityAmountPerAsset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_circuit_breaker:LiquidityLimit",
            "keys_id": 4,
            "value_id": 517
          }
        },
        "fallback": "0x00",
        "docs": [
          " Add liquidity volumes per asset"
        ]
      },
      {
        "name": "LiquidityRemoveLimitPerAsset",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "option<Tuple:U32U32>",
            "keys_id": 4,
            "value_id": 96
          }
        },
        "fallback": "0x01f401000010270000",
        "docs": [
          " Liquidity limits of assets for removing liquidity.",
          " If not set, returns the default limit."
        ]
      },
      {
        "name": "AllowedRemoveLiquidityAmountPerAsset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_circuit_breaker:LiquidityLimit",
            "keys_id": 4,
            "value_id": 517
          }
        },
        "fallback": "0x00",
        "docs": [
          " Remove liquidity volumes per asset"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4100",
        "name": "set_trade_volume_limit",
        "docs": [
          "See [`Pallet::set_trade_volume_limit`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "trade_volume_limit",
            "type": "Tuple:U32U32",
            "type_name": "(u32, u32)"
          }
        ]
      },
      {
        "lookup": "4101",
        "name": "set_add_liquidity_limit",
        "docs": [
          "See [`Pallet::set_add_liquidity_limit`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "liquidity_limit",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<(u32, u32)>"
          }
        ]
      },
      {
        "lookup": "4102",
        "name": "set_remove_liquidity_limit",
        "docs": [
          "See [`Pallet::set_remove_liquidity_limit`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "liquidity_limit",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<(u32, u32)>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 323
    },
    "events": [
      {
        "lookup": "4100",
        "name": "TradeVolumeLimitChanged",
        "docs": [
          "Trade volume limit of an asset was changed."
        ],
        "args": [
          "U32",
          "Tuple:U32U32"
        ],
        "args_name": [
          "asset_id",
          "trade_volume_limit"
        ],
        "args_type_name": [
          "AssetId",
          "(u32, u32)"
        ]
      },
      {
        "lookup": "4101",
        "name": "AddLiquidityLimitChanged",
        "docs": [
          "Add liquidity limit of an asset was changed."
        ],
        "args": [
          "U32",
          "option<Tuple:U32U32>"
        ],
        "args_name": [
          "asset_id",
          "liquidity_limit"
        ],
        "args_type_name": [
          "AssetId",
          "Option<(u32, u32)>"
        ]
      },
      {
        "lookup": "4102",
        "name": "RemoveLiquidityLimitChanged",
        "docs": [
          "Remove liquidity limit of an asset was changed."
        ],
        "args": [
          "U32",
          "option<Tuple:U32U32>"
        ],
        "args_name": [
          "asset_id",
          "liquidity_limit"
        ],
        "args_type_name": [
          "AssetId",
          "Option<(u32, u32)>"
        ]
      }
    ],
    "events_value": {
      "type": 94
    },
    "constants": [
      {
        "name": "DefaultMaxNetTradeVolumeLimitPerBlock",
        "type": "Tuple:U32U32",
        "type_value": 95,
        "constants_value": "8813000010270000",
        "docs": [
          " The maximum percentage of a pool's liquidity that can be traded in a block.",
          " Represented as a non-zero fraction (nominator, denominator) with the max value being 10_000."
        ]
      },
      {
        "name": "DefaultMaxAddLiquidityLimitPerBlock",
        "type": "option<Tuple:U32U32>",
        "type_value": 96,
        "constants_value": "01f401000010270000",
        "docs": [
          " The maximum percentage of a pool's liquidity that can be added in a block.",
          " Represented as an optional non-zero fraction (nominator, denominator) with the max value being 10_000.",
          " If set to None, the limits are not enforced."
        ]
      },
      {
        "name": "DefaultMaxRemoveLiquidityLimitPerBlock",
        "type": "option<Tuple:U32U32>",
        "type_value": 96,
        "constants_value": "01f401000010270000",
        "docs": [
          " The maximum percentage of a pool's liquidity that can be removed in a block.",
          " Represented as an optional non-zero fraction (nominator, denominator) with the max value being 10_000.",
          " If set to None, the limits are not enforced."
        ]
      }
    ],
    "errors": [
      {
        "name": "InvalidLimitValue",
        "doc": [
          "Invalid value for a limit. Limit must be non-zero."
        ]
      },
      {
        "name": "LiquidityLimitNotStoredForAsset",
        "doc": [
          "Allowed liquidity limit is not stored for asset"
        ]
      },
      {
        "name": "TokenOutflowLimitReached",
        "doc": [
          "Token trade outflow per block has been reached"
        ]
      },
      {
        "name": "TokenInfluxLimitReached",
        "doc": [
          "Token trade influx per block has been reached"
        ]
      },
      {
        "name": "MaxLiquidityLimitPerBlockReached",
        "doc": [
          "Maximum pool's liquidity limit per block has been reached"
        ]
      },
      {
        "name": "NotAllowed",
        "doc": [
          "Asset is not allowed to have a limit"
        ]
      }
    ],
    "errors_value": {
      "type": 518
    },
    "index": 65
  },
  {
    "name": "Router",
    "prefix": "Router",
    "storage": [
      {
        "name": "Routes",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "hydradx_traits:router:AssetPair"
            ],
            "value": "Vec<hydradx_traits:router:Trade>",
            "keys_id": 325,
            "value_id": 146
          }
        },
        "fallback": "0x00",
        "docs": [
          " Storing routes for asset pairs"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4300",
        "name": "sell",
        "docs": [
          "See [`Pallet::sell`]."
        ],
        "args": [
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_in",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "min_amount_out",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "route",
            "type": "Vec<hydradx_traits:router:Trade>",
            "type_name": "Vec<Trade<AssetId>>"
          }
        ]
      },
      {
        "lookup": "4301",
        "name": "buy",
        "docs": [
          "See [`Pallet::buy`]."
        ],
        "args": [
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_out",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "max_amount_in",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "route",
            "type": "Vec<hydradx_traits:router:Trade>",
            "type_name": "Vec<Trade<AssetId>>"
          }
        ]
      },
      {
        "lookup": "4302",
        "name": "set_route",
        "docs": [
          "See [`Pallet::set_route`]."
        ],
        "args": [
          {
            "name": "asset_pair",
            "type": "hydradx_traits:router:AssetPair",
            "type_name": "AssetPair<AssetId>"
          },
          {
            "name": "new_route",
            "type": "Vec<hydradx_traits:router:Trade>",
            "type_name": "Vec<Trade<AssetId>>"
          }
        ]
      },
      {
        "lookup": "4303",
        "name": "force_insert_route",
        "docs": [
          "See [`Pallet::force_insert_route`]."
        ],
        "args": [
          {
            "name": "asset_pair",
            "type": "hydradx_traits:router:AssetPair",
            "type_name": "AssetPair<AssetId>"
          },
          {
            "name": "new_route",
            "type": "Vec<hydradx_traits:router:Trade>",
            "type_name": "Vec<Trade<AssetId>>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 324
    },
    "events": [
      {
        "lookup": "4300",
        "name": "Executed",
        "docs": [
          "The route with trades has been successfully executed"
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "asset_in",
          "asset_out",
          "amount_in",
          "amount_out"
        ],
        "args_type_name": [
          "AssetId",
          "AssetId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4301",
        "name": "RouteUpdated",
        "docs": [
          "The route with trades has been successfully executed"
        ],
        "args": [
          "Vec<U32>"
        ],
        "args_name": [
          "asset_ids"
        ],
        "args_type_name": [
          "Vec<AssetId>"
        ]
      }
    ],
    "events_value": {
      "type": 97
    },
    "constants": [
      {
        "name": "NativeAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset Id"
        ]
      }
    ],
    "errors": [
      {
        "name": "TradingLimitReached",
        "doc": [
          "The trading limit has been reached"
        ]
      },
      {
        "name": "MaxTradesExceeded",
        "doc": [
          "The the max number of trades limit is reached"
        ]
      },
      {
        "name": "PoolNotSupported",
        "doc": [
          "The AMM pool is not supported for executing trades"
        ]
      },
      {
        "name": "InsufficientBalance",
        "doc": [
          "The user has not enough balance to execute the trade"
        ]
      },
      {
        "name": "RouteCalculationFailed",
        "doc": [
          "The calculation of route trade amounts failed in the underlying AMM"
        ]
      },
      {
        "name": "InvalidRoute",
        "doc": [
          "The route is invalid"
        ]
      },
      {
        "name": "RouteUpdateIsNotSuccessful",
        "doc": [
          "The route update was not successful"
        ]
      },
      {
        "name": "InsufficientAssetNotSupported",
        "doc": [
          "Insufficient asset is not supported for on chain routing"
        ]
      },
      {
        "name": "InvalidRouteExecution",
        "doc": [
          "The route execution failed in the underlying AMM"
        ]
      },
      {
        "name": "NotAllowed",
        "doc": [
          "Trading same assets is not allowed."
        ]
      }
    ],
    "errors_value": {
      "type": 519
    },
    "index": 67
  },
  {
    "name": "DynamicFees",
    "prefix": "DynamicFees",
    "storage": [
      {
        "name": "AssetFee",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_dynamic_fees:types:FeeEntry",
            "keys_id": 4,
            "value_id": 520
          }
        },
        "fallback": "0x00",
        "docs": [
          " Stores last calculated fee of an asset and block number in which it was changed..",
          " Stored as (Asset fee, Protocol fee, Block number)"
        ]
      }
    ],
    "calls_value": {
      "type": 326
    },
    "events_value": {
      "type": 99
    },
    "constants": [
      {
        "name": "AssetFeeParameters",
        "type": "pallet_dynamic_fees:types:FeeParams",
        "type_value": 521,
        "constants_value": "c409000050c3000000a0724e1809000000000000000000000000c84e676dc11b0000000000000000",
        "docs": null
      },
      {
        "name": "ProtocolFeeParameters",
        "type": "pallet_dynamic_fees:types:FeeParams",
        "type_value": 521,
        "constants_value": "f4010000e8030000005039278c0400000000000000000000000064a7b3b6e00d0000000000000000",
        "docs": null
      }
    ],
    "errors": null,
    "errors_value": {
      "type": 522
    },
    "index": 68
  },
  {
    "name": "Staking",
    "prefix": "Staking",
    "storage": [
      {
        "name": "Staking",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_staking:types:StakingData",
          "PlainTypeValue": 523
        },
        "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Global staking state."
        ]
      },
      {
        "name": "Positions",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "pallet_staking:types:Position",
            "keys_id": 6,
            "value_id": 524
          }
        },
        "fallback": "0x00",
        "docs": [
          " User's position state."
        ]
      },
      {
        "name": "NextPositionId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Position ids sequencer."
        ]
      },
      {
        "name": "PositionVotes",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "Vec<Tuple:U32pallet_staking:types:Vote>",
            "keys_id": 6,
            "value_id": 525
          }
        },
        "fallback": "0x00",
        "docs": [
          " List of position votes."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4500",
        "name": "initialize_staking",
        "docs": [
          "See [`Pallet::initialize_staking`]."
        ],
        "args": null
      },
      {
        "lookup": "4501",
        "name": "stake",
        "docs": [
          "See [`Pallet::stake`]."
        ],
        "args": [
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4502",
        "name": "increase_stake",
        "docs": [
          "See [`Pallet::increase_stake`]."
        ],
        "args": [
          {
            "name": "position_id",
            "type": "U128",
            "type_name": "PositionItemId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4503",
        "name": "claim",
        "docs": [
          "See [`Pallet::claim`]."
        ],
        "args": [
          {
            "name": "position_id",
            "type": "U128",
            "type_name": "PositionItemId"
          }
        ]
      },
      {
        "lookup": "4504",
        "name": "unstake",
        "docs": [
          "See [`Pallet::unstake`]."
        ],
        "args": [
          {
            "name": "position_id",
            "type": "U128",
            "type_name": "PositionItemId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 327
    },
    "events": [
      {
        "lookup": "4500",
        "name": "PositionCreated",
        "docs": [
          "New staking position was created and NFT was minted."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "position_id",
          "stake"
        ],
        "args_type_name": [
          "AccountId",
          "PositionItemId",
          "Balance"
        ]
      },
      {
        "lookup": "4501",
        "name": "StakeAdded",
        "docs": [
          "Staked amount for existing position was increased."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128",
          "U128",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "position_id",
          "stake",
          "total_stake",
          "locked_rewards",
          "slashed_points",
          "payable_percentage"
        ],
        "args_type_name": [
          "AccountId",
          "PositionItemId",
          "Balance",
          "Balance",
          "Balance",
          "Point",
          "FixedU128"
        ]
      },
      {
        "lookup": "4502",
        "name": "RewardsClaimed",
        "docs": [
          "Rewards were claimed."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128",
          "U128",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "position_id",
          "paid_rewards",
          "unlocked_rewards",
          "slashed_points",
          "slashed_unpaid_rewards",
          "payable_percentage"
        ],
        "args_type_name": [
          "AccountId",
          "PositionItemId",
          "Balance",
          "Balance",
          "Point",
          "Balance",
          "FixedU128"
        ]
      },
      {
        "lookup": "4503",
        "name": "Unstaked",
        "docs": [
          "Staked amount was withdrawn and NFT was burned."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "position_id",
          "unlocked_stake"
        ],
        "args_type_name": [
          "AccountId",
          "PositionItemId",
          "Balance"
        ]
      },
      {
        "lookup": "4504",
        "name": "StakingInitialized",
        "docs": [
          "Staking was initialized."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "non_dustable_balance"
        ],
        "args_type_name": [
          "Balance"
        ]
      },
      {
        "lookup": "4505",
        "name": "AccumulatedRpsUpdated",
        "docs": [
          "Staking's `accumulated_reward_per_stake` was updated."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "accumulated_rps",
          "total_stake"
        ],
        "args_type_name": [
          "FixedU128",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 100
    },
    "constants": [
      {
        "name": "PeriodLength",
        "type": "U32",
        "type_value": 4,
        "constants_value": "201c0000",
        "docs": [
          " Staking period length in blocks."
        ]
      },
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 246,
        "constants_value": "7374616b696e6723",
        "docs": [
          " Pallet id."
        ]
      },
      {
        "name": "NativeAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset ID."
        ]
      },
      {
        "name": "MinStake",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0080c6a47e8d03000000000000000000",
        "docs": [
          " Min amount user must stake."
        ]
      },
      {
        "name": "TimePointsWeight",
        "type": "U32",
        "type_value": 85,
        "constants_value": "40420f00",
        "docs": [
          " Weight of the time points in total points calculations."
        ]
      },
      {
        "name": "ActionPointsWeight",
        "type": "U32",
        "type_value": 531,
        "constants_value": "00c2eb0b",
        "docs": [
          " Weight of the action points in total points calculations."
        ]
      },
      {
        "name": "TimePointsPerPeriod",
        "type": "U8",
        "type_value": 2,
        "constants_value": "01",
        "docs": [
          " Number of time points users receive for each period."
        ]
      },
      {
        "name": "UnclaimablePeriods",
        "type": "U128",
        "type_value": 6,
        "constants_value": "01000000000000000000000000000000",
        "docs": [
          " Number of periods user can't claim rewards for. User can exit but won't receive any rewards.",
          " If he stay longer than `UnclaimablePeriods` he will receive rewards also for these periods."
        ]
      },
      {
        "name": "CurrentStakeWeight",
        "type": "U8",
        "type_value": 2,
        "constants_value": "02",
        "docs": [
          " Weight of the actual stake in slash points calculation. Bigger the value lower the calculated slash points."
        ]
      },
      {
        "name": "MaxVotes",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " Max amount of votes the user can have at any time."
        ]
      },
      {
        "name": "NFTCollectionId",
        "type": "U128",
        "type_value": 6,
        "constants_value": "ae080000000000000000000000000000",
        "docs": [
          " NFT collection id."
        ]
      }
    ],
    "errors": [
      {
        "name": "InsufficientBalance",
        "doc": [
          "Balance is too low."
        ]
      },
      {
        "name": "InsufficientStake",
        "doc": [
          "Staked amount is too low."
        ]
      },
      {
        "name": "PositionNotFound",
        "doc": [
          "Staking position has not been found."
        ]
      },
      {
        "name": "MaxVotesReached",
        "doc": [
          "Maximum amount of votes were reached for staking position."
        ]
      },
      {
        "name": "NotInitialized",
        "doc": [
          "Staking is not initialized."
        ]
      },
      {
        "name": "AlreadyInitialized",
        "doc": [
          "Staking is already initialized."
        ]
      },
      {
        "name": "Arithmetic",
        "doc": [
          "Arithmetic error."
        ]
      },
      {
        "name": "MissingPotBalance",
        "doc": [
          "Pot's balance is zero."
        ]
      },
      {
        "name": "PositionAlreadyExists",
        "doc": [
          "Account's position already exists."
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "Signer is not an owner of the staking position."
        ]
      },
      {
        "name": "RemoveVoteNotAllowed",
        "doc": [
          "Remove vote is not allowed when referendum is finished and staking position exists."
        ]
      },
      {
        "name": "InconsistentState",
        "doc": [
          "Action cannot be completed because unexpected error has occurred. This should be reported",
          "to protocol maintainers."
        ],
        "fields": [
          {
            "type": "pallet_staking:pallet:InconsistentStateError",
            "type_name": "InconsistentStateError",
            "doc": null
          }
        ]
      }
    ],
    "errors_value": {
      "type": 532
    },
    "index": 69
  },
  {
    "name": "Stableswap",
    "prefix": "Stableswap",
    "storage": [
      {
        "name": "Pools",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_stableswap:types:PoolInfo",
            "keys_id": 4,
            "value_id": 534
          }
        },
        "fallback": "0x00",
        "docs": [
          " Existing pools"
        ]
      },
      {
        "name": "AssetTradability",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "U8",
            "keys_id": 95,
            "value_id": 105
          }
        },
        "fallback": "0x0f",
        "docs": [
          " Tradability state of pool assets."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4600",
        "name": "create_pool",
        "docs": [
          "See [`Pallet::create_pool`]."
        ],
        "args": [
          {
            "name": "share_asset",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "assets",
            "type": "Vec<U32>",
            "type_name": "Vec<AssetId>"
          },
          {
            "name": "amplification",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "fee",
            "type": "U32",
            "type_name": "Permill"
          }
        ]
      },
      {
        "lookup": "4601",
        "name": "update_pool_fee",
        "docs": [
          "See [`Pallet::update_pool_fee`]."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "fee",
            "type": "U32",
            "type_name": "Permill"
          }
        ]
      },
      {
        "lookup": "4602",
        "name": "update_amplification",
        "docs": [
          "See [`Pallet::update_amplification`]."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "final_amplification",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "start_block",
            "type": "U32",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "end_block",
            "type": "U32",
            "type_name": "BlockNumberFor"
          }
        ]
      },
      {
        "lookup": "4603",
        "name": "add_liquidity",
        "docs": [
          "See [`Pallet::add_liquidity`]."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "assets",
            "type": "Vec<pallet_stableswap:types:AssetAmount>",
            "type_name": "Vec<AssetAmount<AssetId>>"
          }
        ]
      },
      {
        "lookup": "4604",
        "name": "add_liquidity_shares",
        "docs": [
          "See [`Pallet::add_liquidity_shares`]."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "shares",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "max_asset_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4605",
        "name": "remove_liquidity_one_asset",
        "docs": [
          "See [`Pallet::remove_liquidity_one_asset`]."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "share_amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "min_amount_out",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4606",
        "name": "withdraw_asset_amount",
        "docs": [
          "See [`Pallet::withdraw_asset_amount`]."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "max_share_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4607",
        "name": "sell",
        "docs": [
          "See [`Pallet::sell`]."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_in",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "min_buy_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4608",
        "name": "buy",
        "docs": [
          "See [`Pallet::buy`]."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_out",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "max_sell_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4609",
        "name": "set_asset_tradable_state",
        "docs": [
          "See [`Pallet::set_asset_tradable_state`]."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "state",
            "type": "U8",
            "type_name": "Tradability"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 328
    },
    "events": [
      {
        "lookup": "4600",
        "name": "PoolCreated",
        "docs": [
          "A pool was created."
        ],
        "args": [
          "U32",
          "Vec<U32>",
          "U16",
          "U32"
        ],
        "args_name": [
          "pool_id",
          "assets",
          "amplification",
          "fee"
        ],
        "args_type_name": [
          "AssetId",
          "Vec<AssetId>",
          "NonZeroU16",
          "Permill"
        ]
      },
      {
        "lookup": "4601",
        "name": "FeeUpdated",
        "docs": [
          "Pool fee has been updated."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "pool_id",
          "fee"
        ],
        "args_type_name": [
          "AssetId",
          "Permill"
        ]
      },
      {
        "lookup": "4602",
        "name": "LiquidityAdded",
        "docs": [
          "Liquidity of an asset was added to a pool."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "Vec<pallet_stableswap:types:AssetAmount>"
        ],
        "args_name": [
          "pool_id",
          "who",
          "shares",
          "assets"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance",
          "Vec<AssetAmount<AssetId>>"
        ]
      },
      {
        "lookup": "4603",
        "name": "LiquidityRemoved",
        "docs": [
          "Liquidity removed."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "Vec<pallet_stableswap:types:AssetAmount>",
          "U128"
        ],
        "args_name": [
          "pool_id",
          "who",
          "shares",
          "amounts",
          "fee"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance",
          "Vec<AssetAmount<AssetId>>",
          "Balance"
        ]
      },
      {
        "lookup": "4604",
        "name": "SellExecuted",
        "docs": [
          "Sell trade executed. Trade fee paid in asset leaving the pool (already subtracted from amount_out)."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U32",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "pool_id",
          "asset_in",
          "asset_out",
          "amount_in",
          "amount_out",
          "fee"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4605",
        "name": "BuyExecuted",
        "docs": [
          "Buy trade executed. Trade fee paid in asset entering the pool (already included in amount_in)."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U32",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "pool_id",
          "asset_in",
          "asset_out",
          "amount_in",
          "amount_out",
          "fee"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4606",
        "name": "TradableStateUpdated",
        "docs": [
          "Asset's tradable state has been updated."
        ],
        "args": [
          "U32",
          "U32",
          "U8"
        ],
        "args_name": [
          "pool_id",
          "asset_id",
          "state"
        ],
        "args_type_name": [
          "AssetId",
          "AssetId",
          "Tradability"
        ]
      },
      {
        "lookup": "4607",
        "name": "AmplificationChanging",
        "docs": [
          "AAmplification of a pool has been scheduled to change."
        ],
        "args": [
          "U32",
          "U16",
          "U16",
          "U32",
          "U32"
        ],
        "args_name": [
          "pool_id",
          "current_amplification",
          "final_amplification",
          "start_block",
          "end_block"
        ],
        "args_type_name": [
          "AssetId",
          "NonZeroU16",
          "NonZeroU16",
          "BlockNumberFor",
          "BlockNumberFor"
        ]
      }
    ],
    "events_value": {
      "type": 101
    },
    "constants": [
      {
        "name": "MinPoolLiquidity",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40420f00000000000000000000000000",
        "docs": [
          " Minimum pool liquidity"
        ]
      },
      {
        "name": "MinTradingLimit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "e8030000000000000000000000000000",
        "docs": [
          " Minimum trading amount"
        ]
      },
      {
        "name": "AmplificationRange",
        "type": "RangeInclusive",
        "type_value": 536,
        "constants_value": "02001027",
        "docs": [
          " Amplification inclusive range. Pool's amp can be selected from the range only."
        ]
      }
    ],
    "errors": [
      {
        "name": "IncorrectAssets",
        "doc": [
          "Creating a pool with same assets or less than 2 assets is not allowed."
        ]
      },
      {
        "name": "MaxAssetsExceeded",
        "doc": [
          "Maximum number of assets has been exceeded."
        ]
      },
      {
        "name": "PoolNotFound",
        "doc": [
          "A pool with given assets does not exist."
        ]
      },
      {
        "name": "PoolExists",
        "doc": [
          "A pool with given assets already exists."
        ]
      },
      {
        "name": "AssetNotInPool",
        "doc": [
          "Asset is not in the pool."
        ]
      },
      {
        "name": "ShareAssetNotRegistered",
        "doc": [
          "Share asset is not registered in Registry."
        ]
      },
      {
        "name": "ShareAssetInPoolAssets",
        "doc": [
          "Share asset is amount assets when creating a pool."
        ]
      },
      {
        "name": "AssetNotRegistered",
        "doc": [
          "One or more assets are not registered in AssetRegistry"
        ]
      },
      {
        "name": "InvalidAssetAmount",
        "doc": [
          "Invalid asset amount provided. Amount must be greater than zero."
        ]
      },
      {
        "name": "InsufficientBalance",
        "doc": [
          "Balance of an asset is not sufficient to perform a trade."
        ]
      },
      {
        "name": "InsufficientShares",
        "doc": [
          "Balance of a share asset is not sufficient to withdraw liquidity."
        ]
      },
      {
        "name": "InsufficientLiquidity",
        "doc": [
          "Liquidity has not reached the required minimum."
        ]
      },
      {
        "name": "InsufficientLiquidityRemaining",
        "doc": [
          "Insufficient liquidity left in the pool after withdrawal."
        ]
      },
      {
        "name": "InsufficientTradingAmount",
        "doc": [
          "Amount is less than the minimum trading amount configured."
        ]
      },
      {
        "name": "BuyLimitNotReached",
        "doc": [
          "Minimum limit has not been reached during trade."
        ]
      },
      {
        "name": "SellLimitExceeded",
        "doc": [
          "Maximum limit has been exceeded during trade."
        ]
      },
      {
        "name": "InvalidInitialLiquidity",
        "doc": [
          "Initial liquidity of asset must be > 0."
        ]
      },
      {
        "name": "InvalidAmplification",
        "doc": [
          "Amplification is outside configured range."
        ]
      },
      {
        "name": "InsufficientShareBalance",
        "doc": [
          "Remaining balance of share asset is below asset's existential deposit."
        ]
      },
      {
        "name": "NotAllowed",
        "doc": [
          "Not allowed to perform an operation on given asset."
        ]
      },
      {
        "name": "PastBlock",
        "doc": [
          "Future block number is in the past."
        ]
      },
      {
        "name": "SameAmplification",
        "doc": [
          "New amplification is equal to the previous value."
        ]
      },
      {
        "name": "SlippageLimit",
        "doc": [
          "Slippage protection."
        ]
      },
      {
        "name": "UnknownDecimals",
        "doc": [
          "Failed to retrieve asset decimals."
        ]
      }
    ],
    "errors_value": {
      "type": 537
    },
    "index": 70
  },
  {
    "name": "Bonds",
    "prefix": "Bonds",
    "storage": [
      {
        "name": "BondIds",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "Tuple:U32U64"
            ],
            "value": "U32",
            "keys_id": 538,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Registered bond ids.",
          " Maps (underlying asset ID, maturity) -> bond ID"
        ]
      },
      {
        "name": "Bonds",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Tuple:U32U64",
            "keys_id": 4,
            "value_id": 538
          }
        },
        "fallback": "0x00",
        "docs": [
          " Registered bonds.",
          " Maps bond ID -> (underlying asset ID, maturity)"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4700",
        "name": "issue",
        "docs": [
          "See [`Pallet::issue`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "maturity",
            "type": "U64",
            "type_name": "Moment"
          }
        ]
      },
      {
        "lookup": "4701",
        "name": "redeem",
        "docs": [
          "See [`Pallet::redeem`]."
        ],
        "args": [
          {
            "name": "bond_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 329
    },
    "events": [
      {
        "lookup": "4700",
        "name": "TokenCreated",
        "docs": [
          "A bond asset was registered"
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U64"
        ],
        "args_name": [
          "issuer",
          "asset_id",
          "bond_id",
          "maturity"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Moment"
        ]
      },
      {
        "lookup": "4701",
        "name": "Issued",
        "docs": [
          "New bond were issued"
        ],
        "args": [
          "AccountId",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "issuer",
          "bond_id",
          "amount",
          "fee"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4702",
        "name": "Redeemed",
        "docs": [
          "Bonds were redeemed"
        ],
        "args": [
          "AccountId",
          "U32",
          "U128"
        ],
        "args_name": [
          "who",
          "bond_id",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 106
    },
    "constants": [
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 246,
        "constants_value": "706c74626f6e6473",
        "docs": [
          " The pallet id, used for deriving its sovereign account ID."
        ]
      },
      {
        "name": "ProtocolFee",
        "type": "U32",
        "type_value": 85,
        "constants_value": "204e0000",
        "docs": [
          " Protocol fee."
        ]
      },
      {
        "name": "FeeReceiver",
        "type": "AccountId",
        "type_value": 0,
        "constants_value": "6d6f646c70792f74727372790000000000000000000000000000000000000000",
        "docs": [
          " Protocol fee receiver."
        ]
      }
    ],
    "errors": [
      {
        "name": "NotRegistered",
        "doc": [
          "Bond not registered"
        ]
      },
      {
        "name": "NotMature",
        "doc": [
          "Bond is not mature"
        ]
      },
      {
        "name": "InvalidMaturity",
        "doc": [
          "Maturity not long enough"
        ]
      },
      {
        "name": "DisallowedAsset",
        "doc": [
          "Asset type not allowed for underlying asset"
        ]
      },
      {
        "name": "AssetNotFound",
        "doc": [
          "Asset is not registered in `AssetRegistry`"
        ]
      },
      {
        "name": "InvalidBondName",
        "doc": [
          "Generated name is not valid."
        ]
      },
      {
        "name": "FailToParseName",
        "doc": [
          "Bond's name parsing was now successful"
        ]
      }
    ],
    "errors_value": {
      "type": 539
    },
    "index": 71
  },
  {
    "name": "LBP",
    "prefix": "LBP",
    "storage": [
      {
        "name": "PoolData",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "pallet_lbp:Pool",
            "keys_id": 0,
            "value_id": 108
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of a pool."
        ]
      },
      {
        "name": "FeeCollectorWithAsset",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "Bool",
            "keys_id": 540,
            "value_id": 48
          }
        },
        "fallback": "0x00",
        "docs": [
          " Storage used for tracking existing fee collectors",
          " Not more than one fee collector per asset possible"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4900",
        "name": "create_pool",
        "docs": [
          "See [`Pallet::create_pool`]."
        ],
        "args": [
          {
            "name": "pool_owner",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "asset_a",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_a_amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "asset_b",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_b_amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "initial_weight",
            "type": "U32",
            "type_name": "LBPWeight"
          },
          {
            "name": "final_weight",
            "type": "U32",
            "type_name": "LBPWeight"
          },
          {
            "name": "weight_curve",
            "type": "pallet_lbp:WeightCurveType",
            "type_name": "WeightCurveType"
          },
          {
            "name": "fee",
            "type": "Tuple:U32U32",
            "type_name": "(u32, u32)"
          },
          {
            "name": "fee_collector",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "repay_target",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4901",
        "name": "update_pool_data",
        "docs": [
          "See [`Pallet::update_pool_data`]."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "AccountId",
            "type_name": "PoolId"
          },
          {
            "name": "pool_owner",
            "type": "option<AccountId>",
            "type_name": "Option<AccountId>"
          },
          {
            "name": "start",
            "type": "option<U32>",
            "type_name": "Option<BlockNumberFor>"
          },
          {
            "name": "end",
            "type": "option<U32>",
            "type_name": "Option<BlockNumberFor>"
          },
          {
            "name": "initial_weight",
            "type": "option<U32>",
            "type_name": "Option<LBPWeight>"
          },
          {
            "name": "final_weight",
            "type": "option<U32>",
            "type_name": "Option<LBPWeight>"
          },
          {
            "name": "fee",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<(u32, u32)>"
          },
          {
            "name": "fee_collector",
            "type": "option<AccountId>",
            "type_name": "Option<AccountId>"
          },
          {
            "name": "repay_target",
            "type": "option<U128>",
            "type_name": "Option<Balance>"
          }
        ]
      },
      {
        "lookup": "4902",
        "name": "add_liquidity",
        "docs": [
          "See [`Pallet::add_liquidity`]."
        ],
        "args": [
          {
            "name": "amount_a",
            "type": "Tuple:U32U128",
            "type_name": "(AssetId, BalanceOf)"
          },
          {
            "name": "amount_b",
            "type": "Tuple:U32U128",
            "type_name": "(AssetId, BalanceOf)"
          }
        ]
      },
      {
        "lookup": "4903",
        "name": "remove_liquidity",
        "docs": [
          "See [`Pallet::remove_liquidity`]."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "AccountId",
            "type_name": "PoolId"
          }
        ]
      },
      {
        "lookup": "4904",
        "name": "sell",
        "docs": [
          "See [`Pallet::sell`]."
        ],
        "args": [
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "BalanceOf"
          },
          {
            "name": "max_limit",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "4905",
        "name": "buy",
        "docs": [
          "See [`Pallet::buy`]."
        ],
        "args": [
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "BalanceOf"
          },
          {
            "name": "max_limit",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 330
    },
    "events": [
      {
        "lookup": "4900",
        "name": "PoolCreated",
        "docs": [
          "Pool was created by the `CreatePool` origin."
        ],
        "args": [
          "AccountId",
          "pallet_lbp:Pool"
        ],
        "args_name": [
          "pool",
          "data"
        ],
        "args_type_name": [
          "PoolId",
          "Pool<AccountId, BlockNumberFor>"
        ]
      },
      {
        "lookup": "4901",
        "name": "PoolUpdated",
        "docs": [
          "Pool data were updated."
        ],
        "args": [
          "AccountId",
          "pallet_lbp:Pool"
        ],
        "args_name": [
          "pool",
          "data"
        ],
        "args_type_name": [
          "PoolId",
          "Pool<AccountId, BlockNumberFor>"
        ]
      },
      {
        "lookup": "4902",
        "name": "LiquidityAdded",
        "docs": [
          "New liquidity was provided to the pool."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_a",
          "asset_b",
          "amount_a",
          "amount_b"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "BalanceOf",
          "BalanceOf"
        ]
      },
      {
        "lookup": "4903",
        "name": "LiquidityRemoved",
        "docs": [
          "Liquidity was removed from the pool and the pool was destroyed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_a",
          "asset_b",
          "amount_a",
          "amount_b"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "BalanceOf",
          "BalanceOf"
        ]
      },
      {
        "lookup": "4904",
        "name": "SellExecuted",
        "docs": [
          "Sale executed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128",
          "U32",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_in",
          "asset_out",
          "amount",
          "sale_price",
          "fee_asset",
          "fee_amount"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "BalanceOf",
          "BalanceOf",
          "AssetId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "4905",
        "name": "BuyExecuted",
        "docs": [
          "Purchase executed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128",
          "U32",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_out",
          "asset_in",
          "amount",
          "buy_price",
          "fee_asset",
          "fee_amount"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "BalanceOf",
          "BalanceOf",
          "AssetId",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 107
    },
    "constants": [
      {
        "name": "MinTradingLimit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "e8030000000000000000000000000000",
        "docs": [
          " Minimum trading limit, sole purpose of this is to keep the math working"
        ]
      },
      {
        "name": "MinPoolLiquidity",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40420f00000000000000000000000000",
        "docs": [
          " Minimum pool liquidity, sole purpose of this is to keep the math working"
        ]
      },
      {
        "name": "MaxInRatio",
        "type": "U128",
        "type_value": 6,
        "constants_value": "03000000000000000000000000000000",
        "docs": [
          " Max fraction of pool to sell in single transaction"
        ]
      },
      {
        "name": "MaxOutRatio",
        "type": "U128",
        "type_value": 6,
        "constants_value": "03000000000000000000000000000000",
        "docs": [
          " Max fraction of pool to buy in single transaction"
        ]
      },
      {
        "name": "repay_fee",
        "type": "Tuple:U32U32",
        "type_value": 95,
        "constants_value": "020000000a000000",
        "docs": null
      }
    ],
    "errors": [
      {
        "name": "CannotCreatePoolWithSameAssets",
        "doc": [
          "Pool assets can not be the same"
        ]
      },
      {
        "name": "NotOwner",
        "doc": [
          "Account is not a pool owner"
        ]
      },
      {
        "name": "SaleStarted",
        "doc": [
          "Sale already started"
        ]
      },
      {
        "name": "SaleNotEnded",
        "doc": [
          "Sale is still in progress"
        ]
      },
      {
        "name": "SaleIsNotRunning",
        "doc": [
          "Sale is not running"
        ]
      },
      {
        "name": "MaxSaleDurationExceeded",
        "doc": [
          "Sale duration is too long"
        ]
      },
      {
        "name": "CannotAddZeroLiquidity",
        "doc": [
          "Liquidity being added should not be zero"
        ]
      },
      {
        "name": "InsufficientAssetBalance",
        "doc": [
          "Asset balance too low"
        ]
      },
      {
        "name": "PoolNotFound",
        "doc": [
          "Pool does not exist"
        ]
      },
      {
        "name": "PoolAlreadyExists",
        "doc": [
          "Pool has been already created"
        ]
      },
      {
        "name": "InvalidBlockRange",
        "doc": [
          "Invalid block range"
        ]
      },
      {
        "name": "WeightCalculationError",
        "doc": [
          "Calculation error"
        ]
      },
      {
        "name": "InvalidWeight",
        "doc": [
          "Weight set is out of range"
        ]
      },
      {
        "name": "ZeroAmount",
        "doc": [
          "Can not perform a trade with zero amount"
        ]
      },
      {
        "name": "MaxInRatioExceeded",
        "doc": [
          "Trade amount is too high"
        ]
      },
      {
        "name": "MaxOutRatioExceeded",
        "doc": [
          "Trade amount is too high"
        ]
      },
      {
        "name": "FeeAmountInvalid",
        "doc": [
          "Invalid fee amount"
        ]
      },
      {
        "name": "TradingLimitReached",
        "doc": [
          "Trading limit reached"
        ]
      },
      {
        "name": "Overflow",
        "doc": [
          "An unexpected integer overflow occurred"
        ]
      },
      {
        "name": "NothingToUpdate",
        "doc": [
          "Nothing to update"
        ]
      },
      {
        "name": "InsufficientLiquidity",
        "doc": [
          "Liquidity has not reached the required minimum."
        ]
      },
      {
        "name": "InsufficientTradingAmount",
        "doc": [
          "Amount is less than minimum trading limit."
        ]
      },
      {
        "name": "FeeCollectorWithAssetAlreadyUsed",
        "doc": [
          "Not more than one fee collector per asset id"
        ]
      }
    ],
    "errors_value": {
      "type": 541
    },
    "index": 73
  },
  {
    "name": "XYK",
    "prefix": "XYK",
    "storage": [
      {
        "name": "ShareToken",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U32",
            "keys_id": 0,
            "value_id": 4
          }
        },
        "fallback": "0x00000000",
        "docs": [
          " Asset id storage for shared pool tokens"
        ]
      },
      {
        "name": "TotalLiquidity",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U128",
            "keys_id": 0,
            "value_id": 6
          }
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Total liquidity in a pool."
        ]
      },
      {
        "name": "PoolAssets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:U32U32",
            "keys_id": 0,
            "value_id": 95
          }
        },
        "fallback": "0x00",
        "docs": [
          " Asset pair in a pool."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4a00",
        "name": "create_pool",
        "docs": [
          "See [`Pallet::create_pool`]."
        ],
        "args": [
          {
            "name": "asset_a",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_a",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "asset_b",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_b",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4a01",
        "name": "add_liquidity",
        "docs": [
          "See [`Pallet::add_liquidity`]."
        ],
        "args": [
          {
            "name": "asset_a",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_b",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_a",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount_b_max_limit",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4a02",
        "name": "remove_liquidity",
        "docs": [
          "See [`Pallet::remove_liquidity`]."
        ],
        "args": [
          {
            "name": "asset_a",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_b",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "liquidity_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4a03",
        "name": "sell",
        "docs": [
          "See [`Pallet::sell`]."
        ],
        "args": [
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "max_limit",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "discount",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "4a04",
        "name": "buy",
        "docs": [
          "See [`Pallet::buy`]."
        ],
        "args": [
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "max_limit",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "discount",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 332
    },
    "events": [
      {
        "lookup": "4a00",
        "name": "LiquidityAdded",
        "docs": [
          "New liquidity was provided to the pool."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_a",
          "asset_b",
          "amount_a",
          "amount_b"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4a01",
        "name": "LiquidityRemoved",
        "docs": [
          "Liquidity was removed from the pool."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_a",
          "asset_b",
          "shares"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance"
        ]
      },
      {
        "lookup": "4a02",
        "name": "PoolCreated",
        "docs": [
          "Pool was created."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "who",
          "asset_a",
          "asset_b",
          "initial_shares_amount",
          "share_token",
          "pool"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance",
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "4a03",
        "name": "PoolDestroyed",
        "docs": [
          "Pool was destroyed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "who",
          "asset_a",
          "asset_b",
          "share_token",
          "pool"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "4a04",
        "name": "SellExecuted",
        "docs": [
          "Asset sale executed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128",
          "U32",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "who",
          "asset_in",
          "asset_out",
          "amount",
          "sale_price",
          "fee_asset",
          "fee_amount",
          "pool"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "AssetId",
          "Balance",
          "AccountId"
        ]
      },
      {
        "lookup": "4a05",
        "name": "BuyExecuted",
        "docs": [
          "Asset purchase executed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128",
          "U32",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "who",
          "asset_out",
          "asset_in",
          "amount",
          "buy_price",
          "fee_asset",
          "fee_amount",
          "pool"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "AssetId",
          "Balance",
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 111
    },
    "constants": [
      {
        "name": "NativeAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset Id"
        ]
      },
      {
        "name": "GetExchangeFee",
        "type": "Tuple:U32U32",
        "type_value": 95,
        "constants_value": "03000000e8030000",
        "docs": [
          " Trading fee rate"
        ]
      },
      {
        "name": "MinTradingLimit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "e8030000000000000000000000000000",
        "docs": [
          " Minimum trading limit"
        ]
      },
      {
        "name": "MinPoolLiquidity",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40420f00000000000000000000000000",
        "docs": [
          " Minimum pool liquidity"
        ]
      },
      {
        "name": "MaxInRatio",
        "type": "U128",
        "type_value": 6,
        "constants_value": "03000000000000000000000000000000",
        "docs": [
          " Max fraction of pool to sell in single transaction"
        ]
      },
      {
        "name": "MaxOutRatio",
        "type": "U128",
        "type_value": 6,
        "constants_value": "03000000000000000000000000000000",
        "docs": [
          " Max fraction of pool to buy in single transaction"
        ]
      },
      {
        "name": "OracleSource",
        "type": "[U8; 8]",
        "type_value": 119,
        "constants_value": "687964726178796b",
        "docs": [
          " Oracle source identifier for this pallet."
        ]
      }
    ],
    "errors": [
      {
        "name": "CannotCreatePoolWithSameAssets",
        "doc": [
          "It is not allowed to create a pool between same assets."
        ]
      },
      {
        "name": "InsufficientLiquidity",
        "doc": [
          "Liquidity has not reached the required minimum."
        ]
      },
      {
        "name": "InsufficientTradingAmount",
        "doc": [
          "Amount is less than min trading limit."
        ]
      },
      {
        "name": "ZeroLiquidity",
        "doc": [
          "Liquidity is zero."
        ]
      },
      {
        "name": "ZeroInitialPrice",
        "doc": [
          "It is not allowed to create a pool with zero initial price.",
          "Not used, kept for backward compatibility"
        ]
      },
      {
        "name": "CreatePoolAssetAmountInvalid",
        "doc": [
          "Overflow",
          "Not used, kept for backward compatibility"
        ]
      },
      {
        "name": "InvalidMintedLiquidity",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "InvalidLiquidityAmount",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "AssetAmountExceededLimit",
        "doc": [
          "Asset amount has exceeded given limit."
        ]
      },
      {
        "name": "AssetAmountNotReachedLimit",
        "doc": [
          "Asset amount has not reached given limit."
        ]
      },
      {
        "name": "InsufficientAssetBalance",
        "doc": [
          "Asset balance is not sufficient."
        ]
      },
      {
        "name": "InsufficientPoolAssetBalance",
        "doc": [
          "Not enough asset liquidity in the pool."
        ]
      },
      {
        "name": "InsufficientNativeCurrencyBalance",
        "doc": [
          "Not enough core asset liquidity in the pool."
        ]
      },
      {
        "name": "TokenPoolNotFound",
        "doc": [
          "Liquidity pool for given assets does not exist."
        ]
      },
      {
        "name": "TokenPoolAlreadyExists",
        "doc": [
          "Liquidity pool for given assets already exists."
        ]
      },
      {
        "name": "AddAssetAmountInvalid",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "RemoveAssetAmountInvalid",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "SellAssetAmountInvalid",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "BuyAssetAmountInvalid",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "FeeAmountInvalid",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "CannotApplyDiscount",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "MaxOutRatioExceeded",
        "doc": [
          "Max fraction of pool to buy in single transaction has been exceeded."
        ]
      },
      {
        "name": "MaxInRatioExceeded",
        "doc": [
          "Max fraction of pool to sell in single transaction has been exceeded."
        ]
      },
      {
        "name": "Overflow",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "CannotCreatePool",
        "doc": [
          "Pool cannot be created due to outside factors."
        ]
      }
    ],
    "errors_value": {
      "type": 542
    },
    "index": 74
  },
  {
    "name": "Referrals",
    "prefix": "Referrals",
    "storage": [
      {
        "name": "ReferralCodes",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "Vec<U8>"
            ],
            "value": "AccountId",
            "keys_id": 113,
            "value_id": 0
          }
        },
        "fallback": "0x00",
        "docs": [
          " Referral codes",
          " Maps a referral code to an account."
        ]
      },
      {
        "name": "ReferralAccounts",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<U8>",
            "keys_id": 0,
            "value_id": 113
          }
        },
        "fallback": "0x00",
        "docs": [
          " Referral accounts",
          " Maps an account to a referral code."
        ]
      },
      {
        "name": "LinkedAccounts",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "AccountId",
            "keys_id": 0,
            "value_id": 0
          }
        },
        "fallback": "0x00",
        "docs": [
          " Linked accounts.",
          " Maps an account to a referral account."
        ]
      },
      {
        "name": "ReferrerShares",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U128",
            "keys_id": 0,
            "value_id": 6
          }
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Shares of a referral account"
        ]
      },
      {
        "name": "TraderShares",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U128",
            "keys_id": 0,
            "value_id": 6
          }
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Shares of a trader account"
        ]
      },
      {
        "name": "TotalShares",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Total share issuance."
        ]
      },
      {
        "name": "Referrer",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:pallet_referrals:LevelU128",
            "keys_id": 0,
            "value_id": 543
          }
        },
        "fallback": "0x00",
        "docs": [
          " Referer level and total accumulated rewards over time.",
          " Maps referrer account to (Level, Balance). Level indicates current rewards and Balance is used to unlock next level.",
          " Dev note: we use OptionQuery here because this helps to easily determine that an account if referrer account."
        ]
      },
      {
        "name": "AssetRewards",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "pallet_referrals:Level"
            ],
            "value": "pallet_referrals:FeeDistribution",
            "keys_id": 544,
            "value_id": 116
          }
        },
        "fallback": "0x00",
        "docs": [
          " Asset fee distribution rewards information.",
          " Maps (asset_id, level) to asset reward percentages."
        ]
      },
      {
        "name": "PendingConversions",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "NULL",
            "keys_id": 4,
            "value_id": 36
          }
        },
        "fallback": "0x00",
        "docs": [
          " Information about assets that are currently in the rewards pot.",
          " Used to easily determine list of assets that need to be converted."
        ]
      },
      {
        "name": "CounterForPendingConversions",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          "Counter for the related counted storage map"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4b00",
        "name": "register_code",
        "docs": [
          "See [`Pallet::register_code`]."
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "ReferralCode<CodeLength>"
          }
        ]
      },
      {
        "lookup": "4b01",
        "name": "link_code",
        "docs": [
          "See [`Pallet::link_code`]."
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "ReferralCode<CodeLength>"
          }
        ]
      },
      {
        "lookup": "4b02",
        "name": "convert",
        "docs": [
          "See [`Pallet::convert`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          }
        ]
      },
      {
        "lookup": "4b03",
        "name": "claim_rewards",
        "docs": [
          "See [`Pallet::claim_rewards`]."
        ],
        "args": null
      },
      {
        "lookup": "4b04",
        "name": "set_reward_percentage",
        "docs": [
          "See [`Pallet::set_reward_percentage`]."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "level",
            "type": "pallet_referrals:Level",
            "type_name": "Level"
          },
          {
            "name": "rewards",
            "type": "pallet_referrals:FeeDistribution",
            "type_name": "FeeDistribution"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 333
    },
    "events": [
      {
        "lookup": "4b00",
        "name": "CodeRegistered",
        "docs": [
          "Referral code has been registered."
        ],
        "args": [
          "Vec<U8>",
          "AccountId"
        ],
        "args_name": [
          "code",
          "account"
        ],
        "args_type_name": [
          "ReferralCode<CodeLength>",
          "AccountId"
        ]
      },
      {
        "lookup": "4b01",
        "name": "CodeLinked",
        "docs": [
          "Referral code has been linked to an account."
        ],
        "args": [
          "AccountId",
          "Vec<U8>",
          "AccountId"
        ],
        "args_name": [
          "account",
          "code",
          "referral_account"
        ],
        "args_type_name": [
          "AccountId",
          "ReferralCode<CodeLength>",
          "AccountId"
        ]
      },
      {
        "lookup": "4b02",
        "name": "Converted",
        "docs": [
          "Asset has been converted to RewardAsset."
        ],
        "args": [
          "pallet_referrals:AssetAmount",
          "pallet_referrals:AssetAmount"
        ],
        "args_name": [
          "from",
          "to"
        ],
        "args_type_name": [
          "AssetAmount<AssetId>",
          "AssetAmount<AssetId>"
        ]
      },
      {
        "lookup": "4b03",
        "name": "Claimed",
        "docs": [
          "Rewards claimed."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "referrer_rewards",
          "trade_rewards"
        ],
        "args_type_name": [
          "AccountId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4b04",
        "name": "AssetRewardsUpdated",
        "docs": [
          "New asset rewards has been set."
        ],
        "args": [
          "U32",
          "pallet_referrals:Level",
          "pallet_referrals:FeeDistribution"
        ],
        "args_name": [
          "asset_id",
          "level",
          "rewards"
        ],
        "args_type_name": [
          "AssetId",
          "Level",
          "FeeDistribution"
        ]
      },
      {
        "lookup": "4b05",
        "name": "LevelUp",
        "docs": [
          "Referrer reached new level."
        ],
        "args": [
          "AccountId",
          "pallet_referrals:Level"
        ],
        "args_name": [
          "who",
          "level"
        ],
        "args_type_name": [
          "AccountId",
          "Level"
        ]
      }
    ],
    "events_value": {
      "type": 112
    },
    "constants": [
      {
        "name": "RewardAsset",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " ID of an asset that is used to distribute rewards in."
        ]
      },
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 246,
        "constants_value": "726566657272616c",
        "docs": [
          " Pallet id. Determines account which holds accumulated rewards in various assets."
        ]
      },
      {
        "name": "RegistrationFee",
        "type": "Tuple:U32U128AccountId",
        "type_value": 545,
        "constants_value": "0000000000e02367e8c9000000000000000000006d6f646c70792f74727372790000000000000000000000000000000000000000",
        "docs": [
          " Registration fee details.",
          " (ID of an asset which fee is to be paid in, Amount, Beneficiary account)"
        ]
      },
      {
        "name": "CodeLength",
        "type": "U32",
        "type_value": 4,
        "constants_value": "0a000000",
        "docs": [
          " Maximum referral code length."
        ]
      },
      {
        "name": "MinCodeLength",
        "type": "U32",
        "type_value": 4,
        "constants_value": "04000000",
        "docs": [
          " Minimum referral code length."
        ]
      },
      {
        "name": "SeedNativeAmount",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00a0724e180900000000000000000000",
        "docs": [
          " Seed amount that was sent to the reward pot."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooLong",
        "doc": [
          "Referral code is too long."
        ]
      },
      {
        "name": "TooShort",
        "doc": [
          "Referral code is too short."
        ]
      },
      {
        "name": "InvalidCharacter",
        "doc": [
          "Referral code contains invalid character. Only alphanumeric characters are allowed."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "Referral code already exists."
        ]
      },
      {
        "name": "InvalidCode",
        "doc": [
          "Provided referral code is invalid. Either does not exist or is too long."
        ]
      },
      {
        "name": "AlreadyLinked",
        "doc": [
          "Account is already linked to another referral account."
        ]
      },
      {
        "name": "ZeroAmount",
        "doc": [
          "Nothing in the referral pot account for the asset."
        ]
      },
      {
        "name": "LinkNotAllowed",
        "doc": [
          "Linking an account to the same referral account is not allowed."
        ]
      },
      {
        "name": "IncorrectRewardCalculation",
        "doc": [
          "Calculated rewards are more than the fee amount. This can happen if percentages are incorrectly set."
        ]
      },
      {
        "name": "IncorrectRewardPercentage",
        "doc": [
          "Given referrer and trader percentages exceeds 100% percent."
        ]
      },
      {
        "name": "AlreadyRegistered",
        "doc": [
          "The account has already a code registered."
        ]
      },
      {
        "name": "PriceNotFound",
        "doc": [
          "Price for given asset pair not found."
        ]
      },
      {
        "name": "ConversionMinTradingAmountNotReached",
        "doc": [
          "Minimum trading amount for conversion has not been reached."
        ]
      },
      {
        "name": "ConversionZeroAmountReceived",
        "doc": [
          "Zero amount received from conversion."
        ]
      }
    ],
    "errors_value": {
      "type": 546
    },
    "index": 75
  },
  {
    "name": "XcmRateLimiter",
    "prefix": "XcmRateLimiter",
    "storage": [
      {
        "name": "AccumulatedAmounts",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "staging_xcm:v3:multilocation:MultiLocation"
            ],
            "value": "pallet_xcm_rate_limiter:AccumulatedAmount",
            "keys_id": 69,
            "value_id": 547
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000",
        "docs": [
          " Accumulated amounts for each asset"
        ]
      }
    ],
    "calls_value": {
      "type": 334
    },
    "events_value": {
      "type": 117
    },
    "constants": [
      {
        "name": "DeferDuration",
        "type": "U32",
        "type_value": 4,
        "constants_value": "60540000",
        "docs": [
          " Defer duration base to be used for calculating the specific defer duration for any asset"
        ]
      },
      {
        "name": "MaxDeferDuration",
        "type": "U32",
        "type_value": 4,
        "constants_value": "80320200",
        "docs": [
          " The maximum number of blocks to defer XCMs by."
        ]
      }
    ],
    "errors": null,
    "errors_value": {
      "type": 548
    },
    "index": 76
  },
  {
    "name": "Tokens",
    "prefix": "Tokens",
    "storage": [
      {
        "name": "TotalIssuance",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U128",
            "keys_id": 4,
            "value_id": 6
          }
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The total issuance of a token type."
        ]
      },
      {
        "name": "Locks",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "Vec<orml_tokens:BalanceLock>",
            "keys_id": 540,
            "value_id": 549
          }
        },
        "fallback": "0x00",
        "docs": [
          " Any liquidity locks of a token type under an account.",
          " NOTE: Should only be accessed when setting, changing and freeing a lock."
        ]
      },
      {
        "name": "Accounts",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "orml_tokens:AccountData",
            "keys_id": 540,
            "value_id": 552
          }
        },
        "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The balance of a token type under an account.",
          "",
          " NOTE: If the total is ever zero, decrease account ref account.",
          "",
          " NOTE: This is only used in the case that this module is used to store",
          " balances."
        ]
      },
      {
        "name": "Reserves",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "Vec<orml_tokens:ReserveData>",
            "keys_id": 540,
            "value_id": 553
          }
        },
        "fallback": "0x00",
        "docs": [
          " Named reserves on some account balances."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4d00",
        "name": "transfer",
        "docs": [
          "See [`Pallet::transfer`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4d01",
        "name": "transfer_all",
        "docs": [
          "See [`Pallet::transfer_all`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "keep_alive",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "4d02",
        "name": "transfer_keep_alive",
        "docs": [
          "See [`Pallet::transfer_keep_alive`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4d03",
        "name": "force_transfer",
        "docs": [
          "See [`Pallet::force_transfer`]."
        ],
        "args": [
          {
            "name": "source",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4d04",
        "name": "set_balance",
        "docs": [
          "See [`Pallet::set_balance`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "new_free",
            "type": "compact<U128>",
            "type_name": "Balance"
          },
          {
            "name": "new_reserved",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 335
    },
    "events": [
      {
        "lookup": "4d00",
        "name": "Endowed",
        "docs": [
          "An account was created with some free balance."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d01",
        "name": "DustLost",
        "docs": [
          "An account was removed whose balance was non-zero but below",
          "ExistentialDeposit, resulting in an outright loss."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d02",
        "name": "Transfer",
        "docs": [
          "Transfer succeeded."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d03",
        "name": "Reserved",
        "docs": [
          "Some balance was reserved (moved from free to reserved)."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d04",
        "name": "Unreserved",
        "docs": [
          "Some balance was unreserved (moved from reserved to free)."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d05",
        "name": "ReserveRepatriated",
        "docs": [
          "Some reserved balance was repatriated (moved from reserved to",
          "another account)."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128",
          "frame_support:traits:tokens:misc:BalanceStatus"
        ],
        "args_name": [
          "currency_id",
          "from",
          "to",
          "amount",
          "status"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "AccountId",
          "Balance",
          "BalanceStatus"
        ]
      },
      {
        "lookup": "4d06",
        "name": "BalanceSet",
        "docs": [
          "A balance was set by root."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "free",
          "reserved"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4d07",
        "name": "TotalIssuanceSet",
        "docs": [
          "The total issuance of an currency has been set"
        ],
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "Balance"
        ]
      },
      {
        "lookup": "4d08",
        "name": "Withdrawn",
        "docs": [
          "Some balances were withdrawn (e.g. pay for transaction fee)"
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d09",
        "name": "Slashed",
        "docs": [
          "Some balances were slashed (e.g. due to mis-behavior)"
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "free_amount",
          "reserved_amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4d0a",
        "name": "Deposited",
        "docs": [
          "Deposited some balance into an account"
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d0b",
        "name": "LockSet",
        "docs": [
          "Some funds are locked"
        ],
        "args": [
          "[U8; 8]",
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "lock_id",
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "LockIdentifier",
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d0c",
        "name": "LockRemoved",
        "docs": [
          "Some locked funds were unlocked"
        ],
        "args": [
          "[U8; 8]",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "lock_id",
          "currency_id",
          "who"
        ],
        "args_type_name": [
          "LockIdentifier",
          "CurrencyId",
          "AccountId"
        ]
      },
      {
        "lookup": "4d0d",
        "name": "Locked",
        "docs": [
          "Some free balance was locked."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d0e",
        "name": "Unlocked",
        "docs": [
          "Some locked balance was freed."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d0f",
        "name": "Issued",
        "docs": null,
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "Balance"
        ]
      },
      {
        "lookup": "4d10",
        "name": "Rescinded",
        "docs": null,
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 118
    },
    "constants": [
      {
        "name": "MaxLocks",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": null
      },
      {
        "name": "MaxReserves",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of named reserves that can exist on an account."
        ]
      }
    ],
    "errors": [
      {
        "name": "BalanceTooLow",
        "doc": [
          "The balance is too low"
        ]
      },
      {
        "name": "AmountIntoBalanceFailed",
        "doc": [
          "Cannot convert Amount into Balance type"
        ]
      },
      {
        "name": "LiquidityRestrictions",
        "doc": [
          "Failed because liquidity restrictions due to locking"
        ]
      },
      {
        "name": "MaxLocksExceeded",
        "doc": [
          "Failed because the maximum locks was exceeded"
        ]
      },
      {
        "name": "KeepAlive",
        "doc": [
          "Transfer/payment would kill account"
        ]
      },
      {
        "name": "ExistentialDeposit",
        "doc": [
          "Value too low to create account due to existential deposit"
        ]
      },
      {
        "name": "DeadAccount",
        "doc": [
          "Beneficiary account must pre-exist"
        ]
      },
      {
        "name": "TooManyReserves",
        "doc": null
      }
    ],
    "errors_value": {
      "type": 556
    },
    "index": 77
  },
  {
    "name": "Currencies",
    "prefix": "",
    "storage": null,
    "calls": [
      {
        "lookup": "4f00",
        "name": "transfer",
        "docs": [
          "See [`Pallet::transfer`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyIdOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "4f01",
        "name": "transfer_native_currency",
        "docs": [
          "See [`Pallet::transfer_native_currency`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "4f02",
        "name": "update_balance",
        "docs": [
          "See [`Pallet::update_balance`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyIdOf"
          },
          {
            "name": "amount",
            "type": "I128",
            "type_name": "AmountOf"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 336
    },
    "events": [
      {
        "lookup": "4f00",
        "name": "Transferred",
        "docs": [
          "Currency transfer success."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "CurrencyIdOf",
          "AccountId",
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "4f01",
        "name": "BalanceUpdated",
        "docs": [
          "Update balance success."
        ],
        "args": [
          "U32",
          "AccountId",
          "I128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyIdOf",
          "AccountId",
          "AmountOf"
        ]
      },
      {
        "lookup": "4f02",
        "name": "Deposited",
        "docs": [
          "Deposit success."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyIdOf",
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "4f03",
        "name": "Withdrawn",
        "docs": [
          "Withdraw success."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyIdOf",
          "AccountId",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 120
    },
    "constants": [
      {
        "name": "GetNativeCurrencyId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": null
      }
    ],
    "errors": [
      {
        "name": "AmountIntoBalanceFailed",
        "doc": [
          "Unable to convert the Amount type into Balance."
        ]
      },
      {
        "name": "BalanceTooLow",
        "doc": [
          "Balance is too low."
        ]
      },
      {
        "name": "DepositFailed",
        "doc": [
          "Deposit result is not expected"
        ]
      }
    ],
    "errors_value": {
      "type": 557
    },
    "index": 79
  },
  {
    "name": "Vesting",
    "prefix": "Vesting",
    "storage": [
      {
        "name": "VestingSchedules",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<orml_vesting:VestingSchedule>",
            "keys_id": 0,
            "value_id": 558
          }
        },
        "fallback": "0x00",
        "docs": [
          " Vesting schedules of an account.",
          "",
          " VestingSchedules: map AccountId => Vec<VestingSchedule>"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "5100",
        "name": "claim",
        "docs": [
          "See [`Pallet::claim`]."
        ],
        "args": null
      },
      {
        "lookup": "5101",
        "name": "vested_transfer",
        "docs": [
          "See [`Pallet::vested_transfer`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "schedule",
            "type": "orml_vesting:VestingSchedule",
            "type_name": "VestingScheduleOf"
          }
        ]
      },
      {
        "lookup": "5102",
        "name": "update_vesting_schedules",
        "docs": [
          "See [`Pallet::update_vesting_schedules`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "vesting_schedules",
            "type": "Vec<orml_vesting:VestingSchedule>",
            "type_name": "Vec<VestingScheduleOf>"
          }
        ]
      },
      {
        "lookup": "5103",
        "name": "claim_for",
        "docs": [
          "See [`Pallet::claim_for`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 337
    },
    "events": [
      {
        "lookup": "5100",
        "name": "VestingScheduleAdded",
        "docs": [
          "Added new vesting schedule."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "orml_vesting:VestingSchedule"
        ],
        "args_name": [
          "from",
          "to",
          "vesting_schedule"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "VestingScheduleOf"
        ]
      },
      {
        "lookup": "5101",
        "name": "Claimed",
        "docs": [
          "Claimed vesting."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "5102",
        "name": "VestingSchedulesUpdated",
        "docs": [
          "Updated vesting schedules."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "who"
        ],
        "args_type_name": [
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 122
    },
    "constants": [
      {
        "name": "MinVestedTransfer",
        "type": "U128",
        "type_value": 6,
        "constants_value": "64000000000000000000000000000000",
        "docs": [
          " The minimum amount transferred to call `vested_transfer`."
        ]
      }
    ],
    "errors": [
      {
        "name": "ZeroVestingPeriod",
        "doc": [
          "Vesting period is zero"
        ]
      },
      {
        "name": "ZeroVestingPeriodCount",
        "doc": [
          "Number of vests is zero"
        ]
      },
      {
        "name": "InsufficientBalanceToLock",
        "doc": [
          "Insufficient amount of balance to lock"
        ]
      },
      {
        "name": "TooManyVestingSchedules",
        "doc": [
          "This account have too many vesting schedules"
        ]
      },
      {
        "name": "AmountLow",
        "doc": [
          "The vested transfer amount is too low"
        ]
      },
      {
        "name": "MaxVestingSchedulesExceeded",
        "doc": [
          "Failed because the maximum vesting schedules was exceeded"
        ]
      }
    ],
    "errors_value": {
      "type": 559
    },
    "index": 81
  },
  {
    "name": "EVM",
    "prefix": "EVM",
    "storage": [
      {
        "name": "AccountCodes",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H160"
            ],
            "value": "Vec<U8>",
            "keys_id": 126,
            "value_id": 13
          }
        },
        "fallback": "0x00",
        "docs": null
      },
      {
        "name": "AccountCodesMetadata",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H160"
            ],
            "value": "pallet_evm:CodeMetadata",
            "keys_id": 126,
            "value_id": 560
          }
        },
        "fallback": "0x00",
        "docs": null
      },
      {
        "name": "AccountStorages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H160",
              "H256"
            ],
            "value": "H256",
            "keys_id": 561,
            "value_id": 12
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": null
      },
      {
        "name": "Suicided",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H160"
            ],
            "value": "NULL",
            "keys_id": 126,
            "value_id": 36
          }
        },
        "fallback": "0x00",
        "docs": null
      }
    ],
    "calls": [
      {
        "lookup": "5a00",
        "name": "withdraw",
        "docs": [
          "See [`Pallet::withdraw`]."
        ],
        "args": [
          {
            "name": "address",
            "type": "H160",
            "type_name": "H160"
          },
          {
            "name": "value",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "5a01",
        "name": "call",
        "docs": [
          "See [`Pallet::call`]."
        ],
        "args": [
          {
            "name": "source",
            "type": "H160",
            "type_name": "H160"
          },
          {
            "name": "target",
            "type": "H160",
            "type_name": "H160"
          },
          {
            "name": "input",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "value",
            "type": "U256",
            "type_name": "U256"
          },
          {
            "name": "gas_limit",
            "type": "U64",
            "type_name": "u64"
          },
          {
            "name": "max_fee_per_gas",
            "type": "U256",
            "type_name": "U256"
          },
          {
            "name": "max_priority_fee_per_gas",
            "type": "option<U256>",
            "type_name": "Option<U256>"
          },
          {
            "name": "nonce",
            "type": "option<U256>",
            "type_name": "Option<U256>"
          },
          {
            "name": "access_list",
            "type": "Vec<Tuple:H160Vec<H256>>",
            "type_name": "Vec<(H160, Vec<H256>)>"
          }
        ]
      },
      {
        "lookup": "5a02",
        "name": "create",
        "docs": [
          "See [`Pallet::create`]."
        ],
        "args": [
          {
            "name": "source",
            "type": "H160",
            "type_name": "H160"
          },
          {
            "name": "init",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "value",
            "type": "U256",
            "type_name": "U256"
          },
          {
            "name": "gas_limit",
            "type": "U64",
            "type_name": "u64"
          },
          {
            "name": "max_fee_per_gas",
            "type": "U256",
            "type_name": "U256"
          },
          {
            "name": "max_priority_fee_per_gas",
            "type": "option<U256>",
            "type_name": "Option<U256>"
          },
          {
            "name": "nonce",
            "type": "option<U256>",
            "type_name": "Option<U256>"
          },
          {
            "name": "access_list",
            "type": "Vec<Tuple:H160Vec<H256>>",
            "type_name": "Vec<(H160, Vec<H256>)>"
          }
        ]
      },
      {
        "lookup": "5a03",
        "name": "create2",
        "docs": [
          "See [`Pallet::create2`]."
        ],
        "args": [
          {
            "name": "source",
            "type": "H160",
            "type_name": "H160"
          },
          {
            "name": "init",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "salt",
            "type": "H256",
            "type_name": "H256"
          },
          {
            "name": "value",
            "type": "U256",
            "type_name": "U256"
          },
          {
            "name": "gas_limit",
            "type": "U64",
            "type_name": "u64"
          },
          {
            "name": "max_fee_per_gas",
            "type": "U256",
            "type_name": "U256"
          },
          {
            "name": "max_priority_fee_per_gas",
            "type": "option<U256>",
            "type_name": "Option<U256>"
          },
          {
            "name": "nonce",
            "type": "option<U256>",
            "type_name": "Option<U256>"
          },
          {
            "name": "access_list",
            "type": "Vec<Tuple:H160Vec<H256>>",
            "type_name": "Vec<(H160, Vec<H256>)>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 339
    },
    "events": [
      {
        "lookup": "5a00",
        "name": "Log",
        "docs": [
          "Ethereum events from contracts."
        ],
        "args": [
          "ethereum:log:Log"
        ],
        "args_name": [
          "log"
        ],
        "args_type_name": [
          "Log"
        ]
      },
      {
        "lookup": "5a01",
        "name": "Created",
        "docs": [
          "A contract has been created at given address."
        ],
        "args": [
          "H160"
        ],
        "args_name": [
          "address"
        ],
        "args_type_name": [
          "H160"
        ]
      },
      {
        "lookup": "5a02",
        "name": "CreatedFailed",
        "docs": [
          "A contract was attempted to be created, but the execution failed."
        ],
        "args": [
          "H160"
        ],
        "args_name": [
          "address"
        ],
        "args_type_name": [
          "H160"
        ]
      },
      {
        "lookup": "5a03",
        "name": "Executed",
        "docs": [
          "A contract has been executed successfully with states applied."
        ],
        "args": [
          "H160"
        ],
        "args_name": [
          "address"
        ],
        "args_type_name": [
          "H160"
        ]
      },
      {
        "lookup": "5a04",
        "name": "ExecutedFailed",
        "docs": [
          "A contract has been executed with errors. States are reverted with only gas fees applied."
        ],
        "args": [
          "H160"
        ],
        "args_name": [
          "address"
        ],
        "args_type_name": [
          "H160"
        ]
      }
    ],
    "events_value": {
      "type": 124
    },
    "errors": [
      {
        "name": "BalanceLow",
        "doc": [
          "Not enough balance to perform action"
        ]
      },
      {
        "name": "FeeOverflow",
        "doc": [
          "Calculating total fee overflowed"
        ]
      },
      {
        "name": "PaymentOverflow",
        "doc": [
          "Calculating total payment overflowed"
        ]
      },
      {
        "name": "WithdrawFailed",
        "doc": [
          "Withdraw fee failed"
        ]
      },
      {
        "name": "GasPriceTooLow",
        "doc": [
          "Gas price is too low."
        ]
      },
      {
        "name": "InvalidNonce",
        "doc": [
          "Nonce is invalid"
        ]
      },
      {
        "name": "GasLimitTooLow",
        "doc": [
          "Gas limit is too low."
        ]
      },
      {
        "name": "GasLimitTooHigh",
        "doc": [
          "Gas limit is too high."
        ]
      },
      {
        "name": "Undefined",
        "doc": [
          "Undefined error."
        ]
      },
      {
        "name": "Reentrancy",
        "doc": [
          "EVM reentrancy"
        ]
      },
      {
        "name": "TransactionMustComeFromEOA",
        "doc": [
          "EIP-3607,"
        ]
      }
    ],
    "errors_value": {
      "type": 562
    },
    "index": 90
  },
  {
    "name": "EVMChainId",
    "prefix": "EVMChainId",
    "storage": [
      {
        "name": "ChainId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 11
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The EVM chain ID."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 91
  },
  {
    "name": "Ethereum",
    "prefix": "Ethereum",
    "storage": [
      {
        "name": "Pending",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:ethereum:transaction:TransactionV2fp_rpc:TransactionStatusethereum:receipt:ReceiptV3>",
          "PlainTypeValue": 563
        },
        "fallback": "0x00",
        "docs": [
          " Current building block's transactions and receipts."
        ]
      },
      {
        "name": "CurrentBlock",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "ethereum:block:Block",
          "PlainTypeValue": 572
        },
        "fallback": "0x00",
        "docs": [
          " The current Ethereum block."
        ]
      },
      {
        "name": "CurrentReceipts",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<ethereum:receipt:ReceiptV3>",
          "PlainTypeValue": 577
        },
        "fallback": "0x00",
        "docs": [
          " The current Ethereum receipts."
        ]
      },
      {
        "name": "CurrentTransactionStatuses",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<fp_rpc:TransactionStatus>",
          "PlainTypeValue": 578
        },
        "fallback": "0x00",
        "docs": [
          " The current transaction statuses."
        ]
      },
      {
        "name": "BlockHash",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U256"
            ],
            "value": "H256",
            "keys_id": 340,
            "value_id": 12
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": null
      }
    ],
    "calls": [
      {
        "lookup": "5c00",
        "name": "transact",
        "docs": [
          "See [`Pallet::transact`]."
        ],
        "args": [
          {
            "name": "transaction",
            "type": "ethereum:transaction:TransactionV2",
            "type_name": "Transaction"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 345
    },
    "events": [
      {
        "lookup": "5c00",
        "name": "Executed",
        "docs": [
          "An ethereum transaction was successfully executed."
        ],
        "args": [
          "H160",
          "H160",
          "H256",
          "evm_core:error:ExitReason",
          "Vec<U8>"
        ],
        "args_name": [
          "from",
          "to",
          "transaction_hash",
          "exit_reason",
          "extra_data"
        ],
        "args_type_name": [
          "H160",
          "H160",
          "H256",
          "ExitReason",
          "Bytes"
        ]
      }
    ],
    "events_value": {
      "type": 128
    },
    "errors": [
      {
        "name": "InvalidSignature",
        "doc": [
          "Signature is invalid."
        ]
      },
      {
        "name": "PreLogExists",
        "doc": [
          "Pre-log is present, therefore transact is not allowed."
        ]
      }
    ],
    "errors_value": {
      "type": 579
    },
    "index": 92
  },
  {
    "name": "EVMAccounts",
    "prefix": "EVMAccounts",
    "storage": [
      {
        "name": "AccountExtension",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H160"
            ],
            "value": "[U8; 12]",
            "keys_id": 126,
            "value_id": 267
          }
        },
        "fallback": "0x00",
        "docs": [
          " Maps an EVM address to the last 12 bytes of a substrate account."
        ]
      },
      {
        "name": "ContractDeployer",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H160"
            ],
            "value": "NULL",
            "keys_id": 126,
            "value_id": 36
          }
        },
        "fallback": "0x00",
        "docs": [
          " Whitelisted addresses that are allowed to deploy smart contracts."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "5d00",
        "name": "bind_evm_address",
        "docs": [
          "See [`Pallet::bind_evm_address`]."
        ],
        "args": null
      },
      {
        "lookup": "5d01",
        "name": "add_contract_deployer",
        "docs": [
          "See [`Pallet::add_contract_deployer`]."
        ],
        "args": [
          {
            "name": "address",
            "type": "H160",
            "type_name": "EvmAddress"
          }
        ]
      },
      {
        "lookup": "5d02",
        "name": "remove_contract_deployer",
        "docs": [
          "See [`Pallet::remove_contract_deployer`]."
        ],
        "args": [
          {
            "name": "address",
            "type": "H160",
            "type_name": "EvmAddress"
          }
        ]
      },
      {
        "lookup": "5d03",
        "name": "renounce_contract_deployer",
        "docs": [
          "See [`Pallet::renounce_contract_deployer`]."
        ],
        "args": null
      }
    ],
    "calls_value": {
      "type": 355
    },
    "events": [
      {
        "lookup": "5d00",
        "name": "Bound",
        "docs": [
          "Binding was created."
        ],
        "args": [
          "AccountId",
          "H160"
        ],
        "args_name": [
          "account",
          "address"
        ],
        "args_type_name": [
          "AccountId",
          "EvmAddress"
        ]
      },
      {
        "lookup": "5d01",
        "name": "DeployerAdded",
        "docs": [
          "Deployer was added."
        ],
        "args": [
          "H160"
        ],
        "args_name": [
          "who"
        ],
        "args_type_name": [
          "EvmAddress"
        ]
      },
      {
        "lookup": "5d02",
        "name": "DeployerRemoved",
        "docs": [
          "Deployer was removed."
        ],
        "args": [
          "H160"
        ],
        "args_name": [
          "who"
        ],
        "args_type_name": [
          "EvmAddress"
        ]
      }
    ],
    "events_value": {
      "type": 137
    },
    "constants": [
      {
        "name": "FeeMultiplier",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " Fee multiplier for the binding of addresses."
        ]
      }
    ],
    "errors": [
      {
        "name": "TruncatedAccountAlreadyUsed",
        "doc": [
          "EVM Account's nonce is not zero"
        ]
      },
      {
        "name": "AddressAlreadyBound",
        "doc": [
          "Address is already bound"
        ]
      },
      {
        "name": "BoundAddressCannotBeUsed",
        "doc": [
          "Bound address cannot be used"
        ]
      },
      {
        "name": "AddressNotWhitelisted",
        "doc": [
          "Address not whitelisted"
        ]
      }
    ],
    "errors_value": {
      "type": 580
    },
    "index": 93
  },
  {
    "name": "DynamicEvmFee",
    "prefix": "DynamicEvmFee",
    "storage": [
      {
        "name": "BaseFeePerGas",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U256",
          "PlainTypeValue": 340
        },
        "fallback": "0xc0e1e40000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Base fee per gas"
        ]
      }
    ],
    "constants": [
      {
        "name": "WethAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "14000000",
        "docs": [
          " WETH Asset Id"
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 94
  },
  {
    "name": "XYKLiquidityMining",
    "prefix": "",
    "storage": null,
    "calls": [
      {
        "lookup": "5f00",
        "name": "create_global_farm",
        "docs": [
          "See [`Pallet::create_global_farm`]."
        ],
        "args": [
          {
            "name": "total_rewards",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "planned_yielding_periods",
            "type": "U32",
            "type_name": "PeriodOf"
          },
          {
            "name": "blocks_per_period",
            "type": "U32",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "incentivized_asset",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "reward_currency",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "owner",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "yield_per_period",
            "type": "U64",
            "type_name": "Perquintill"
          },
          {
            "name": "min_deposit",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "price_adjustment",
            "type": "U128",
            "type_name": "FixedU128"
          }
        ]
      },
      {
        "lookup": "5f01",
        "name": "update_global_farm",
        "docs": [
          "See [`Pallet::update_global_farm`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "price_adjustment",
            "type": "U128",
            "type_name": "FixedU128"
          }
        ]
      },
      {
        "lookup": "5f02",
        "name": "terminate_global_farm",
        "docs": [
          "See [`Pallet::terminate_global_farm`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          }
        ]
      },
      {
        "lookup": "5f03",
        "name": "create_yield_farm",
        "docs": [
          "See [`Pallet::create_yield_farm`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "asset_pair",
            "type": "pallet_xyk:types:AssetPair",
            "type_name": "AssetPair"
          },
          {
            "name": "multiplier",
            "type": "U128",
            "type_name": "FarmMultiplier"
          },
          {
            "name": "loyalty_curve",
            "type": "option<pallet_liquidity_mining:types:LoyaltyCurve>",
            "type_name": "Option<LoyaltyCurve>"
          }
        ]
      },
      {
        "lookup": "5f04",
        "name": "update_yield_farm",
        "docs": [
          "See [`Pallet::update_yield_farm`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "asset_pair",
            "type": "pallet_xyk:types:AssetPair",
            "type_name": "AssetPair"
          },
          {
            "name": "multiplier",
            "type": "U128",
            "type_name": "FarmMultiplier"
          }
        ]
      },
      {
        "lookup": "5f05",
        "name": "stop_yield_farm",
        "docs": [
          "See [`Pallet::stop_yield_farm`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "asset_pair",
            "type": "pallet_xyk:types:AssetPair",
            "type_name": "AssetPair"
          }
        ]
      },
      {
        "lookup": "5f06",
        "name": "resume_yield_farm",
        "docs": [
          "See [`Pallet::resume_yield_farm`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          },
          {
            "name": "asset_pair",
            "type": "pallet_xyk:types:AssetPair",
            "type_name": "AssetPair"
          },
          {
            "name": "multiplier",
            "type": "U128",
            "type_name": "FarmMultiplier"
          }
        ]
      },
      {
        "lookup": "5f07",
        "name": "terminate_yield_farm",
        "docs": [
          "See [`Pallet::terminate_yield_farm`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          },
          {
            "name": "asset_pair",
            "type": "pallet_xyk:types:AssetPair",
            "type_name": "AssetPair"
          }
        ]
      },
      {
        "lookup": "5f08",
        "name": "deposit_shares",
        "docs": [
          "See [`Pallet::deposit_shares`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          },
          {
            "name": "asset_pair",
            "type": "pallet_xyk:types:AssetPair",
            "type_name": "AssetPair"
          },
          {
            "name": "shares_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "5f09",
        "name": "redeposit_shares",
        "docs": [
          "See [`Pallet::redeposit_shares`]."
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          },
          {
            "name": "asset_pair",
            "type": "pallet_xyk:types:AssetPair",
            "type_name": "AssetPair"
          },
          {
            "name": "deposit_id",
            "type": "U128",
            "type_name": "DepositId"
          }
        ]
      },
      {
        "lookup": "5f0a",
        "name": "claim_rewards",
        "docs": [
          "See [`Pallet::claim_rewards`]."
        ],
        "args": [
          {
            "name": "deposit_id",
            "type": "U128",
            "type_name": "DepositId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          }
        ]
      },
      {
        "lookup": "5f0b",
        "name": "withdraw_shares",
        "docs": [
          "See [`Pallet::withdraw_shares`]."
        ],
        "args": [
          {
            "name": "deposit_id",
            "type": "U128",
            "type_name": "DepositId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          },
          {
            "name": "asset_pair",
            "type": "pallet_xyk:types:AssetPair",
            "type_name": "AssetPair"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 356
    },
    "events": [
      {
        "lookup": "5f00",
        "name": "GlobalFarmCreated",
        "docs": [
          "New global farm was created."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "U32",
          "U64",
          "U32",
          "U32",
          "U32",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "id",
          "owner",
          "total_rewards",
          "reward_currency",
          "yield_per_period",
          "planned_yielding_periods",
          "blocks_per_period",
          "incentivized_asset",
          "max_reward_per_period",
          "min_deposit",
          "price_adjustment"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "AccountId",
          "Balance",
          "AssetId",
          "Perquintill",
          "PeriodOf",
          "BlockNumberFor",
          "AssetId",
          "Balance",
          "Balance",
          "FixedU128"
        ]
      },
      {
        "lookup": "5f01",
        "name": "GlobalFarmUpdated",
        "docs": [
          "Global farm's `price_adjustment` was updated."
        ],
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "id",
          "price_adjustment"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "FixedU128"
        ]
      },
      {
        "lookup": "5f02",
        "name": "YieldFarmCreated",
        "docs": [
          "New yield farm was added into the farm."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "pallet_xyk:types:AssetPair",
          "option<pallet_liquidity_mining:types:LoyaltyCurve>"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "multiplier",
          "asset_pair",
          "loyalty_curve"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "FarmMultiplier",
          "AssetPair",
          "Option<LoyaltyCurve>"
        ]
      },
      {
        "lookup": "5f03",
        "name": "GlobalFarmTerminated",
        "docs": [
          "Global farm was terminated."
        ],
        "args": [
          "U32",
          "AccountId",
          "U32",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "who",
          "reward_currency",
          "undistributed_rewards"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "AccountId",
          "AssetId",
          "Balance"
        ]
      },
      {
        "lookup": "5f04",
        "name": "SharesDeposited",
        "docs": [
          "New LP tokens was deposited."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "U128",
          "U32",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "who",
          "amount",
          "lp_token",
          "deposit_id"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AccountId",
          "Balance",
          "AssetId",
          "DepositId"
        ]
      },
      {
        "lookup": "5f05",
        "name": "SharesRedeposited",
        "docs": [
          "LP token was redeposited for a new yield farm entry"
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "U128",
          "U32",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "who",
          "amount",
          "lp_token",
          "deposit_id"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AccountId",
          "Balance",
          "AssetId",
          "DepositId"
        ]
      },
      {
        "lookup": "5f06",
        "name": "RewardClaimed",
        "docs": [
          "Rewards was claimed."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "U128",
          "U32",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "who",
          "claimed",
          "reward_currency",
          "deposit_id"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AccountId",
          "Balance",
          "AssetId",
          "DepositId"
        ]
      },
      {
        "lookup": "5f07",
        "name": "SharesWithdrawn",
        "docs": [
          "LP tokens was withdrawn."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "who",
          "lp_token",
          "amount",
          "deposit_id"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AccountId",
          "AssetId",
          "Balance",
          "DepositId"
        ]
      },
      {
        "lookup": "5f08",
        "name": "YieldFarmStopped",
        "docs": [
          "Yield farm for asset pair was stopped."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "pallet_xyk:types:AssetPair"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "who",
          "asset_pair"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AccountId",
          "AssetPair"
        ]
      },
      {
        "lookup": "5f09",
        "name": "YieldFarmResumed",
        "docs": [
          "Yield farm for asset pair was resumed."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "pallet_xyk:types:AssetPair",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "who",
          "asset_pair",
          "multiplier"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AccountId",
          "AssetPair",
          "FarmMultiplier"
        ]
      },
      {
        "lookup": "5f0a",
        "name": "YieldFarmTerminated",
        "docs": [
          "Yield farm was terminated from global farm."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "pallet_xyk:types:AssetPair"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "who",
          "asset_pair"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AccountId",
          "AssetPair"
        ]
      },
      {
        "lookup": "5f0b",
        "name": "YieldFarmUpdated",
        "docs": [
          "Yield farm multiplier was updated."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "pallet_xyk:types:AssetPair",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "who",
          "asset_pair",
          "multiplier"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AccountId",
          "AssetPair",
          "FarmMultiplier"
        ]
      },
      {
        "lookup": "5f0c",
        "name": "DepositDestroyed",
        "docs": [
          "NFT representing deposit has been destroyed"
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "deposit_id"
        ],
        "args_type_name": [
          "AccountId",
          "DepositId"
        ]
      }
    ],
    "events_value": {
      "type": 138
    },
    "constants": [
      {
        "name": "NFTCollectionId",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0d150000000000000000000000000000",
        "docs": [
          " NFT collection id for liquidity mining's deposit nfts."
        ]
      }
    ],
    "errors": [
      {
        "name": "CantFindDepositOwner",
        "doc": [
          "Nft pallet didn't return an owner."
        ]
      },
      {
        "name": "InsufficientXykSharesBalance",
        "doc": [
          "Account balance of XYK pool shares is not sufficient."
        ]
      },
      {
        "name": "XykPoolDoesntExist",
        "doc": [
          "XYK pool does not exist"
        ]
      },
      {
        "name": "NotDepositOwner",
        "doc": [
          "Account is not deposit owner."
        ]
      },
      {
        "name": "CantGetXykAssets",
        "doc": [
          "XYK did not return assets for given pool id"
        ]
      },
      {
        "name": "DepositDataNotFound",
        "doc": [
          "Deposit data not found"
        ]
      },
      {
        "name": "ZeroClaimedRewards",
        "doc": [
          "Calculated reward to claim is 0."
        ]
      },
      {
        "name": "AssetNotInAssetPair",
        "doc": [
          "Asset is not in the `AssetPair`."
        ]
      },
      {
        "name": "InvalidAssetPair",
        "doc": [
          "Provided `AssetPair` is not used by the deposit."
        ]
      },
      {
        "name": "AssetNotRegistered",
        "doc": [
          "Asset is not registered in asset registry."
        ]
      },
      {
        "name": "FailToGetPotId",
        "doc": [
          "Failed to calculate `pot`'s account."
        ]
      }
    ],
    "errors_value": {
      "type": 581
    },
    "index": 95
  },
  {
    "name": "XYKWarehouseLM",
    "prefix": "XYKWarehouseLM",
    "storage": [
      {
        "name": "FarmSequencer",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Id sequencer for `GlobalFarm` and `YieldFarm`."
        ]
      },
      {
        "name": "DepositSequencer",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": null
      },
      {
        "name": "GlobalFarm",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_liquidity_mining:types:GlobalFarmData@582",
            "keys_id": 4,
            "value_id": 582
          }
        },
        "fallback": "0x00",
        "docs": null
      },
      {
        "name": "YieldFarm",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32",
              "U32"
            ],
            "value": "pallet_liquidity_mining:types:YieldFarmData@584",
            "keys_id": 583,
            "value_id": 584
          }
        },
        "fallback": "0x00",
        "docs": [
          " Yield farm details."
        ]
      },
      {
        "name": "Deposit",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "pallet_liquidity_mining:types:DepositData@585",
            "keys_id": 6,
            "value_id": 585
          }
        },
        "fallback": "0x00",
        "docs": [
          " Deposit details."
        ]
      },
      {
        "name": "ActiveYieldFarm",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "U32",
            "keys_id": 540,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Active(farms able to receive LP shares deposits) yield farms."
        ]
      }
    ],
    "calls_value": {
      "type": 357
    },
    "events": [
      {
        "lookup": "6000",
        "name": "GlobalFarmAccRPZUpdated",
        "docs": [
          "Global farm accumulated reward per share was updated."
        ],
        "args": [
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "accumulated_rpz",
          "total_shares_z"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "FixedU128",
          "Balance"
        ]
      },
      {
        "lookup": "6001",
        "name": "YieldFarmAccRPVSUpdated",
        "docs": [
          "Yield farm accumulated reward per valued share was updated."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "accumulated_rpvs",
          "total_valued_shares"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "FixedU128",
          "Balance"
        ]
      },
      {
        "lookup": "6002",
        "name": "AllRewardsDistributed",
        "docs": [
          "Global farm has no more rewards to distribute in the moment."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "global_farm_id"
        ],
        "args_type_name": [
          "GlobalFarmId"
        ]
      }
    ],
    "events_value": {
      "type": 140
    },
    "constants": [
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 246,
        "constants_value": "78796b4c4d704944",
        "docs": [
          " Pallet id."
        ]
      },
      {
        "name": "MinTotalFarmRewards",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00407a10f35a00000000000000000000",
        "docs": [
          " Minimum total rewards to distribute from global farm during liquidity mining."
        ]
      },
      {
        "name": "MinPlannedYieldingPeriods",
        "type": "U32",
        "type_value": 4,
        "constants_value": "68380000",
        "docs": [
          " Minimum number of periods to run liquidity mining program."
        ]
      },
      {
        "name": "MaxFarmEntriesPerDeposit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "05000000",
        "docs": [
          " Maximum number of yield farms same LP shares can be re/deposited into. This value always",
          " MUST BE >= 1.         "
        ]
      },
      {
        "name": "MaxYieldFarmsPerGlobalFarm",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " Max number of yield farms can exist in global farm. This includes all farms in the",
          " storage(active, stopped, terminated)."
        ]
      }
    ],
    "errors": [
      {
        "name": "GlobalFarmNotFound",
        "doc": [
          "Global farm does not exist."
        ]
      },
      {
        "name": "YieldFarmNotFound",
        "doc": [
          "Yield farm does not exist."
        ]
      },
      {
        "name": "DoubleClaimInPeriod",
        "doc": [
          "Multiple claims in the same period is not allowed."
        ]
      },
      {
        "name": "LiquidityMiningCanceled",
        "doc": [
          "Liquidity mining is canceled."
        ]
      },
      {
        "name": "LiquidityMiningIsActive",
        "doc": [
          "Liquidity mining is not canceled."
        ]
      },
      {
        "name": "LiquidityMiningIsNotStopped",
        "doc": [
          "Liquidity mining is in `active` or `terminated` state and action cannot be completed."
        ]
      },
      {
        "name": "InvalidDepositAmount",
        "doc": [
          "LP shares amount is not valid."
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "Account is not allowed to perform action."
        ]
      },
      {
        "name": "InvalidMultiplier",
        "doc": [
          "Yield farm multiplier can't be 0."
        ]
      },
      {
        "name": "YieldFarmAlreadyExists",
        "doc": [
          "Yield farm with given `amm_pool_id` already exists in global farm."
        ]
      },
      {
        "name": "InvalidInitialRewardPercentage",
        "doc": [
          "Loyalty curve's initial reward percentage is not valid. Valid range is: [0, 1)."
        ]
      },
      {
        "name": "GlobalFarmIsNotEmpty",
        "doc": [
          "One or more yield farms exist in global farm."
        ]
      },
      {
        "name": "MissingIncentivizedAsset",
        "doc": [
          "Farm's `incentivized_asset` is missing in provided asset pair."
        ]
      },
      {
        "name": "InsufficientRewardCurrencyBalance",
        "doc": [
          "Reward currency balance is not sufficient."
        ]
      },
      {
        "name": "InvalidBlocksPerPeriod",
        "doc": [
          "Blocks per period can't be 0."
        ]
      },
      {
        "name": "InvalidYieldPerPeriod",
        "doc": [
          "Yield per period can't be 0."
        ]
      },
      {
        "name": "InvalidTotalRewards",
        "doc": [
          "Total rewards is less than `MinTotalFarmRewards`."
        ]
      },
      {
        "name": "InvalidPlannedYieldingPeriods",
        "doc": [
          "Planned yielding periods is less than `MinPlannedYieldingPeriods`."
        ]
      },
      {
        "name": "MaxEntriesPerDeposit",
        "doc": [
          "Maximum number of locks reached for deposit."
        ]
      },
      {
        "name": "DoubleLock",
        "doc": [
          "Trying to lock LP shares into already locked yield farm."
        ]
      },
      {
        "name": "YieldFarmEntryNotFound",
        "doc": [
          "Yield farm entry doesn't exist for given deposit."
        ]
      },
      {
        "name": "GlobalFarmIsFull",
        "doc": [
          "Max number of yield farms in global farm was reached. Global farm can't accept new",
          "yield farms until some yield farm is not removed from storage."
        ]
      },
      {
        "name": "InvalidMinDeposit",
        "doc": [
          "Invalid min. deposit was set for global farm."
        ]
      },
      {
        "name": "InvalidPriceAdjustment",
        "doc": [
          "Price adjustment multiplier can't be 0."
        ]
      },
      {
        "name": "ErrorGetAccountId",
        "doc": [
          "Account creation from id failed."
        ]
      },
      {
        "name": "IncorrectValuedShares",
        "doc": [
          "Value of deposited shares amount in reward currency is bellow min. limit."
        ]
      },
      {
        "name": "RewardCurrencyNotRegistered",
        "doc": [
          "`reward_currency` is not registered in asset registry."
        ]
      },
      {
        "name": "IncentivizedAssetNotRegistered",
        "doc": [
          "`incentivized_asset` is not registered in asset registry."
        ]
      },
      {
        "name": "InconsistentState",
        "doc": [
          "Action cannot be completed because unexpected error has occurred. This should be reported",
          "to protocol maintainers."
        ],
        "fields": [
          {
            "type": "pallet_liquidity_mining:pallet:InconsistentStateError",
            "type_name": "InconsistentStateError",
            "doc": null
          }
        ]
      }
    ],
    "errors_value": {
      "type": 589
    },
    "index": 96
  },
  {
    "name": "ParachainSystem",
    "prefix": "ParachainSystem",
    "storage": [
      {
        "name": "UnincludedSegment",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<cumulus_pallet_parachain_system:unincluded_segment:Ancestor>",
          "PlainTypeValue": 590
        },
        "fallback": "0x00",
        "docs": [
          " Latest included block descendants the runtime accepted. In other words, these are",
          " ancestors of the currently executing block which have not been included in the observed",
          " relay-chain state.",
          "",
          " The segment length is limited by the capacity returned from the [`ConsensusHook`] configured",
          " in the pallet."
        ]
      },
      {
        "name": "AggregatedUnincludedSegment",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_parachain_system:unincluded_segment:SegmentTracker",
          "PlainTypeValue": 599
        },
        "fallback": "0x00",
        "docs": [
          " Storage field that keeps track of bandwidth used by the unincluded segment along with the",
          " latest the latest HRMP watermark. Used for limiting the acceptance of new blocks with",
          " respect to relay chain constraints."
        ]
      },
      {
        "name": "PendingValidationCode",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 13
        },
        "fallback": "0x00",
        "docs": [
          " In case of a scheduled upgrade, this storage field contains the validation code to be",
          " applied.",
          "",
          " As soon as the relay chain gives us the go-ahead signal, we will overwrite the",
          " [`:code`][sp_core::storage::well_known_keys::CODE] which will result the next block process",
          " with the new validation code. This concludes the upgrade process."
        ]
      },
      {
        "name": "NewValidationCode",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 13
        },
        "fallback": "0x00",
        "docs": [
          " Validation code that is set by the parachain and is to be communicated to collator and",
          " consequently the relay-chain.",
          "",
          " This will be cleared in `on_initialize` of each new block if no other pallet already set",
          " the value."
        ]
      },
      {
        "name": "ValidationData",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "polkadot_primitives:v5:PersistedValidationData",
          "PlainTypeValue": 360
        },
        "fallback": "0x00",
        "docs": [
          " The [`PersistedValidationData`] set for this block.",
          " This value is expected to be set only once per block and it's never stored",
          " in the trie."
        ]
      },
      {
        "name": "DidSetValidationCode",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 48
        },
        "fallback": "0x00",
        "docs": [
          " Were the validation data set to notify the relay chain?"
        ]
      },
      {
        "name": "LastRelayChainBlockNumber",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The relay chain block number associated with the last parachain block."
        ]
      },
      {
        "name": "UpgradeRestrictionSignal",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "option<polkadot_primitives:v5:UpgradeRestriction>",
          "PlainTypeValue": 600
        },
        "fallback": "0x00",
        "docs": [
          " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
          " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
          " candidate will be invalid.",
          "",
          " This storage item is a mirror of the corresponding value for the current parachain from the",
          " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
          " set after the inherent."
        ]
      },
      {
        "name": "UpgradeGoAhead",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "option<polkadot_primitives:v5:UpgradeGoAhead>",
          "PlainTypeValue": 597
        },
        "fallback": "0x00",
        "docs": [
          " Optional upgrade go-ahead signal from the relay-chain.",
          "",
          " This storage item is a mirror of the corresponding value for the current parachain from the",
          " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
          " set after the inherent."
        ]
      },
      {
        "name": "RelayStateProof",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 362
        },
        "fallback": "0x00",
        "docs": [
          " The state proof for the last relay parent block.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "RelevantMessagingState",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_parachain_system:relay_state_snapshot:MessagingStateSnapshot",
          "PlainTypeValue": 602
        },
        "fallback": "0x00",
        "docs": [
          " The snapshot of some state related to messaging relevant to the current parachain as per",
          " the relay parent.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "HostConfiguration",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "polkadot_primitives:v5:AbridgedHostConfiguration",
          "PlainTypeValue": 607
        },
        "fallback": "0x00",
        "docs": [
          " The parachain host configuration that was obtained from the relay parent.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "LastDmqMqcHead",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 609
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The last downward message queue chain head we have observed.",
          "",
          " This value is loaded before and saved after processing inbound downward messages carried",
          " by the system inherent."
        ]
      },
      {
        "name": "LastHrmpMqcHeads",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:U32H256>",
          "PlainTypeValue": 610
        },
        "fallback": "0x00",
        "docs": [
          " The message queue chain heads we have observed per each channel incoming channel.",
          "",
          " This value is loaded before and saved after processing inbound downward messages carried",
          " by the system inherent."
        ]
      },
      {
        "name": "ProcessedDownwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Number of downward messages processed in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "HrmpWatermark",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " HRMP watermark that was set in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "HrmpOutboundMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<polkadot_core_primitives:OutboundHrmpMessage>",
          "PlainTypeValue": 613
        },
        "fallback": "0x00",
        "docs": [
          " HRMP messages that were sent in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "UpwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 215
        },
        "fallback": "0x00",
        "docs": [
          " Upward messages that were sent in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "PendingUpwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 215
        },
        "fallback": "0x00",
        "docs": [
          " Upward messages that are still pending and not yet send to the relay chain."
        ]
      },
      {
        "name": "AnnouncedHrmpMessagesPerCandidate",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
          " announcing the weight of `on_initialize` and `on_finalize`."
        ]
      },
      {
        "name": "ReservedXcmpWeightOverride",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "sp_weights:weight_v2:Weight",
          "PlainTypeValue": 9
        },
        "fallback": "0x00",
        "docs": [
          " The weight we reserve at the beginning of the block for processing XCMP messages. This",
          " overrides the amount set in the Config trait."
        ]
      },
      {
        "name": "ReservedDmpWeightOverride",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "sp_weights:weight_v2:Weight",
          "PlainTypeValue": 9
        },
        "fallback": "0x00",
        "docs": [
          " The weight we reserve at the beginning of the block for processing DMP messages. This",
          " overrides the amount set in the Config trait."
        ]
      },
      {
        "name": "AuthorizedUpgrade",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_parachain_system:CodeUpgradeAuthorization",
          "PlainTypeValue": 615
        },
        "fallback": "0x00",
        "docs": [
          " The next authorized upgrade, if there is one."
        ]
      },
      {
        "name": "CustomValidationHeadData",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 13
        },
        "fallback": "0x00",
        "docs": [
          " A custom head data that should be returned as result of `validate_block`.",
          "",
          " See `Pallet::set_custom_validation_head_data` for more information."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "6700",
        "name": "set_validation_data",
        "docs": [
          "See [`Pallet::set_validation_data`]."
        ],
        "args": [
          {
            "name": "data",
            "type": "cumulus_primitives_parachain_inherent:ParachainInherentData",
            "type_name": "ParachainInherentData"
          }
        ]
      },
      {
        "lookup": "6701",
        "name": "sudo_send_upward_message",
        "docs": [
          "See [`Pallet::sudo_send_upward_message`]."
        ],
        "args": [
          {
            "name": "message",
            "type": "Vec<U8>",
            "type_name": "UpwardMessage"
          }
        ]
      },
      {
        "lookup": "6702",
        "name": "authorize_upgrade",
        "docs": [
          "See [`Pallet::authorize_upgrade`]."
        ],
        "args": [
          {
            "name": "code_hash",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "check_version",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "6703",
        "name": "enact_authorized_upgrade",
        "docs": [
          "See [`Pallet::enact_authorized_upgrade`]."
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 358
    },
    "events": [
      {
        "lookup": "6700",
        "name": "ValidationFunctionStored",
        "docs": [
          "The validation function has been scheduled to apply."
        ],
        "args": null
      },
      {
        "lookup": "6701",
        "name": "ValidationFunctionApplied",
        "docs": [
          "The validation function was applied as of the contained relay chain block number."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "relay_chain_block_num"
        ],
        "args_type_name": [
          "RelayChainBlockNumber"
        ]
      },
      {
        "lookup": "6702",
        "name": "ValidationFunctionDiscarded",
        "docs": [
          "The relay-chain aborted the upgrade process."
        ],
        "args": null
      },
      {
        "lookup": "6703",
        "name": "UpgradeAuthorized",
        "docs": [
          "An upgrade has been authorized."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "code_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "6704",
        "name": "DownwardMessagesReceived",
        "docs": [
          "Some downward messages have been received and will be processed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "count"
        ],
        "args_type_name": [
          "u32"
        ]
      },
      {
        "lookup": "6705",
        "name": "DownwardMessagesProcessed",
        "docs": [
          "Downward messages were processed using the given weight."
        ],
        "args": [
          "sp_weights:weight_v2:Weight",
          "H256"
        ],
        "args_name": [
          "weight_used",
          "dmq_head"
        ],
        "args_type_name": [
          "Weight",
          "relay_chain::Hash"
        ]
      },
      {
        "lookup": "6706",
        "name": "UpwardMessageSent",
        "docs": [
          "An upward message was sent to the relay chain."
        ],
        "args": [
          "option<[U8; 32]>"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "Option<XcmHash>"
        ]
      }
    ],
    "events_value": {
      "type": 141
    },
    "errors": [
      {
        "name": "OverlappingUpgrades",
        "doc": [
          "Attempt to upgrade validation function while existing upgrade pending."
        ]
      },
      {
        "name": "ProhibitedByPolkadot",
        "doc": [
          "Polkadot currently prohibits this parachain from upgrading its validation function."
        ]
      },
      {
        "name": "TooBig",
        "doc": [
          "The supplied validation function has compiled into a blob larger than Polkadot is",
          "willing to run."
        ]
      },
      {
        "name": "ValidationDataNotAvailable",
        "doc": [
          "The inherent which supplies the validation data did not run this block."
        ]
      },
      {
        "name": "HostConfigurationNotAvailable",
        "doc": [
          "The inherent which supplies the host configuration did not run this block."
        ]
      },
      {
        "name": "NotScheduled",
        "doc": [
          "No validation function upgrade is currently scheduled."
        ]
      },
      {
        "name": "NothingAuthorized",
        "doc": [
          "No code upgrade has been authorized."
        ]
      },
      {
        "name": "Unauthorized",
        "doc": [
          "The given code upgrade has not been authorized."
        ]
      }
    ],
    "errors_value": {
      "type": 616
    },
    "index": 103
  },
  {
    "name": "ParachainInfo",
    "prefix": "ParachainInfo",
    "storage": [
      {
        "name": "ParachainId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 197
        },
        "fallback": "0x64000000",
        "docs": null
      }
    ],
    "calls_value": {
      "type": 371
    },
    "errors": null,
    "errors_value": null,
    "index": 105
  },
  {
    "name": "Scheduler",
    "prefix": "Scheduler",
    "storage": [
      {
        "name": "IncompleteSince",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": null
      },
      {
        "name": "Agenda",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<option<pallet_scheduler:Scheduled>>",
            "keys_id": 4,
            "value_id": 617
          }
        },
        "fallback": "0x00",
        "docs": [
          " Items to be executed, indexed by the block number that they should be executed on."
        ]
      },
      {
        "name": "Lookup",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "[U8; 32]"
            ],
            "value": "Tuple:U32U32",
            "keys_id": 1,
            "value_id": 95
          }
        },
        "fallback": "0x00",
        "docs": [
          " Lookup from a name to the block number and index of the task.",
          "",
          " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
          " identities."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0500",
        "name": "schedule",
        "docs": [
          "See [`Pallet::schedule`]."
        ],
        "args": [
          {
            "name": "when",
            "type": "U32",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "maybe_periodic",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<schedule::Period<BlockNumberFor>>"
          },
          {
            "name": "priority",
            "type": "U8",
            "type_name": "schedule::Priority"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0501",
        "name": "cancel",
        "docs": [
          "See [`Pallet::cancel`]."
        ],
        "args": [
          {
            "name": "when",
            "type": "U32",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "index",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "0502",
        "name": "schedule_named",
        "docs": [
          "See [`Pallet::schedule_named`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "[U8; 32]",
            "type_name": "TaskName"
          },
          {
            "name": "when",
            "type": "U32",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "maybe_periodic",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<schedule::Period<BlockNumberFor>>"
          },
          {
            "name": "priority",
            "type": "U8",
            "type_name": "schedule::Priority"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0503",
        "name": "cancel_named",
        "docs": [
          "See [`Pallet::cancel_named`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "[U8; 32]",
            "type_name": "TaskName"
          }
        ]
      },
      {
        "lookup": "0504",
        "name": "schedule_after",
        "docs": [
          "See [`Pallet::schedule_after`]."
        ],
        "args": [
          {
            "name": "after",
            "type": "U32",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "maybe_periodic",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<schedule::Period<BlockNumberFor>>"
          },
          {
            "name": "priority",
            "type": "U8",
            "type_name": "schedule::Priority"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0505",
        "name": "schedule_named_after",
        "docs": [
          "See [`Pallet::schedule_named_after`]."
        ],
        "args": [
          {
            "name": "id",
            "type": "[U8; 32]",
            "type_name": "TaskName"
          },
          {
            "name": "after",
            "type": "U32",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "maybe_periodic",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<schedule::Period<BlockNumberFor>>"
          },
          {
            "name": "priority",
            "type": "U8",
            "type_name": "schedule::Priority"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 372
    },
    "events": [
      {
        "lookup": "0500",
        "name": "Scheduled",
        "docs": [
          "Scheduled some task."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "when",
          "index"
        ],
        "args_type_name": [
          "BlockNumberFor",
          "u32"
        ]
      },
      {
        "lookup": "0501",
        "name": "Canceled",
        "docs": [
          "Canceled some task."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "when",
          "index"
        ],
        "args_type_name": [
          "BlockNumberFor",
          "u32"
        ]
      },
      {
        "lookup": "0502",
        "name": "Dispatched",
        "docs": [
          "Dispatched some task."
        ],
        "args": [
          "Tuple:U32U32",
          "option<[U8; 32]>",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "task",
          "id",
          "result"
        ],
        "args_type_name": [
          "TaskAddress<BlockNumberFor>",
          "Option<TaskName>",
          "DispatchResult"
        ]
      },
      {
        "lookup": "0503",
        "name": "CallUnavailable",
        "docs": [
          "The call for the provided hash was not found so the task has been aborted."
        ],
        "args": [
          "Tuple:U32U32",
          "option<[U8; 32]>"
        ],
        "args_name": [
          "task",
          "id"
        ],
        "args_type_name": [
          "TaskAddress<BlockNumberFor>",
          "Option<TaskName>"
        ]
      },
      {
        "lookup": "0504",
        "name": "PeriodicFailed",
        "docs": [
          "The given task was unable to be renewed since the agenda is full at that block."
        ],
        "args": [
          "Tuple:U32U32",
          "option<[U8; 32]>"
        ],
        "args_name": [
          "task",
          "id"
        ],
        "args_type_name": [
          "TaskAddress<BlockNumberFor>",
          "Option<TaskName>"
        ]
      },
      {
        "lookup": "0505",
        "name": "PermanentlyOverweight",
        "docs": [
          "The given task can never be executed since it is overweight."
        ],
        "args": [
          "Tuple:U32U32",
          "option<[U8; 32]>"
        ],
        "args_name": [
          "task",
          "id"
        ],
        "args_type_name": [
          "TaskAddress<BlockNumberFor>",
          "Option<TaskName>"
        ]
      }
    ],
    "events_value": {
      "type": 143
    },
    "constants": [
      {
        "name": "MaximumWeight",
        "type": "sp_weights:weight_v2:Weight",
        "type_value": 9,
        "constants_value": "0700a0db215d02000001",
        "docs": [
          " The maximum weight that may be scheduled per block for any dispatchables."
        ]
      },
      {
        "name": "MaxScheduledPerBlock",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of scheduled calls in the queue for a single block.",
          "",
          " NOTE:",
          " + Dependent pallets' benchmarks might require a higher limit for the setting. Set a",
          " higher limit under `runtime-benchmarks` feature."
        ]
      }
    ],
    "errors": [
      {
        "name": "FailedToSchedule",
        "doc": [
          "Failed to schedule a call"
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Cannot find the scheduled call."
        ]
      },
      {
        "name": "TargetBlockNumberInPast",
        "doc": [
          "Given target block number is in the past."
        ]
      },
      {
        "name": "RescheduleNoChange",
        "doc": [
          "Reschedule failed because it does not change scheduled time."
        ]
      },
      {
        "name": "Named",
        "doc": [
          "Attempt to use a non-named function on a named task."
        ]
      }
    ],
    "errors_value": {
      "type": 621
    },
    "index": 5
  },
  {
    "name": "DCA",
    "prefix": "DCA",
    "storage": [
      {
        "name": "ScheduleIdSequencer",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Id sequencer for schedules"
        ]
      },
      {
        "name": "Schedules",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_dca:types:Schedule",
            "keys_id": 4,
            "value_id": 374
          }
        },
        "fallback": "0x00",
        "docs": [
          " Storing schedule details"
        ]
      },
      {
        "name": "ScheduleOwnership",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "NULL",
            "keys_id": 540,
            "value_id": 36
          }
        },
        "fallback": "0x00",
        "docs": [
          " Storing schedule ownership"
        ]
      },
      {
        "name": "RemainingAmounts",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U128",
            "keys_id": 4,
            "value_id": 6
          }
        },
        "fallback": "0x00",
        "docs": [
          " Keep tracking the remaining amounts to spend for DCA schedules"
        ]
      },
      {
        "name": "RetriesOnError",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U8",
            "keys_id": 4,
            "value_id": 2
          }
        },
        "fallback": "0x00",
        "docs": [
          " Keep tracking the retry on error flag for DCA schedules"
        ]
      },
      {
        "name": "ScheduleIdsPerBlock",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<U32>",
            "keys_id": 4,
            "value_id": 622
          }
        },
        "fallback": "0x00",
        "docs": [
          " Keep tracking of the schedule ids to be executed in the block"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4200",
        "name": "schedule",
        "docs": [
          "See [`Pallet::schedule`]."
        ],
        "args": [
          {
            "name": "schedule",
            "type": "pallet_dca:types:Schedule",
            "type_name": "Schedule<AccountId, AssetId, BlockNumberFor>"
          },
          {
            "name": "start_execution_block",
            "type": "option<U32>",
            "type_name": "Option<BlockNumberFor>"
          }
        ]
      },
      {
        "lookup": "4201",
        "name": "terminate",
        "docs": [
          "See [`Pallet::terminate`]."
        ],
        "args": [
          {
            "name": "schedule_id",
            "type": "U32",
            "type_name": "ScheduleId"
          },
          {
            "name": "next_execution_block",
            "type": "option<U32>",
            "type_name": "Option<BlockNumberFor>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 373
    },
    "events": [
      {
        "lookup": "4200",
        "name": "ExecutionStarted",
        "docs": [
          "The DCA execution is started"
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "id",
          "block"
        ],
        "args_type_name": [
          "ScheduleId",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "4201",
        "name": "Scheduled",
        "docs": [
          "The DCA is scheduled for next execution"
        ],
        "args": [
          "U32",
          "AccountId",
          "U32",
          "U128",
          "pallet_dca:types:Order"
        ],
        "args_name": [
          "id",
          "who",
          "period",
          "total_amount",
          "order"
        ],
        "args_type_name": [
          "ScheduleId",
          "AccountId",
          "BlockNumberFor",
          "Balance",
          "Order<AssetId>"
        ]
      },
      {
        "lookup": "4202",
        "name": "ExecutionPlanned",
        "docs": [
          "The DCA is planned for blocknumber"
        ],
        "args": [
          "U32",
          "AccountId",
          "U32"
        ],
        "args_name": [
          "id",
          "who",
          "block"
        ],
        "args_type_name": [
          "ScheduleId",
          "AccountId",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "4203",
        "name": "TradeExecuted",
        "docs": [
          "The DCA trade is successfully executed"
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "id",
          "who",
          "amount_in",
          "amount_out"
        ],
        "args_type_name": [
          "ScheduleId",
          "AccountId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4204",
        "name": "TradeFailed",
        "docs": [
          "The DCA trade execution is failed"
        ],
        "args": [
          "U32",
          "AccountId",
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "id",
          "who",
          "error"
        ],
        "args_type_name": [
          "ScheduleId",
          "AccountId",
          "DispatchError"
        ]
      },
      {
        "lookup": "4205",
        "name": "Terminated",
        "docs": [
          "The DCA is terminated and completely removed from the chain"
        ],
        "args": [
          "U32",
          "AccountId",
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "id",
          "who",
          "error"
        ],
        "args_type_name": [
          "ScheduleId",
          "AccountId",
          "DispatchError"
        ]
      },
      {
        "lookup": "4206",
        "name": "Completed",
        "docs": [
          "The DCA is completed and completely removed from the chain"
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "id",
          "who"
        ],
        "args_type_name": [
          "ScheduleId",
          "AccountId"
        ]
      },
      {
        "lookup": "4207",
        "name": "RandomnessGenerationFailed",
        "docs": [
          "Randomness generation failed possibly coming from missing data about relay chain"
        ],
        "args": [
          "U32",
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "block",
          "error"
        ],
        "args_type_name": [
          "BlockNumberFor",
          "DispatchError"
        ]
      }
    ],
    "events_value": {
      "type": 144
    },
    "constants": [
      {
        "name": "MaxPriceDifferenceBetweenBlocks",
        "type": "U32",
        "type_value": 85,
        "constants_value": "983a0000",
        "docs": [
          "Max price difference allowed between blocks"
        ]
      },
      {
        "name": "MaxSchedulePerBlock",
        "type": "U32",
        "type_value": 4,
        "constants_value": "14000000",
        "docs": [
          "The number of max schedules to be executed per block"
        ]
      },
      {
        "name": "MaxNumberOfRetriesOnError",
        "type": "U8",
        "type_value": 2,
        "constants_value": "03",
        "docs": [
          "The number of max retries in case of trade limit error"
        ]
      },
      {
        "name": "MinimumTradingLimit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "e8030000000000000000000000000000",
        "docs": [
          " Minimum trading limit for a single trade"
        ]
      },
      {
        "name": "NativeAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset Id"
        ]
      },
      {
        "name": "MinBudgetInNativeCurrency",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0080c6a47e8d03000000000000000000",
        "docs": [
          "Minimum budget to be able to schedule a DCA, specified in native currency"
        ]
      },
      {
        "name": "FeeReceiver",
        "type": "AccountId",
        "type_value": 0,
        "constants_value": "6d6f646c70792f74727372790000000000000000000000000000000000000000",
        "docs": [
          "The fee receiver for transaction fees"
        ]
      },
      {
        "name": "NamedReserveId",
        "type": "[U8; 8]",
        "type_value": 119,
        "constants_value": "6463616f72646572",
        "docs": [
          " Named reserve identifier to store named reserves for orders of each users"
        ]
      }
    ],
    "errors": [
      {
        "name": "ScheduleNotFound",
        "doc": [
          "Schedule not exist"
        ]
      },
      {
        "name": "MinTradeAmountNotReached",
        "doc": [
          "The min trade amount is not reached"
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "Forbidden as the user is not the owner of the schedule"
        ]
      },
      {
        "name": "BlockNumberIsNotInFuture",
        "doc": [
          "The next execution block number is not in the future"
        ]
      },
      {
        "name": "PriceUnstable",
        "doc": [
          "Price is unstable as price change from oracle data is bigger than max allowed"
        ]
      },
      {
        "name": "CalculatingPriceError",
        "doc": [
          "Error occurred when calculating price"
        ]
      },
      {
        "name": "TotalAmountIsSmallerThanMinBudget",
        "doc": [
          "The total amount to be reserved is smaller than min budget"
        ]
      },
      {
        "name": "BudgetTooLow",
        "doc": [
          "The budget is too low for executing one DCA"
        ]
      },
      {
        "name": "NoFreeBlockFound",
        "doc": [
          "There is no free block found to plan DCA execution"
        ]
      },
      {
        "name": "ManuallyTerminated",
        "doc": [
          "The DCA schedule has been manually terminated"
        ]
      },
      {
        "name": "MaxRetryReached",
        "doc": [
          "Max number of retries reached for schedule"
        ]
      },
      {
        "name": "TradeLimitReached",
        "doc": [
          "Absolutely trade limit reached reached, leading to retry"
        ]
      },
      {
        "name": "SlippageLimitReached",
        "doc": [
          "Slippage limit calculated from oracle is reached, leading to retry"
        ]
      },
      {
        "name": "NoParentHashFound",
        "doc": [
          "No parent hash has been found from relay chain"
        ]
      },
      {
        "name": "InvalidState",
        "doc": [
          "Error that should not really happen only in case of invalid state of the schedule storage entries"
        ]
      }
    ],
    "errors_value": {
      "type": 623
    },
    "index": 66
  },
  {
    "name": "PolkadotXcm",
    "prefix": "PolkadotXcm",
    "storage": [
      {
        "name": "QueryCounter",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 11
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The latest available query index."
        ]
      },
      {
        "name": "Queries",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U64"
            ],
            "value": "pallet_xcm:pallet:QueryStatus",
            "keys_id": 11,
            "value_id": 624
          }
        },
        "fallback": "0x00",
        "docs": [
          " The ongoing queries."
        ]
      },
      {
        "name": "AssetTraps",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "U32",
            "keys_id": 12,
            "value_id": 4
          }
        },
        "fallback": "0x00000000",
        "docs": [
          " The existing asset traps.",
          "",
          " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
          " times this pair has been trapped (usually just 1 if it exists at all)."
        ]
      },
      {
        "name": "SafeXcmVersion",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Default version to encode XCM when latest version of destination is unknown. If `None`,",
          " then the destinations whose XCM version is unknown are considered unreachable."
        ]
      },
      {
        "name": "SupportedVersion",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "staging_xcm:VersionedMultiLocation"
            ],
            "value": "U32",
            "keys_id": 629,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " The Latest versions that we know various locations support."
        ]
      },
      {
        "name": "VersionNotifiers",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "staging_xcm:VersionedMultiLocation"
            ],
            "value": "U64",
            "keys_id": 629,
            "value_id": 11
          }
        },
        "fallback": "0x00",
        "docs": [
          " All locations that we have requested version notifications from."
        ]
      },
      {
        "name": "VersionNotifyTargets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "staging_xcm:VersionedMultiLocation"
            ],
            "value": "Tuple:U64sp_weights:weight_v2:WeightU32",
            "keys_id": 629,
            "value_id": 630
          }
        },
        "fallback": "0x00",
        "docs": [
          " The target locations that are subscribed to our version changes, as well as the most recent",
          " of our versions we informed them of."
        ]
      },
      {
        "name": "VersionDiscoveryQueue",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:staging_xcm:VersionedMultiLocationU32>",
          "PlainTypeValue": 631
        },
        "fallback": "0x00",
        "docs": [
          " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
          " the `u32` counter is the number of times that a send to the destination has been attempted,",
          " which is used as a prioritization."
        ]
      },
      {
        "name": "CurrentMigration",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_xcm:pallet:VersionMigrationStage",
          "PlainTypeValue": 634
        },
        "fallback": "0x00",
        "docs": [
          " The current migration's stage, if any."
        ]
      },
      {
        "name": "RemoteLockedFungibles",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId",
              "staging_xcm:VersionedAssetId"
            ],
            "value": "pallet_xcm:pallet:RemoteLockedFungibleRecord",
            "keys_id": 636,
            "value_id": 638
          }
        },
        "fallback": "0x00",
        "docs": [
          " Fungible assets which we know are locked on a remote chain."
        ]
      },
      {
        "name": "LockedFungibles",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<Tuple:U128staging_xcm:VersionedMultiLocation>",
            "keys_id": 0,
            "value_id": 642
          }
        },
        "fallback": "0x00",
        "docs": [
          " Fungible assets which we know are locked on this chain."
        ]
      },
      {
        "name": "XcmExecutionSuspended",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 48
        },
        "fallback": "0x00",
        "docs": [
          " Global suspension state of the XCM executor."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "6b00",
        "name": "send",
        "docs": [
          "See [`Pallet::send`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "message",
            "type": "staging_xcm:VersionedXcm@377",
            "type_name": "Box<VersionedXcm<()>>"
          }
        ]
      },
      {
        "lookup": "6b01",
        "name": "teleport_assets",
        "docs": [
          "See [`Pallet::teleport_assets`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "beneficiary",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "assets",
            "type": "staging_xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "6b02",
        "name": "reserve_transfer_assets",
        "docs": [
          "See [`Pallet::reserve_transfer_assets`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "beneficiary",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "assets",
            "type": "staging_xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "6b03",
        "name": "execute",
        "docs": [
          "See [`Pallet::execute`]."
        ],
        "args": [
          {
            "name": "message",
            "type": "staging_xcm:VersionedXcm@389",
            "type_name": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>"
          },
          {
            "name": "max_weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "6b04",
        "name": "force_xcm_version",
        "docs": [
          "See [`Pallet::force_xcm_version`]."
        ],
        "args": [
          {
            "name": "location",
            "type": "staging_xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<MultiLocation>"
          },
          {
            "name": "version",
            "type": "U32",
            "type_name": "XcmVersion"
          }
        ]
      },
      {
        "lookup": "6b05",
        "name": "force_default_xcm_version",
        "docs": [
          "See [`Pallet::force_default_xcm_version`]."
        ],
        "args": [
          {
            "name": "maybe_xcm_version",
            "type": "option<U32>",
            "type_name": "Option<XcmVersion>"
          }
        ]
      },
      {
        "lookup": "6b06",
        "name": "force_subscribe_version_notify",
        "docs": [
          "See [`Pallet::force_subscribe_version_notify`]."
        ],
        "args": [
          {
            "name": "location",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          }
        ]
      },
      {
        "lookup": "6b07",
        "name": "force_unsubscribe_version_notify",
        "docs": [
          "See [`Pallet::force_unsubscribe_version_notify`]."
        ],
        "args": [
          {
            "name": "location",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          }
        ]
      },
      {
        "lookup": "6b08",
        "name": "limited_reserve_transfer_assets",
        "docs": [
          "See [`Pallet::limited_reserve_transfer_assets`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "beneficiary",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "assets",
            "type": "staging_xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "weight_limit",
            "type": "staging_xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "6b09",
        "name": "limited_teleport_assets",
        "docs": [
          "See [`Pallet::limited_teleport_assets`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "beneficiary",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "assets",
            "type": "staging_xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "weight_limit",
            "type": "staging_xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "6b0a",
        "name": "force_suspension",
        "docs": [
          "See [`Pallet::force_suspension`]."
        ],
        "args": [
          {
            "name": "suspended",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 376
    },
    "events": [
      {
        "lookup": "6b00",
        "name": "Attempted",
        "docs": [
          "Execution of an XCM message was attempted."
        ],
        "args": [
          "staging_xcm:v3:traits:Outcome"
        ],
        "args_name": [
          "outcome"
        ],
        "args_type_name": [
          "xcm::latest::Outcome"
        ]
      },
      {
        "lookup": "6b01",
        "name": "Sent",
        "docs": [
          "A XCM message was sent."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "staging_xcm:v3:multilocation:MultiLocation",
          "Vec<staging_xcm:v3:Instruction@155>",
          "[U8; 32]"
        ],
        "args_name": [
          "origin",
          "destination",
          "message",
          "message_id"
        ],
        "args_type_name": [
          "MultiLocation",
          "MultiLocation",
          "Xcm<()>",
          "XcmHash"
        ]
      },
      {
        "lookup": "6b02",
        "name": "UnexpectedResponse",
        "docs": [
          "Query response received which does not match a registered query. This may be because a",
          "matching query was never registered, it may be because it is a duplicate response, or",
          "because the query timed out."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U64"
        ],
        "args_name": [
          "origin",
          "query_id"
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId"
        ]
      },
      {
        "lookup": "6b03",
        "name": "ResponseReady",
        "docs": [
          "Query response has been received and is ready for taking with `take_response`. There is",
          "no registered notification call."
        ],
        "args": [
          "U64",
          "staging_xcm:v3:Response"
        ],
        "args_name": [
          "query_id",
          "response"
        ],
        "args_type_name": [
          "QueryId",
          "Response"
        ]
      },
      {
        "lookup": "6b04",
        "name": "Notified",
        "docs": [
          "Query response has been received and query is removed. The registered notification has",
          "been dispatched and executed successfully."
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "query_id",
          "pallet_index",
          "call_index"
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "6b05",
        "name": "NotifyOverweight",
        "docs": [
          "Query response has been received and query is removed. The registered notification",
          "could not be dispatched because the dispatch weight is greater than the maximum weight",
          "originally budgeted by this runtime for the query result."
        ],
        "args": [
          "U64",
          "U8",
          "U8",
          "sp_weights:weight_v2:Weight",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "query_id",
          "pallet_index",
          "call_index",
          "actual_weight",
          "max_budgeted_weight"
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8",
          "Weight",
          "Weight"
        ]
      },
      {
        "lookup": "6b06",
        "name": "NotifyDispatchError",
        "docs": [
          "Query response has been received and query is removed. There was a general error with",
          "dispatching the notification call."
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "query_id",
          "pallet_index",
          "call_index"
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "6b07",
        "name": "NotifyDecodeFailed",
        "docs": [
          "Query response has been received and query is removed. The dispatch was unable to be",
          "decoded into a `Call`; this might be due to dispatch function having a signature which",
          "is not `(origin, QueryId, Response)`."
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "query_id",
          "pallet_index",
          "call_index"
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "6b08",
        "name": "InvalidResponder",
        "docs": [
          "Expected query response has been received but the origin location of the response does",
          "not match that expected. The query remains registered for a later, valid, response to",
          "be received and acted upon."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U64",
          "option<staging_xcm:v3:multilocation:MultiLocation>"
        ],
        "args_name": [
          "origin",
          "query_id",
          "expected_location"
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId",
          "Option<MultiLocation>"
        ]
      },
      {
        "lookup": "6b09",
        "name": "InvalidResponderVersion",
        "docs": [
          "Expected query response has been received but the expected origin location placed in",
          "storage by this runtime previously cannot be decoded. The query remains registered.",
          "",
          "This is unexpected (since a location placed in storage in a previously executing",
          "runtime should be readable prior to query timeout) and dangerous since the possibly",
          "valid response will be dropped. Manual governance intervention is probably going to be",
          "needed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U64"
        ],
        "args_name": [
          "origin",
          "query_id"
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId"
        ]
      },
      {
        "lookup": "6b0a",
        "name": "ResponseTaken",
        "docs": [
          "Received query response has been read and removed."
        ],
        "args": [
          "U64"
        ],
        "args_name": [
          "query_id"
        ],
        "args_type_name": [
          "QueryId"
        ]
      },
      {
        "lookup": "6b0b",
        "name": "AssetsTrapped",
        "docs": [
          "Some assets have been placed in an asset trap."
        ],
        "args": [
          "H256",
          "staging_xcm:v3:multilocation:MultiLocation",
          "staging_xcm:VersionedMultiAssets"
        ],
        "args_name": [
          "hash",
          "origin",
          "assets"
        ],
        "args_type_name": [
          "H256",
          "MultiLocation",
          "VersionedMultiAssets"
        ]
      },
      {
        "lookup": "6b0c",
        "name": "VersionChangeNotified",
        "docs": [
          "An XCM version change notification message has been attempted to be sent.",
          "",
          "The cost of sending it (borne by the chain) is included."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U32",
          "Vec<staging_xcm:v3:multiasset:MultiAsset>",
          "[U8; 32]"
        ],
        "args_name": [
          "destination",
          "result",
          "cost",
          "message_id"
        ],
        "args_type_name": [
          "MultiLocation",
          "XcmVersion",
          "MultiAssets",
          "XcmHash"
        ]
      },
      {
        "lookup": "6b0d",
        "name": "SupportedVersionChanged",
        "docs": [
          "The supported version of a location has been changed. This might be through an",
          "automatic notification or a manual intervention."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U32"
        ],
        "args_name": [
          "location",
          "version"
        ],
        "args_type_name": [
          "MultiLocation",
          "XcmVersion"
        ]
      },
      {
        "lookup": "6b0e",
        "name": "NotifyTargetSendFail",
        "docs": [
          "A given location which had a version change subscription was dropped owing to an error",
          "sending the notification to it."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U64",
          "staging_xcm:v3:traits:Error"
        ],
        "args_name": [
          "location",
          "query_id",
          "error"
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId",
          "XcmError"
        ]
      },
      {
        "lookup": "6b0f",
        "name": "NotifyTargetMigrationFail",
        "docs": [
          "A given location which had a version change subscription was dropped owing to an error",
          "migrating the location to our new XCM format."
        ],
        "args": [
          "staging_xcm:VersionedMultiLocation",
          "U64"
        ],
        "args_name": [
          "location",
          "query_id"
        ],
        "args_type_name": [
          "VersionedMultiLocation",
          "QueryId"
        ]
      },
      {
        "lookup": "6b10",
        "name": "InvalidQuerierVersion",
        "docs": [
          "Expected query response has been received but the expected querier location placed in",
          "storage by this runtime previously cannot be decoded. The query remains registered.",
          "",
          "This is unexpected (since a location placed in storage in a previously executing",
          "runtime should be readable prior to query timeout) and dangerous since the possibly",
          "valid response will be dropped. Manual governance intervention is probably going to be",
          "needed."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U64"
        ],
        "args_name": [
          "origin",
          "query_id"
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId"
        ]
      },
      {
        "lookup": "6b11",
        "name": "InvalidQuerier",
        "docs": [
          "Expected query response has been received but the querier location of the response does",
          "not match the expected. The query remains registered for a later, valid, response to",
          "be received and acted upon."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "U64",
          "staging_xcm:v3:multilocation:MultiLocation",
          "option<staging_xcm:v3:multilocation:MultiLocation>"
        ],
        "args_name": [
          "origin",
          "query_id",
          "expected_querier",
          "maybe_actual_querier"
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId",
          "MultiLocation",
          "Option<MultiLocation>"
        ]
      },
      {
        "lookup": "6b12",
        "name": "VersionNotifyStarted",
        "docs": [
          "A remote has requested XCM version change notification from us and we have honored it.",
          "A version information message is sent to them and its cost is included."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "Vec<staging_xcm:v3:multiasset:MultiAsset>",
          "[U8; 32]"
        ],
        "args_name": [
          "destination",
          "cost",
          "message_id"
        ],
        "args_type_name": [
          "MultiLocation",
          "MultiAssets",
          "XcmHash"
        ]
      },
      {
        "lookup": "6b13",
        "name": "VersionNotifyRequested",
        "docs": [
          "We have requested that a remote chain send us XCM version change notifications."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "Vec<staging_xcm:v3:multiasset:MultiAsset>",
          "[U8; 32]"
        ],
        "args_name": [
          "destination",
          "cost",
          "message_id"
        ],
        "args_type_name": [
          "MultiLocation",
          "MultiAssets",
          "XcmHash"
        ]
      },
      {
        "lookup": "6b14",
        "name": "VersionNotifyUnrequested",
        "docs": [
          "We have requested that a remote chain stops sending us XCM version change",
          "notifications."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "Vec<staging_xcm:v3:multiasset:MultiAsset>",
          "[U8; 32]"
        ],
        "args_name": [
          "destination",
          "cost",
          "message_id"
        ],
        "args_type_name": [
          "MultiLocation",
          "MultiAssets",
          "XcmHash"
        ]
      },
      {
        "lookup": "6b15",
        "name": "FeesPaid",
        "docs": [
          "Fees were paid from a location for an operation (often for using `SendXcm`)."
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "Vec<staging_xcm:v3:multiasset:MultiAsset>"
        ],
        "args_name": [
          "paying",
          "fees"
        ],
        "args_type_name": [
          "MultiLocation",
          "MultiAssets"
        ]
      },
      {
        "lookup": "6b16",
        "name": "AssetsClaimed",
        "docs": [
          "Some assets have been claimed from an asset trap"
        ],
        "args": [
          "H256",
          "staging_xcm:v3:multilocation:MultiLocation",
          "staging_xcm:VersionedMultiAssets"
        ],
        "args_name": [
          "hash",
          "origin",
          "assets"
        ],
        "args_type_name": [
          "H256",
          "MultiLocation",
          "VersionedMultiAssets"
        ]
      }
    ],
    "events_value": {
      "type": 150
    },
    "errors": [
      {
        "name": "Unreachable",
        "doc": [
          "The desired destination was unreachable, generally because there is a no way of routing",
          "to it."
        ]
      },
      {
        "name": "SendFailure",
        "doc": [
          "There was some other issue (i.e. not to do with routing) in sending the message.",
          "Perhaps a lack of space for buffering the message."
        ]
      },
      {
        "name": "Filtered",
        "doc": [
          "The message execution fails the filter."
        ]
      },
      {
        "name": "UnweighableMessage",
        "doc": [
          "The message's weight could not be determined."
        ]
      },
      {
        "name": "DestinationNotInvertible",
        "doc": [
          "The destination `MultiLocation` provided cannot be inverted."
        ]
      },
      {
        "name": "Empty",
        "doc": [
          "The assets to be sent are empty."
        ]
      },
      {
        "name": "CannotReanchor",
        "doc": [
          "Could not re-anchor the assets to declare the fees for the destination chain."
        ]
      },
      {
        "name": "TooManyAssets",
        "doc": [
          "Too many assets have been attempted for transfer."
        ]
      },
      {
        "name": "InvalidOrigin",
        "doc": [
          "Origin is invalid for sending."
        ]
      },
      {
        "name": "BadVersion",
        "doc": [
          "The version of the `Versioned` value used is not able to be interpreted."
        ]
      },
      {
        "name": "BadLocation",
        "doc": [
          "The given location could not be used (e.g. because it cannot be expressed in the",
          "desired version of XCM)."
        ]
      },
      {
        "name": "NoSubscription",
        "doc": [
          "The referenced subscription could not be found."
        ]
      },
      {
        "name": "AlreadySubscribed",
        "doc": [
          "The location is invalid since it already has a subscription from us."
        ]
      },
      {
        "name": "InvalidAsset",
        "doc": [
          "Invalid asset for the operation."
        ]
      },
      {
        "name": "LowBalance",
        "doc": [
          "The owner does not own (all) of the asset that they wish to do the operation on."
        ]
      },
      {
        "name": "TooManyLocks",
        "doc": [
          "The asset owner has too many locks on the asset."
        ]
      },
      {
        "name": "AccountNotSovereign",
        "doc": [
          "The given account is not an identifiable sovereign account for any location."
        ]
      },
      {
        "name": "FeesNotMet",
        "doc": [
          "The operation required fees to be paid which the initiator could not meet."
        ]
      },
      {
        "name": "LockNotFound",
        "doc": [
          "A remote lock with the corresponding data could not be found."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The unlock operation cannot succeed because there are still consumers of the lock."
        ]
      }
    ],
    "errors_value": {
      "type": 645
    },
    "index": 107
  },
  {
    "name": "CumulusXcm",
    "prefix": "",
    "storage": null,
    "calls_value": {
      "type": 397
    },
    "events": [
      {
        "lookup": "6d00",
        "name": "InvalidFormat",
        "docs": [
          "Downward message is invalid XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "[u8; 32]"
        ]
      },
      {
        "lookup": "6d01",
        "name": "UnsupportedVersion",
        "docs": [
          "Downward message is unsupported version of XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "[u8; 32]"
        ]
      },
      {
        "lookup": "6d02",
        "name": "ExecutedDownward",
        "docs": [
          "Downward message executed with the given outcome.",
          "\\[ id, outcome \\]"
        ],
        "args": [
          "[U8; 32]",
          "staging_xcm:v3:traits:Outcome"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "[u8; 32]",
          "Outcome"
        ]
      }
    ],
    "events_value": {
      "type": 195
    },
    "errors": null,
    "errors_value": {
      "type": 646
    },
    "index": 109
  },
  {
    "name": "XcmpQueue",
    "prefix": "XcmpQueue",
    "storage": [
      {
        "name": "InboundXcmpStatus",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<cumulus_pallet_xcmp_queue:InboundChannelDetails>",
          "PlainTypeValue": 647
        },
        "fallback": "0x00",
        "docs": [
          " Status of the inbound XCMP channels."
        ]
      },
      {
        "name": "InboundXcmpMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 653,
            "value_id": 13
          }
        },
        "fallback": "0x00",
        "docs": [
          " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
        ]
      },
      {
        "name": "OutboundXcmpStatus",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<cumulus_pallet_xcmp_queue:OutboundChannelDetails>",
          "PlainTypeValue": 654
        },
        "fallback": "0x00",
        "docs": [
          " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
          " and last outbound message. If the two indices are equal, then it indicates an empty",
          " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
          " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
          " case of the need to send a high-priority signal message this block.",
          " The bool is true if there is a signal message waiting to be sent."
        ]
      },
      {
        "name": "OutboundXcmpMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "U32",
              "U16"
            ],
            "value": "Vec<U8>",
            "keys_id": 657,
            "value_id": 13
          }
        },
        "fallback": "0x00",
        "docs": [
          " The messages outbound in a given XCMP channel."
        ]
      },
      {
        "name": "SignalMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 197,
            "value_id": 13
          }
        },
        "fallback": "0x00",
        "docs": [
          " Any signal messages waiting to be sent."
        ]
      },
      {
        "name": "QueueConfig",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_xcmp_queue:QueueConfigData",
          "PlainTypeValue": 658
        },
        "fallback": "0x020000000500000001000000821a06000008000700c817a80402000400",
        "docs": [
          " The configuration which controls the dynamics of the outbound queue."
        ]
      },
      {
        "name": "Overweight",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U64"
            ],
            "value": "Tuple:U32U32Vec<U8>",
            "keys_id": 11,
            "value_id": 659
          }
        },
        "fallback": "0x00",
        "docs": [
          " The messages that exceeded max individual message weight budget.",
          "",
          " These message stay in this storage map until they are manually dispatched via",
          " `service_overweight`."
        ]
      },
      {
        "name": "CounterForOverweight",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          "Counter for the related counted storage map"
        ]
      },
      {
        "name": "OverweightCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 11
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
          " available free overweight index."
        ]
      },
      {
        "name": "DeferredIndices",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<Tuple:U32U16>",
            "keys_id": 197,
            "value_id": 660
          }
        },
        "fallback": "0x00",
        "docs": [
          " Index of deferred message buckets to process."
        ]
      },
      {
        "name": "DeferredMessageBuckets",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "Tuple:U32U16"
            ],
            "value": "Vec<option<cumulus_pallet_xcmp_queue:DeferredMessage>>",
            "keys_id": 663,
            "value_id": 664
          }
        },
        "fallback": "0x00",
        "docs": [
          " Storage for deferred messages, indexed by para id, block and counter."
        ]
      },
      {
        "name": "QueueSuspended",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 48
        },
        "fallback": "0x00",
        "docs": [
          " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
        ]
      },
      {
        "name": "DeferredQueueSuspended",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 48
        },
        "fallback": "0x00",
        "docs": [
          " Whether or not the Deferred queue is suspended from executing XCMs or not."
        ]
      },
      {
        "name": "DeferAllBy",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Whether or not and if so by how much to defer all incoming XCMs."
        ]
      }
    ],
    "events": [
      {
        "lookup": "6f00",
        "name": "Success",
        "docs": [
          "Some XCM was executed ok."
        ],
        "args": [
          "[U8; 32]",
          "[U8; 32]",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "message_hash",
          "message_id",
          "weight"
        ],
        "args_type_name": [
          "XcmHash",
          "XcmHash",
          "Weight"
        ]
      },
      {
        "lookup": "6f01",
        "name": "Fail",
        "docs": [
          "Some XCM failed."
        ],
        "args": [
          "[U8; 32]",
          "[U8; 32]",
          "staging_xcm:v3:traits:Error",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "message_hash",
          "message_id",
          "error",
          "weight"
        ],
        "args_type_name": [
          "XcmHash",
          "XcmHash",
          "XcmError",
          "Weight"
        ]
      },
      {
        "lookup": "6f02",
        "name": "BadVersion",
        "docs": [
          "Bad XCM version used."
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "XcmHash"
        ]
      },
      {
        "lookup": "6f03",
        "name": "BadFormat",
        "docs": [
          "Bad XCM format used."
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "XcmHash"
        ]
      },
      {
        "lookup": "6f04",
        "name": "XcmpMessageSent",
        "docs": [
          "An HRMP message was sent to a sibling parachain."
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "XcmHash"
        ]
      },
      {
        "lookup": "6f05",
        "name": "OverweightEnqueued",
        "docs": [
          "An XCM exceeded the individual message weight budget."
        ],
        "args": [
          "U32",
          "U32",
          "U64",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "sender",
          "sent_at",
          "index",
          "required"
        ],
        "args_type_name": [
          "ParaId",
          "RelayBlockNumber",
          "OverweightIndex",
          "Weight"
        ]
      },
      {
        "lookup": "6f06",
        "name": "OverweightServiced",
        "docs": [
          "An XCM from the overweight queue was executed with the given actual weight used."
        ],
        "args": [
          "U64",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "index",
          "used"
        ],
        "args_type_name": [
          "OverweightIndex",
          "Weight"
        ]
      },
      {
        "lookup": "6f07",
        "name": "XcmDeferred",
        "docs": [
          "Some XCM was deferred for later execution"
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "Tuple:U32U16",
          "U32",
          "option<[U8; 32]>"
        ],
        "args_name": [
          "sender",
          "sent_at",
          "deferred_to",
          "index",
          "position",
          "message_hash"
        ],
        "args_type_name": [
          "ParaId",
          "RelayBlockNumber",
          "RelayBlockNumber",
          "DeferredIndex",
          "u32",
          "Option<XcmHash>"
        ]
      },
      {
        "lookup": "6f08",
        "name": "XcmDeferredQueueFull",
        "docs": [
          "The deferred queue is full with xcm messages"
        ],
        "args": [
          "U32",
          "U32",
          "option<[U8; 32]>"
        ],
        "args_name": [
          "sender",
          "sent_at",
          "message_hash"
        ],
        "args_type_name": [
          "ParaId",
          "RelayBlockNumber",
          "Option<XcmHash>"
        ]
      },
      {
        "lookup": "6f09",
        "name": "DeferredXcmDiscarded",
        "docs": [
          "The deferred message was successfully discarded."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "Tuple:U32U16",
          "U32",
          "option<[U8; 32]>"
        ],
        "args_name": [
          "sender",
          "sent_at",
          "deferred_to",
          "index",
          "position",
          "message_hash"
        ],
        "args_type_name": [
          "ParaId",
          "RelayBlockNumber",
          "RelayBlockNumber",
          "DeferredIndex",
          "u32",
          "Option<XcmHash>"
        ]
      },
      {
        "lookup": "6f0a",
        "name": "DeferredBucketDiscarded",
        "docs": [
          "The deferred bucket was discarded."
        ],
        "args": [
          "U32",
          "Tuple:U32U16"
        ],
        "args_name": [
          "sender",
          "index"
        ],
        "args_type_name": [
          "ParaId",
          "DeferredIndex"
        ]
      }
    ],
    "events_value": {
      "type": 196
    },
    "errors": [
      {
        "name": "FailedToSend",
        "doc": [
          "Failed to send XCM message."
        ]
      },
      {
        "name": "BadXcmOrigin",
        "doc": [
          "Bad XCM origin."
        ]
      },
      {
        "name": "BadXcm",
        "doc": [
          "Bad XCM data."
        ]
      },
      {
        "name": "BadOverweightIndex",
        "doc": [
          "Bad overweight index."
        ]
      },
      {
        "name": "WeightOverLimit",
        "doc": [
          "Provided weight is possibly not enough to execute the message."
        ]
      },
      {
        "name": "MessageNotFound",
        "doc": [
          "Indicated message is not present."
        ]
      }
    ],
    "errors_value": {
      "type": 668
    },
    "index": 111
  },
  {
    "name": "DmpQueue",
    "prefix": "DmpQueue",
    "storage": [
      {
        "name": "Configuration",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "sp_weights:weight_v2:Weight",
          "PlainTypeValue": 669
        },
        "fallback": "0x0700e40b540202000400",
        "docs": [
          " The configuration."
        ]
      },
      {
        "name": "PageIndex",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_dmp_queue:PageIndexData",
          "PlainTypeValue": 670
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The page index."
        ]
      },
      {
        "name": "Pages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<Tuple:U32Vec<U8>>",
            "keys_id": 4,
            "value_id": 671
          }
        },
        "fallback": "0x00",
        "docs": [
          " The queue pages."
        ]
      },
      {
        "name": "Overweight",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U64"
            ],
            "value": "Tuple:U32Vec<U8>",
            "keys_id": 11,
            "value_id": 672
          }
        },
        "fallback": "0x00",
        "docs": [
          " The overweight messages."
        ]
      },
      {
        "name": "CounterForOverweight",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          "Counter for the related counted storage map"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "7100",
        "name": "service_overweight",
        "docs": [
          "See [`Pallet::service_overweight`]."
        ],
        "args": [
          {
            "name": "index",
            "type": "U64",
            "type_name": "OverweightIndex"
          },
          {
            "name": "weight_limit",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 398
    },
    "events": [
      {
        "lookup": "7100",
        "name": "InvalidFormat",
        "docs": [
          "Downward message is invalid XCM."
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "XcmHash"
        ]
      },
      {
        "lookup": "7101",
        "name": "UnsupportedVersion",
        "docs": [
          "Downward message is unsupported version of XCM."
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "XcmHash"
        ]
      },
      {
        "lookup": "7102",
        "name": "ExecutedDownward",
        "docs": [
          "Downward message executed with the given outcome."
        ],
        "args": [
          "[U8; 32]",
          "[U8; 32]",
          "staging_xcm:v3:traits:Outcome"
        ],
        "args_name": [
          "message_hash",
          "message_id",
          "outcome"
        ],
        "args_type_name": [
          "XcmHash",
          "XcmHash",
          "Outcome"
        ]
      },
      {
        "lookup": "7103",
        "name": "WeightExhausted",
        "docs": [
          "The weight limit for handling downward messages was reached."
        ],
        "args": [
          "[U8; 32]",
          "[U8; 32]",
          "sp_weights:weight_v2:Weight",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "message_hash",
          "message_id",
          "remaining_weight",
          "required_weight"
        ],
        "args_type_name": [
          "XcmHash",
          "XcmHash",
          "Weight",
          "Weight"
        ]
      },
      {
        "lookup": "7104",
        "name": "OverweightEnqueued",
        "docs": [
          "Downward message is overweight and was placed in the overweight queue."
        ],
        "args": [
          "[U8; 32]",
          "[U8; 32]",
          "U64",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "message_hash",
          "message_id",
          "overweight_index",
          "required_weight"
        ],
        "args_type_name": [
          "XcmHash",
          "XcmHash",
          "OverweightIndex",
          "Weight"
        ]
      },
      {
        "lookup": "7105",
        "name": "OverweightServiced",
        "docs": [
          "Downward message from the overweight queue was executed."
        ],
        "args": [
          "U64",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "overweight_index",
          "weight_used"
        ],
        "args_type_name": [
          "OverweightIndex",
          "Weight"
        ]
      },
      {
        "lookup": "7106",
        "name": "MaxMessagesExhausted",
        "docs": [
          "The maximum number of downward messages was reached."
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "XcmHash"
        ]
      }
    ],
    "events_value": {
      "type": 199
    },
    "errors": [
      {
        "name": "Unknown",
        "doc": [
          "The message index given is unknown."
        ]
      },
      {
        "name": "OverLimit",
        "doc": [
          "The amount of weight given is possibly not enough for executing the message."
        ]
      }
    ],
    "errors_value": {
      "type": 673
    },
    "index": 113
  },
  {
    "name": "OrmlXcm",
    "prefix": "",
    "storage": null,
    "calls": [
      {
        "lookup": "8700",
        "name": "send_as_sovereign",
        "docs": [
          "See [`Pallet::send_as_sovereign`]."
        ],
        "args": [
          {
            "name": "dest",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "message",
            "type": "staging_xcm:VersionedXcm@377",
            "type_name": "Box<VersionedXcm<()>>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 399
    },
    "events": [
      {
        "lookup": "8700",
        "name": "Sent",
        "docs": [
          "XCM message sent. \\[to, message\\]"
        ],
        "args": [
          "staging_xcm:v3:multilocation:MultiLocation",
          "Vec<staging_xcm:v3:Instruction@155>"
        ],
        "args_name": [
          "to",
          "message"
        ],
        "args_type_name": [
          "MultiLocation",
          "Xcm<()>"
        ]
      }
    ],
    "events_value": {
      "type": 200
    },
    "errors": [
      {
        "name": "Unreachable",
        "doc": [
          "The message and destination combination was not recognized as being",
          "reachable."
        ]
      },
      {
        "name": "SendFailure",
        "doc": [
          "The message and destination was recognized as being reachable but",
          "the operation could not be completed."
        ]
      },
      {
        "name": "BadVersion",
        "doc": [
          "The version of the `Versioned` value used is not able to be",
          "interpreted."
        ]
      }
    ],
    "errors_value": {
      "type": 674
    },
    "index": 135
  },
  {
    "name": "XTokens",
    "prefix": "",
    "storage": null,
    "calls": [
      {
        "lookup": "8900",
        "name": "transfer",
        "docs": [
          "See [`Pallet::transfer`]."
        ],
        "args": [
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "dest",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "dest_weight_limit",
            "type": "staging_xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "8901",
        "name": "transfer_multiasset",
        "docs": [
          "See [`Pallet::transfer_multiasset`]."
        ],
        "args": [
          {
            "name": "asset",
            "type": "staging_xcm:VersionedMultiAsset",
            "type_name": "Box<VersionedMultiAsset>"
          },
          {
            "name": "dest",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "dest_weight_limit",
            "type": "staging_xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "8902",
        "name": "transfer_with_fee",
        "docs": [
          "See [`Pallet::transfer_with_fee`]."
        ],
        "args": [
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "fee",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "dest",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "dest_weight_limit",
            "type": "staging_xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "8903",
        "name": "transfer_multiasset_with_fee",
        "docs": [
          "See [`Pallet::transfer_multiasset_with_fee`]."
        ],
        "args": [
          {
            "name": "asset",
            "type": "staging_xcm:VersionedMultiAsset",
            "type_name": "Box<VersionedMultiAsset>"
          },
          {
            "name": "fee",
            "type": "staging_xcm:VersionedMultiAsset",
            "type_name": "Box<VersionedMultiAsset>"
          },
          {
            "name": "dest",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "dest_weight_limit",
            "type": "staging_xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "8904",
        "name": "transfer_multicurrencies",
        "docs": [
          "See [`Pallet::transfer_multicurrencies`]."
        ],
        "args": [
          {
            "name": "currencies",
            "type": "Vec<Tuple:U32U128>",
            "type_name": "Vec<(CurrencyId, Balance)>"
          },
          {
            "name": "fee_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "dest",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "dest_weight_limit",
            "type": "staging_xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "8905",
        "name": "transfer_multiassets",
        "docs": [
          "See [`Pallet::transfer_multiassets`]."
        ],
        "args": [
          {
            "name": "assets",
            "type": "staging_xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "dest",
            "type": "staging_xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "dest_weight_limit",
            "type": "staging_xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 400
    },
    "events": [
      {
        "lookup": "8900",
        "name": "TransferredMultiAssets",
        "docs": [
          "Transferred `MultiAsset` with fee."
        ],
        "args": [
          "AccountId",
          "Vec<staging_xcm:v3:multiasset:MultiAsset>",
          "staging_xcm:v3:multiasset:MultiAsset",
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "sender",
          "assets",
          "fee",
          "dest"
        ],
        "args_type_name": [
          "AccountId",
          "MultiAssets",
          "MultiAsset",
          "MultiLocation"
        ]
      }
    ],
    "events_value": {
      "type": 201
    },
    "constants": [
      {
        "name": "SelfLocation",
        "type": "staging_xcm:v3:multilocation:MultiLocation",
        "type_value": 69,
        "constants_value": "010100c91f",
        "docs": [
          " Self chain location."
        ]
      },
      {
        "name": "BaseXcmWeight",
        "type": "sp_weights:weight_v2:Weight",
        "type_value": 9,
        "constants_value": "0284d71700",
        "docs": [
          " Base XCM weight.",
          "",
          " The actually weight for an XCM message is `T::BaseXcmWeight +",
          " T::Weigher::weight(&msg)`."
        ]
      }
    ],
    "errors": [
      {
        "name": "AssetHasNoReserve",
        "doc": [
          "Asset has no reserve location."
        ]
      },
      {
        "name": "NotCrossChainTransfer",
        "doc": [
          "Not cross-chain transfer."
        ]
      },
      {
        "name": "InvalidDest",
        "doc": [
          "Invalid transfer destination."
        ]
      },
      {
        "name": "NotCrossChainTransferableCurrency",
        "doc": [
          "Currency is not cross-chain transferable."
        ]
      },
      {
        "name": "UnweighableMessage",
        "doc": [
          "The message's weight could not be determined."
        ]
      },
      {
        "name": "XcmExecutionFailed",
        "doc": [
          "XCM execution failed."
        ]
      },
      {
        "name": "CannotReanchor",
        "doc": [
          "Could not re-anchor the assets to declare the fees for the",
          "destination chain."
        ]
      },
      {
        "name": "InvalidAncestry",
        "doc": [
          "Could not get ancestry of asset reserve location."
        ]
      },
      {
        "name": "InvalidAsset",
        "doc": [
          "The MultiAsset is invalid."
        ]
      },
      {
        "name": "DestinationNotInvertible",
        "doc": [
          "The destination `MultiLocation` provided cannot be inverted."
        ]
      },
      {
        "name": "BadVersion",
        "doc": [
          "The version of the `Versioned` value used is not able to be",
          "interpreted."
        ]
      },
      {
        "name": "DistinctReserveForAssetAndFee",
        "doc": [
          "We tried sending distinct asset and fee but they have different",
          "reserve chains."
        ]
      },
      {
        "name": "ZeroFee",
        "doc": [
          "The fee is zero."
        ]
      },
      {
        "name": "ZeroAmount",
        "doc": [
          "The transfering asset amount is zero."
        ]
      },
      {
        "name": "TooManyAssetsBeingSent",
        "doc": [
          "The number of assets to be sent is over the maximum."
        ]
      },
      {
        "name": "AssetIndexNonExistent",
        "doc": [
          "The specified index does not exist in a MultiAssets struct."
        ]
      },
      {
        "name": "FeeNotEnough",
        "doc": [
          "Fee is not enough."
        ]
      },
      {
        "name": "NotSupportedMultiLocation",
        "doc": [
          "Not supported MultiLocation"
        ]
      },
      {
        "name": "MinXcmFeeNotDefined",
        "doc": [
          "MinXcmFee not registered for certain reserve location"
        ]
      }
    ],
    "errors_value": {
      "type": 675
    },
    "index": 137
  },
  {
    "name": "UnknownTokens",
    "prefix": "UnknownTokens",
    "storage": [
      {
        "name": "ConcreteFungibleBalances",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "staging_xcm:v3:multilocation:MultiLocation",
              "staging_xcm:v3:multilocation:MultiLocation"
            ],
            "value": "U128",
            "keys_id": 676,
            "value_id": 6
          }
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Concrete fungible balances under a given location and a concrete",
          " fungible id.",
          "",
          " double_map: who, asset_id => u128"
        ]
      },
      {
        "name": "AbstractFungibleBalances",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "staging_xcm:v3:multilocation:MultiLocation",
              "Vec<U8>"
            ],
            "value": "U128",
            "keys_id": 677,
            "value_id": 6
          }
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Abstract fungible balances under a given location and a abstract",
          " fungible id.",
          "",
          " double_map: who, asset_id => u128"
        ]
      }
    ],
    "events": [
      {
        "lookup": "8b00",
        "name": "Deposited",
        "docs": [
          "Deposit success."
        ],
        "args": [
          "staging_xcm:v3:multiasset:MultiAsset",
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset",
          "who"
        ],
        "args_type_name": [
          "MultiAsset",
          "MultiLocation"
        ]
      },
      {
        "lookup": "8b01",
        "name": "Withdrawn",
        "docs": [
          "Withdraw success."
        ],
        "args": [
          "staging_xcm:v3:multiasset:MultiAsset",
          "staging_xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset",
          "who"
        ],
        "args_type_name": [
          "MultiAsset",
          "MultiLocation"
        ]
      }
    ],
    "events_value": {
      "type": 202
    },
    "errors": [
      {
        "name": "BalanceTooLow",
        "doc": [
          "The balance is too low."
        ]
      },
      {
        "name": "BalanceOverflow",
        "doc": [
          "The operation will cause balance to overflow."
        ]
      },
      {
        "name": "UnhandledAsset",
        "doc": [
          "Unhandled asset."
        ]
      }
    ],
    "errors_value": {
      "type": 678
    },
    "index": 139
  },
  {
    "name": "Authorship",
    "prefix": "Authorship",
    "storage": [
      {
        "name": "Author",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "AccountId",
          "PlainTypeValue": 0
        },
        "fallback": "0x00",
        "docs": [
          " Author of current block."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 161
  },
  {
    "name": "CollatorSelection",
    "prefix": "CollatorSelection",
    "storage": [
      {
        "name": "Invulnerables",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 491
        },
        "fallback": "0x00",
        "docs": [
          " The invulnerable, permissioned collators. This list must be sorted."
        ]
      },
      {
        "name": "Candidates",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<pallet_collator_selection:pallet:CandidateInfo>",
          "PlainTypeValue": 679
        },
        "fallback": "0x00",
        "docs": [
          " The (community, limited) collation candidates. `Candidates` and `Invulnerables` should be",
          " mutually exclusive."
        ]
      },
      {
        "name": "LastAuthoredBlock",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U32",
            "keys_id": 0,
            "value_id": 4
          }
        },
        "fallback": "0x00000000",
        "docs": [
          " Last block authored by collator."
        ]
      },
      {
        "name": "DesiredCandidates",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Desired number of candidates.",
          "",
          " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
        ]
      },
      {
        "name": "CandidacyBond",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Fixed amount to deposit to become a collator.",
          "",
          " When a collator calls `leave_intent` they immediately receive the deposit back."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "a300",
        "name": "set_invulnerables",
        "docs": [
          "See [`Pallet::set_invulnerables`]."
        ],
        "args": [
          {
            "name": "new",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          }
        ]
      },
      {
        "lookup": "a301",
        "name": "set_desired_candidates",
        "docs": [
          "See [`Pallet::set_desired_candidates`]."
        ],
        "args": [
          {
            "name": "max",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "a302",
        "name": "set_candidacy_bond",
        "docs": [
          "See [`Pallet::set_candidacy_bond`]."
        ],
        "args": [
          {
            "name": "bond",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "a303",
        "name": "register_as_candidate",
        "docs": [
          "See [`Pallet::register_as_candidate`]."
        ],
        "args": null
      },
      {
        "lookup": "a304",
        "name": "leave_intent",
        "docs": [
          "See [`Pallet::leave_intent`]."
        ],
        "args": null
      },
      {
        "lookup": "a305",
        "name": "add_invulnerable",
        "docs": [
          "See [`Pallet::add_invulnerable`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "a306",
        "name": "remove_invulnerable",
        "docs": [
          "See [`Pallet::remove_invulnerable`]."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 403
    },
    "events": [
      {
        "lookup": "a300",
        "name": "NewInvulnerables",
        "docs": [
          "New Invulnerables were set."
        ],
        "args": [
          "Vec<AccountId>"
        ],
        "args_name": [
          "invulnerables"
        ],
        "args_type_name": [
          "Vec<AccountId>"
        ]
      },
      {
        "lookup": "a301",
        "name": "InvulnerableAdded",
        "docs": [
          "A new Invulnerable was added."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account_id"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "a302",
        "name": "InvulnerableRemoved",
        "docs": [
          "An Invulnerable was removed."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account_id"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "a303",
        "name": "NewDesiredCandidates",
        "docs": [
          "The number of desired candidates was set."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "desired_candidates"
        ],
        "args_type_name": [
          "u32"
        ]
      },
      {
        "lookup": "a304",
        "name": "NewCandidacyBond",
        "docs": [
          "The candidacy bond was set."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "bond_amount"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      },
      {
        "lookup": "a305",
        "name": "CandidateAdded",
        "docs": [
          "A new candidate joined."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account_id",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "a306",
        "name": "CandidateRemoved",
        "docs": [
          "A candidate was removed."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account_id"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "a307",
        "name": "InvalidInvulnerableSkipped",
        "docs": [
          "An account was unable to be added to the Invulnerables because they did not have keys",
          "registered. Other Invulnerables may have been set."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account_id"
        ],
        "args_type_name": [
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 203
    },
    "errors": [
      {
        "name": "TooManyCandidates",
        "doc": [
          "The pallet has too many candidates."
        ]
      },
      {
        "name": "TooFewEligibleCollators",
        "doc": [
          "Leaving would result in too few candidates."
        ]
      },
      {
        "name": "AlreadyCandidate",
        "doc": [
          "Account is already a candidate."
        ]
      },
      {
        "name": "NotCandidate",
        "doc": [
          "Account is not a candidate."
        ]
      },
      {
        "name": "TooManyInvulnerables",
        "doc": [
          "There are too many Invulnerables."
        ]
      },
      {
        "name": "AlreadyInvulnerable",
        "doc": [
          "Account is already an Invulnerable."
        ]
      },
      {
        "name": "NotInvulnerable",
        "doc": [
          "Account is not an Invulnerable."
        ]
      },
      {
        "name": "NoAssociatedValidatorId",
        "doc": [
          "Account has no associated validator ID."
        ]
      },
      {
        "name": "ValidatorNotRegistered",
        "doc": [
          "Validator ID is not yet registered."
        ]
      }
    ],
    "errors_value": {
      "type": 682
    },
    "index": 163
  },
  {
    "name": "Session",
    "prefix": "Session",
    "storage": [
      {
        "name": "Validators",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 204
        },
        "fallback": "0x00",
        "docs": [
          " The current set of validators."
        ]
      },
      {
        "name": "CurrentIndex",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Current index of the session."
        ]
      },
      {
        "name": "QueuedChanged",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 48
        },
        "fallback": "0x00",
        "docs": [
          " True if the underlying economic identities or weighting behind the validators",
          " has changed in the queued validator set."
        ]
      },
      {
        "name": "QueuedKeys",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:AccountId[U8; 32]>",
          "PlainTypeValue": 683
        },
        "fallback": "0x00",
        "docs": [
          " The queued keys for the next session. When the next session begins, these keys",
          " will be used to determine the validator's session keys."
        ]
      },
      {
        "name": "DisabledValidators",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U32>",
          "PlainTypeValue": 98
        },
        "fallback": "0x00",
        "docs": [
          " Indices of disabled validators.",
          "",
          " The vec is always kept sorted so that we can find whether a given validator is",
          " disabled using binary search. It gets cleared when `on_session_ending` returns",
          " a new set of identities."
        ]
      },
      {
        "name": "NextKeys",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "[U8; 32]",
            "keys_id": 0,
            "value_id": 405
          }
        },
        "fallback": "0x00",
        "docs": [
          " The next session keys for a validator."
        ]
      },
      {
        "name": "KeyOwner",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "Tuple:[U8; 4]Vec<U8>"
            ],
            "value": "AccountId",
            "keys_id": 685,
            "value_id": 0
          }
        },
        "fallback": "0x00",
        "docs": [
          " The owner of a key. The key is the `KeyTypeId` + the encoded key."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "a500",
        "name": "set_keys",
        "docs": [
          "See [`Pallet::set_keys`]."
        ],
        "args": [
          {
            "name": "keys",
            "type": "[U8; 32]",
            "type_name": "Keys"
          },
          {
            "name": "proof",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "a501",
        "name": "purge_keys",
        "docs": [
          "See [`Pallet::purge_keys`]."
        ],
        "args": null
      }
    ],
    "calls_value": {
      "type": 404
    },
    "events": [
      {
        "lookup": "a500",
        "name": "NewSession",
        "docs": [
          "New session has happened. Note that the argument is the session index, not the",
          "block number as the type might suggest."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "session_index"
        ],
        "args_type_name": [
          "SessionIndex"
        ]
      }
    ],
    "events_value": {
      "type": 205
    },
    "errors": [
      {
        "name": "InvalidProof",
        "doc": [
          "Invalid ownership proof."
        ]
      },
      {
        "name": "NoAssociatedValidatorId",
        "doc": [
          "No associated validator ID for account."
        ]
      },
      {
        "name": "DuplicatedKey",
        "doc": [
          "Registered duplicate key."
        ]
      },
      {
        "name": "NoKeys",
        "doc": [
          "No keys are associated with this account."
        ]
      },
      {
        "name": "NoAccount",
        "doc": [
          "Key setting account is not live, so it's impossible to associate keys."
        ]
      }
    ],
    "errors_value": {
      "type": 687
    },
    "index": 165
  },
  {
    "name": "Aura",
    "prefix": "Aura",
    "storage": [
      {
        "name": "Authorities",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<[U8; 32]>",
          "PlainTypeValue": 688
        },
        "fallback": "0x00",
        "docs": [
          " The current authority set."
        ]
      },
      {
        "name": "CurrentSlot",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 690
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The current slot of this block.",
          "",
          " This will be set in `on_initialize`."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 167
  },
  {
    "name": "AuraExt",
    "prefix": "AuraExt",
    "storage": [
      {
        "name": "Authorities",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<[U8; 32]>",
          "PlainTypeValue": 688
        },
        "fallback": "0x00",
        "docs": [
          " Serves as cache for the authorities.",
          "",
          " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
          " but we require the old authorities to verify the seal when validating a PoV. This will",
          " always be updated to the latest AuRa authorities in `on_finalize`."
        ]
      },
      {
        "name": "SlotInfo",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Tuple:U64U32",
          "PlainTypeValue": 691
        },
        "fallback": "0x00",
        "docs": [
          " Current slot paired with a number of authored blocks.",
          "",
          " Updated on each block initialization."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 169
  },
  {
    "name": "RelayChainInfo",
    "prefix": "",
    "storage": null,
    "calls_value": {
      "type": 408
    },
    "events": [
      {
        "lookup": "c900",
        "name": "CurrentBlockNumbers",
        "docs": [
          "Current block numbers",
          "[ Parachain block number, Relaychain Block number ]"
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "parachain_block_number",
          "relaychain_block_number"
        ],
        "args_type_name": [
          "BlockNumberFor",
          "BlockNumberFor"
        ]
      }
    ],
    "events_value": {
      "type": 206
    },
    "errors": null,
    "errors_value": {
      "type": 692
    },
    "index": 201
  },
  {
    "name": "EmaOracle",
    "prefix": "EmaOracle",
    "storage": [
      {
        "name": "Accumulator",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:Tuple:[U8; 8]Tuple:U32U32pallet_ema_oracle:types:OracleEntry>",
          "PlainTypeValue": 693
        },
        "fallback": "0x00",
        "docs": [
          " Accumulator for oracle data in current block that will be recorded at the end of the block."
        ]
      },
      {
        "name": "Oracles",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Twox64Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "[U8; 8]",
              "Tuple:U32U32",
              "hydradx_traits:oracle:OraclePeriod"
            ],
            "value": "Tuple:pallet_ema_oracle:types:OracleEntryU32",
            "keys_id": 702,
            "value_id": 703
          }
        },
        "fallback": "0x00",
        "docs": [
          " Oracle storage keyed by data source, involved asset ids and the period length of the oracle.",
          "",
          " Stores the data entry as well as the block number when the oracle was first initialized."
        ]
      },
      {
        "name": "WhitelistedAssets",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:[U8; 8]Tuple:U32U32>",
          "PlainTypeValue": 704
        },
        "fallback": "0x00",
        "docs": [
          " Assets that are whitelisted and tracked by the pallet."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "ca00",
        "name": "add_oracle",
        "docs": [
          "See [`Pallet::add_oracle`]."
        ],
        "args": [
          {
            "name": "source",
            "type": "[U8; 8]",
            "type_name": "Source"
          },
          {
            "name": "assets",
            "type": "Tuple:U32U32",
            "type_name": "(AssetId, AssetId)"
          }
        ]
      },
      {
        "lookup": "ca01",
        "name": "remove_oracle",
        "docs": [
          "See [`Pallet::remove_oracle`]."
        ],
        "args": [
          {
            "name": "source",
            "type": "[U8; 8]",
            "type_name": "Source"
          },
          {
            "name": "assets",
            "type": "Tuple:U32U32",
            "type_name": "(AssetId, AssetId)"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 409
    },
    "events": [
      {
        "lookup": "ca00",
        "name": "AddedToWhitelist",
        "docs": [
          "Oracle was added to the whitelist."
        ],
        "args": [
          "[U8; 8]",
          "Tuple:U32U32"
        ],
        "args_name": [
          "source",
          "assets"
        ],
        "args_type_name": [
          "Source",
          "(AssetId, AssetId)"
        ]
      },
      {
        "lookup": "ca01",
        "name": "RemovedFromWhitelist",
        "docs": [
          "Oracle was removed from the whitelist."
        ],
        "args": [
          "[U8; 8]",
          "Tuple:U32U32"
        ],
        "args_name": [
          "source",
          "assets"
        ],
        "args_type_name": [
          "Source",
          "(AssetId, AssetId)"
        ]
      }
    ],
    "events_value": {
      "type": 207
    },
    "constants": [
      {
        "name": "MaxUniqueEntries",
        "type": "U32",
        "type_value": 4,
        "constants_value": "28000000",
        "docs": [
          " Maximum number of unique oracle entries expected in one block."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooManyUniqueEntries",
        "doc": null
      },
      {
        "name": "OnTradeValueZero",
        "doc": null
      },
      {
        "name": "OracleNotFound",
        "doc": null
      }
    ],
    "errors_value": {
      "type": 707
    },
    "index": 202
  },
  {
    "name": "MultiTransactionPayment",
    "prefix": "MultiTransactionPayment",
    "storage": [
      {
        "name": "AccountCurrencyMap",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U32",
            "keys_id": 0,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Account currency map"
        ]
      },
      {
        "name": "AcceptedCurrencies",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U128",
            "keys_id": 4,
            "value_id": 83
          }
        },
        "fallback": "0x00",
        "docs": [
          " Curated list of currencies which fees can be paid mapped to corresponding fallback price"
        ]
      },
      {
        "name": "AcceptedCurrencyPrice",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U128",
            "keys_id": 4,
            "value_id": 83
          }
        },
        "fallback": "0x00",
        "docs": [
          " Asset prices from the spot price provider or the fallback price if the price is not available. Updated at the beginning of every block."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "cb00",
        "name": "set_currency",
        "docs": [
          "See [`Pallet::set_currency`]."
        ],
        "args": [
          {
            "name": "currency",
            "type": "U32",
            "type_name": "AssetIdOf"
          }
        ]
      },
      {
        "lookup": "cb01",
        "name": "add_currency",
        "docs": [
          "See [`Pallet::add_currency`]."
        ],
        "args": [
          {
            "name": "currency",
            "type": "U32",
            "type_name": "AssetIdOf"
          },
          {
            "name": "price",
            "type": "U128",
            "type_name": "Price"
          }
        ]
      },
      {
        "lookup": "cb02",
        "name": "remove_currency",
        "docs": [
          "See [`Pallet::remove_currency`]."
        ],
        "args": [
          {
            "name": "currency",
            "type": "U32",
            "type_name": "AssetIdOf"
          }
        ]
      },
      {
        "lookup": "cb03",
        "name": "reset_payment_currency",
        "docs": [
          "See [`Pallet::reset_payment_currency`]."
        ],
        "args": [
          {
            "name": "account_id",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 410
    },
    "events": [
      {
        "lookup": "cb00",
        "name": "CurrencySet",
        "docs": [
          "CurrencySet",
          "[who, currency]"
        ],
        "args": [
          "AccountId",
          "U32"
        ],
        "args_name": [
          "account_id",
          "asset_id"
        ],
        "args_type_name": [
          "AccountId",
          "AssetIdOf"
        ]
      },
      {
        "lookup": "cb01",
        "name": "CurrencyAdded",
        "docs": [
          "New accepted currency added",
          "[currency]"
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetIdOf"
        ]
      },
      {
        "lookup": "cb02",
        "name": "CurrencyRemoved",
        "docs": [
          "Accepted currency removed",
          "[currency]"
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetIdOf"
        ]
      },
      {
        "lookup": "cb03",
        "name": "FeeWithdrawn",
        "docs": [
          "Transaction fee paid in non-native currency",
          "[Account, Currency, Native fee amount, Non-native fee amount, Destination account]"
        ],
        "args": [
          "AccountId",
          "U32",
          "U128",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "account_id",
          "asset_id",
          "native_fee_amount",
          "non_native_fee_amount",
          "destination_account_id"
        ],
        "args_type_name": [
          "AccountId",
          "AssetIdOf",
          "BalanceOf",
          "BalanceOf",
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 208
    },
    "constants": [
      {
        "name": "NativeAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset"
        ]
      },
      {
        "name": "EvmAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "14000000",
        "docs": [
          " EVM Asset"
        ]
      }
    ],
    "errors": [
      {
        "name": "UnsupportedCurrency",
        "doc": [
          "Selected currency is not supported."
        ]
      },
      {
        "name": "ZeroBalance",
        "doc": [
          "Account balance should be non-zero."
        ]
      },
      {
        "name": "AlreadyAccepted",
        "doc": [
          "Currency is already in the list of accepted currencies."
        ]
      },
      {
        "name": "CoreAssetNotAllowed",
        "doc": [
          "It is not allowed to add Core Asset as accepted currency. Core asset is accepted by design."
        ]
      },
      {
        "name": "ZeroPrice",
        "doc": [
          "Fallback price cannot be zero."
        ]
      },
      {
        "name": "FallbackPriceNotFound",
        "doc": [
          "Fallback price was not found."
        ]
      },
      {
        "name": "Overflow",
        "doc": [
          "Math overflow"
        ]
      },
      {
        "name": "EvmAccountNotAllowed",
        "doc": [
          "It is not allowed to change payment currency of an EVM account."
        ]
      }
    ],
    "errors_value": {
      "type": 708
    },
    "index": 203
  }
]