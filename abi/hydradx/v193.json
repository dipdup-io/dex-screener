[
  {
    "name": "System",
    "prefix": "System",
    "storage": [
      {
        "name": "Account",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "frame_system:AccountInfo",
            "keys_id": 0,
            "value_id": 3
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The full account information for a particular account ID."
        ]
      },
      {
        "name": "ExtrinsicCount",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Total extrinsics count for the current block."
        ]
      },
      {
        "name": "BlockWeight",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_support:dispatch:PerDispatchClass@7",
          "PlainTypeValue": 7
        },
        "fallback": "0x000000000000",
        "docs": [
          " The current weight for the block."
        ]
      },
      {
        "name": "AllExtrinsicsLen",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Total length (in bytes) for all extrinsics put together, for the current block."
        ]
      },
      {
        "name": "BlockHash",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "H256",
            "keys_id": 4,
            "value_id": 11
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Map of block numbers to block hashes."
        ]
      },
      {
        "name": "ExtrinsicData",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 4,
            "value_id": 12
          }
        },
        "fallback": "0x00",
        "docs": [
          " Extrinsics data for the current block (maps an extrinsic's index to its data)."
        ]
      },
      {
        "name": "Number",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The current block number being processed. Set by `execute_block`."
        ]
      },
      {
        "name": "ParentHash",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 11
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Hash of the previous block."
        ]
      },
      {
        "name": "Digest",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<sp_runtime:generic:digest:DigestItem>",
          "PlainTypeValue": 13
        },
        "fallback": "0x00",
        "docs": [
          " Digest of the current block, also part of the block header."
        ]
      },
      {
        "name": "Events",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<frame_system:EventRecord>",
          "PlainTypeValue": 17
        },
        "fallback": "0x00",
        "docs": [
          " Events deposited for the current block.",
          "",
          " NOTE: The item is unbound and should therefore never be read on chain.",
          " It could otherwise inflate the PoV size of a block.",
          "",
          " Events have a large in-memory size. Box the events to not go out-of-memory",
          " just in case someone still reads them from within the runtime."
        ]
      },
      {
        "name": "EventCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of events in the `Events<T>` list."
        ]
      },
      {
        "name": "EventTopics",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Vec<Tuple:U32U32>",
            "keys_id": 11,
            "value_id": 188
          }
        },
        "fallback": "0x00",
        "docs": [
          " Mapping between a topic (represented by T::Hash) and a vector of indexes",
          " of events in the `<Events<T>>` list.",
          "",
          " All topic vectors have deterministic storage locations depending on the topic. This",
          " allows light-clients to leverage the changes trie storage tracking mechanism and",
          " in case of changes fetch the list of events of interest.",
          "",
          " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
          " the `EventIndex` then in case if the topic has the same contents on the next block",
          " no notification will be triggered thus the event might be lost."
        ]
      },
      {
        "name": "LastRuntimeUpgrade",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:LastRuntimeUpgradeInfo",
          "PlainTypeValue": 189
        },
        "fallback": "0x00",
        "docs": [
          " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
        ]
      },
      {
        "name": "UpgradedToU32RefCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 46
        },
        "fallback": "0x00",
        "docs": [
          " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
        ]
      },
      {
        "name": "UpgradedToTripleRefCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 46
        },
        "fallback": "0x00",
        "docs": [
          " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
          " (default) if not."
        ]
      },
      {
        "name": "ExecutionPhase",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "frame_system:Phase",
          "PlainTypeValue": 187
        },
        "fallback": "0x00",
        "docs": [
          " The execution phase of the block."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0100",
        "name": "remark",
        "docs": [
          "Make some on-chain remark.",
          "",
          "# <weight>",
          "- `O(1)`",
          "# </weight>"
        ],
        "args": [
          {
            "name": "remark",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0101",
        "name": "set_heap_pages",
        "docs": [
          "Set the number of pages in the WebAssembly environment's heap."
        ],
        "args": [
          {
            "name": "pages",
            "type": "U64",
            "type_name": "u64"
          }
        ]
      },
      {
        "lookup": "0102",
        "name": "set_code",
        "docs": [
          "Set the new runtime code.",
          "",
          "# <weight>",
          "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
          "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
          "  expensive).",
          "- 1 storage write (codec `O(C)`).",
          "- 1 digest item.",
          "- 1 event.",
          "The weight of this function is dependent on the runtime, but generally this is very",
          "expensive. We will treat this as a full block.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0103",
        "name": "set_code_without_checks",
        "docs": [
          "Set the new runtime code without doing any checks of the given `code`.",
          "",
          "# <weight>",
          "- `O(C)` where `C` length of `code`",
          "- 1 storage write (codec `O(C)`).",
          "- 1 digest item.",
          "- 1 event.",
          "The weight of this function is dependent on the runtime. We will treat this as a full",
          "block. # </weight>"
        ],
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0104",
        "name": "set_storage",
        "docs": [
          "Set some items of storage."
        ],
        "args": [
          {
            "name": "items",
            "type": "Vec<Tuple:Vec<U8>Vec<U8>>",
            "type_name": "Vec<KeyValue>"
          }
        ]
      },
      {
        "lookup": "0105",
        "name": "kill_storage",
        "docs": [
          "Kill some items from storage."
        ],
        "args": [
          {
            "name": "keys",
            "type": "Vec<Vec<U8>>",
            "type_name": "Vec<Key>"
          }
        ]
      },
      {
        "lookup": "0106",
        "name": "kill_prefix",
        "docs": [
          "Kill all storage items with a key that starts with the given prefix.",
          "",
          "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
          "the prefix we are removing to accurately calculate the weight of this function."
        ],
        "args": [
          {
            "name": "prefix",
            "type": "Vec<U8>",
            "type_name": "Key"
          },
          {
            "name": "subkeys",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "0107",
        "name": "remark_with_event",
        "docs": [
          "Make some on-chain remark and emit event."
        ],
        "args": [
          {
            "name": "remark",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 190
    },
    "events": [
      {
        "lookup": "0100",
        "name": "ExtrinsicSuccess",
        "docs": [
          "An extrinsic completed successfully."
        ],
        "args": [
          "frame_support:dispatch:DispatchInfo"
        ],
        "args_name": [
          "dispatch_info"
        ],
        "args_type_name": [
          "DispatchInfo"
        ]
      },
      {
        "lookup": "0101",
        "name": "ExtrinsicFailed",
        "docs": [
          "An extrinsic failed."
        ],
        "args": [
          "sp_runtime:DispatchError",
          "frame_support:dispatch:DispatchInfo"
        ],
        "args_name": [
          "dispatch_error",
          "dispatch_info"
        ],
        "args_type_name": [
          "DispatchError",
          "DispatchInfo"
        ]
      },
      {
        "lookup": "0102",
        "name": "CodeUpdated",
        "docs": [
          "`:code` was updated."
        ],
        "args": null
      },
      {
        "lookup": "0103",
        "name": "NewAccount",
        "docs": [
          "A new account was created."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0104",
        "name": "KilledAccount",
        "docs": [
          "An account was reaped."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "0105",
        "name": "Remarked",
        "docs": [
          "On on-chain remark happened."
        ],
        "args": [
          "AccountId",
          "H256"
        ],
        "args_name": [
          "sender",
          "hash"
        ],
        "args_type_name": [
          "AccountId",
          "Hash"
        ]
      }
    ],
    "events_value": {
      "type": 20
    },
    "constants": [
      {
        "name": "BlockWeights",
        "type": "frame_system:limits:BlockWeights",
        "type_value": 194,
        "constants_value": "624fd75a00070088526a740200400102c0cd170001070099bb60540200e800010700e6bd4f570200f00001000002c0cd17000107003b507b710200380101070088526a7402004001010700a2941a1d0200500002c0cd1700000000",
        "docs": [
          " Block & extrinsics weights: base values and limits."
        ]
      },
      {
        "name": "BlockLength",
        "type": "frame_support:dispatch:PerDispatchClass@199",
        "type_value": 198,
        "constants_value": "00003c000000500000005000",
        "docs": [
          " The maximum length of a block (in bytes)."
        ]
      },
      {
        "name": "BlockHashCount",
        "type": "U32",
        "type_value": 4,
        "constants_value": "60090000",
        "docs": [
          " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
        ]
      },
      {
        "name": "DbWeight",
        "type": "sp_weights:RuntimeDbWeight",
        "type_value": 200,
        "constants_value": "40787d010000000000e1f50500000000",
        "docs": [
          " The weight of runtime database operations the runtime can invoke."
        ]
      },
      {
        "name": "Version",
        "type": "sp_version:RuntimeVersion",
        "type_value": 201,
        "constants_value": "1c687964726164781c6879647261647801000000c10000000000000030df6acb689907609b0400000037e397fc7c91f5e40100000040fe3ad401f8959a06000000d2bc9897eed08f1503000000f78b278be53f454c02000000ab3c0572291feb8b01000000dd718d5cc53262d401000000ea93e3f16f3d696202000000bc9d89904f5b923f0100000037c8bb1350a9a2a803000000582211f65bb14b8904000000e65b00e46cedd0aa020000000100000000",
        "docs": [
          " Get the chain's current version."
        ]
      },
      {
        "name": "SS58Prefix",
        "type": "U16",
        "type_value": 51,
        "constants_value": "3f00",
        "docs": [
          " The designated SS58 prefix of this chain.",
          "",
          " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
          " that the runtime should know about the prefix in order to make use of it as",
          " an identifier of the chain."
        ]
      }
    ],
    "errors": [
      {
        "name": "InvalidSpecName",
        "doc": [
          "The name of specification does not match between the current runtime",
          "and the new runtime."
        ]
      },
      {
        "name": "SpecVersionNeedsToIncrease",
        "doc": [
          "The specification version is not allowed to decrease between the current runtime",
          "and the new runtime."
        ]
      },
      {
        "name": "FailedToExtractRuntimeVersion",
        "doc": [
          "Failed to extract the runtime version from the new runtime.",
          "",
          "Either calling `Core_version` or decoding `RuntimeVersion` failed."
        ]
      },
      {
        "name": "NonDefaultComposite",
        "doc": [
          "Suicide called when the account has non-default composite data."
        ]
      },
      {
        "name": "NonZeroRefCount",
        "doc": [
          "There is a non-zero reference count preventing the account from being purged."
        ]
      },
      {
        "name": "CallFiltered",
        "doc": [
          "The origin filter prevent the call to be dispatched."
        ]
      }
    ],
    "errors_value": {
      "type": 205
    },
    "index": 1
  },
  {
    "name": "Timestamp",
    "prefix": "Timestamp",
    "storage": [
      {
        "name": "Now",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 10
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " Current time for the current block."
        ]
      },
      {
        "name": "DidUpdate",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 46
        },
        "fallback": "0x00",
        "docs": [
          " Did the timestamp get updated in this block?"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0300",
        "name": "set",
        "docs": [
          "Set the current time.",
          "",
          "This call should be invoked exactly once per block. It will panic at the finalization",
          "phase, if this call hasn't been invoked by that time.",
          "",
          "The timestamp should be greater than the previous one by the amount specified by",
          "`MinimumPeriod`.",
          "",
          "The dispatch origin for this call must be `Inherent`.",
          "",
          "# <weight>",
          "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
          "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
          "  `on_finalize`)",
          "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "now",
            "type": "compact<U64>",
            "type_name": "Moment"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 206
    },
    "constants": [
      {
        "name": "MinimumPeriod",
        "type": "U64",
        "type_value": 10,
        "constants_value": "7017000000000000",
        "docs": [
          " The minimum period between blocks. Beware that this is different to the *expected*",
          " period that the block production apparatus provides. Your chosen consensus system will",
          " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
          " double this period on default settings."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 3
  },
  {
    "name": "Balances",
    "prefix": "Balances",
    "storage": [
      {
        "name": "TotalIssuance",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The total units issued in the system."
        ]
      },
      {
        "name": "InactiveIssuance",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The total units of outstanding deactivated balance in the system."
        ]
      },
      {
        "name": "Account",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "pallet_balances:AccountData",
            "keys_id": 0,
            "value_id": 5
          }
        },
        "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The Balances pallet example of storing the balance of an account.",
          "",
          " # Example",
          "",
          " ```nocompile",
          "  impl pallet_balances::Config for Runtime {",
          "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
          "  }",
          " ```",
          "",
          " You can also store the balance of an account in the `System` pallet.",
          "",
          " # Example",
          "",
          " ```nocompile",
          "  impl pallet_balances::Config for Runtime {",
          "   type AccountStore = System",
          "  }",
          " ```",
          "",
          " But this comes with tradeoffs, storing account balances in the system pallet stores",
          " `frame_system` data alongside the account data contrary to storing account balances in the",
          " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
          " NOTE: This is only used in the case that this pallet is used to store balances."
        ]
      },
      {
        "name": "Locks",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:BalanceLock>",
            "keys_id": 0,
            "value_id": 207
          }
        },
        "fallback": "0x00",
        "docs": [
          " Any liquidity locks on some account balances.",
          " NOTE: Should only be accessed when setting, changing and freeing a lock."
        ]
      },
      {
        "name": "Reserves",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<pallet_balances:ReserveData>",
            "keys_id": 0,
            "value_id": 211
          }
        },
        "fallback": "0x00",
        "docs": [
          " Named reserves on some account balances."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0700",
        "name": "transfer",
        "docs": [
          "Transfer some liquid free balance to another account.",
          "",
          "`transfer` will set the `FreeBalance` of the sender and receiver.",
          "If the sender's account is below the existential deposit as a result",
          "of the transfer, the account will be reaped.",
          "",
          "The dispatch origin for this call must be `Signed` by the transactor.",
          "",
          "# <weight>",
          "- Dependent on arguments but not critical, given proper implementations for input config",
          "  types. See related functions below.",
          "- It contains a limited number of reads and writes internally and no complex",
          "  computation.",
          "",
          "Related functions:",
          "",
          "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
          "  - Transferring balances to accounts that did not exist before will cause",
          "    `T::OnNewAccount::on_new_account` to be called.",
          "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
          "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
          "    that the transfer will not kill the origin account.",
          "---------------------------------",
          "- Origin account is already in memory, so no DB operations for them.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0701",
        "name": "set_balance",
        "docs": [
          "Set the balances of a given account.",
          "",
          "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
          "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
          "If the new free or reserved balance is below the existential deposit,",
          "it will reset the account nonce (`frame_system::AccountNonce`).",
          "",
          "The dispatch origin for this call is `root`."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "new_free",
            "type": "compact<U128>",
            "type_name": "Balance"
          },
          {
            "name": "new_reserved",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0702",
        "name": "force_transfer",
        "docs": [
          "Exactly as `transfer`, except the origin must be root and the source account may be",
          "specified.",
          "# <weight>",
          "- Same as transfer, but additional read and write because the source account is not",
          "  assumed to be in the overlay.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "source",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0703",
        "name": "transfer_keep_alive",
        "docs": [
          "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
          "origin account.",
          "",
          "99% of the time you want [`transfer`] instead.",
          "",
          "[`transfer`]: struct.Pallet.html#method.transfer"
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "0704",
        "name": "transfer_all",
        "docs": [
          "Transfer the entire transferable balance from the caller account.",
          "",
          "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
          "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
          "transferred by this function. To ensure that this function results in a killed account,",
          "you might need to prepare the account by removing any reference counters, storage",
          "deposits, etc...",
          "",
          "The dispatch origin of this call must be Signed.",
          "",
          "- `dest`: The recipient of the transfer.",
          "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
          "  of the funds the account has, causing the sender account to be killed (false), or",
          "  transfer everything except at least the existential deposit, which will guarantee to",
          "  keep the sender account alive (true). # <weight>",
          "- O(1). Just like transfer, but reading the user's transferable balance first.",
          "  #</weight>"
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "keep_alive",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "0705",
        "name": "force_unreserve",
        "docs": [
          "Unreserve some balance from a user by force.",
          "",
          "Can only be called by ROOT."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 214
    },
    "events": [
      {
        "lookup": "0700",
        "name": "Endowed",
        "docs": [
          "An account was created with some free balance."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account",
          "free_balance"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0701",
        "name": "DustLost",
        "docs": [
          "An account was removed whose balance was non-zero but below ExistentialDeposit,",
          "resulting in an outright loss."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0702",
        "name": "Transfer",
        "docs": [
          "Transfer succeeded."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0703",
        "name": "BalanceSet",
        "docs": [
          "A balance was set by root."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "free",
          "reserved"
        ],
        "args_type_name": [
          "AccountId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "0704",
        "name": "Reserved",
        "docs": [
          "Some balance was reserved (moved from free to reserved)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0705",
        "name": "Unreserved",
        "docs": [
          "Some balance was unreserved (moved from reserved to free)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0706",
        "name": "ReserveRepatriated",
        "docs": [
          "Some balance was moved from the reserve of the first account to the second account.",
          "Final argument indicates the destination balance type."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128",
          "frame_support:traits:tokens:misc:BalanceStatus"
        ],
        "args_name": [
          "from",
          "to",
          "amount",
          "destination_status"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "Balance",
          "Status"
        ]
      },
      {
        "lookup": "0707",
        "name": "Deposit",
        "docs": [
          "Some amount was deposited (e.g. for transaction fees)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0708",
        "name": "Withdraw",
        "docs": [
          "Some amount was withdrawn from the account (e.g. for transaction fees)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "0709",
        "name": "Slashed",
        "docs": [
          "Some amount was removed from the account (e.g. for misbehavior)."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 29
    },
    "constants": [
      {
        "name": "ExistentialDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0010a5d4e80000000000000000000000",
        "docs": [
          " The minimum amount required to keep an account open."
        ]
      },
      {
        "name": "MaxLocks",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of locks that should exist on an account.",
          " Not strictly enforced, but used for weight estimation."
        ]
      },
      {
        "name": "MaxReserves",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of named reserves that can exist on an account."
        ]
      }
    ],
    "errors": [
      {
        "name": "VestingBalance",
        "doc": [
          "Vesting balance too high to send value"
        ]
      },
      {
        "name": "LiquidityRestrictions",
        "doc": [
          "Account liquidity restrictions prevent withdrawal"
        ]
      },
      {
        "name": "InsufficientBalance",
        "doc": [
          "Balance too low to send value."
        ]
      },
      {
        "name": "ExistentialDeposit",
        "doc": [
          "Value too low to create account due to existential deposit"
        ]
      },
      {
        "name": "KeepAlive",
        "doc": [
          "Transfer/payment would kill account"
        ]
      },
      {
        "name": "ExistingVestingSchedule",
        "doc": [
          "A vesting schedule already exists for this account"
        ]
      },
      {
        "name": "DeadAccount",
        "doc": [
          "Beneficiary account must pre-exist"
        ]
      },
      {
        "name": "TooManyReserves",
        "doc": [
          "Number of named reserves exceed MaxReserves"
        ]
      }
    ],
    "errors_value": {
      "type": 215
    },
    "index": 7
  },
  {
    "name": "TransactionPayment",
    "prefix": "TransactionPayment",
    "storage": [
      {
        "name": "NextFeeMultiplier",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 79
        },
        "fallback": "0x000064a7b3b6e00d0000000000000000",
        "docs": null
      },
      {
        "name": "StorageVersion",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_transaction_payment:Releases",
          "PlainTypeValue": 216
        },
        "fallback": "0x00",
        "docs": null
      }
    ],
    "events": [
      {
        "lookup": "0900",
        "name": "TransactionFeePaid",
        "docs": [
          "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
          "has been paid by `who`."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "actual_fee",
          "tip"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 31
    },
    "constants": [
      {
        "name": "OperationalFeeMultiplier",
        "type": "U8",
        "type_value": 2,
        "constants_value": "00",
        "docs": [
          " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
          " `priority`",
          "",
          " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
          " added to a tip component in regular `priority` calculations.",
          " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
          " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
          "",
          " ```rust,ignore",
          " // For `Normal`",
          " let priority = priority_calc(tip);",
          "",
          " // For `Operational`",
          " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
          " let priority = priority_calc(tip + virtual_tip);",
          " ```",
          "",
          " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
          " sent with the transaction. So, not only does the transaction get a priority bump based",
          " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
          " transactions."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 9
  },
  {
    "name": "Treasury",
    "prefix": "Treasury",
    "storage": [
      {
        "name": "ProposalCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Number of proposals that have been made."
        ]
      },
      {
        "name": "Proposals",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_treasury:Proposal",
            "keys_id": 4,
            "value_id": 217
          }
        },
        "fallback": "0x00",
        "docs": [
          " Proposals that have been made."
        ]
      },
      {
        "name": "Deactivated",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The amount which has been reported as inactive to Currency."
        ]
      },
      {
        "name": "Approvals",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U32>",
          "PlainTypeValue": 218
        },
        "fallback": "0x00",
        "docs": [
          " Proposal indices that have been approved but not yet awarded."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0b00",
        "name": "propose_spend",
        "docs": [
          "Put forward a suggestion for spending. A deposit proportional to the value",
          "is reserved and slashed if the proposal is rejected. It is returned once the",
          "proposal is awarded.",
          "",
          "# <weight>",
          "- Complexity: O(1)",
          "- DbReads: `ProposalCount`, `origin account`",
          "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
          "# </weight>"
        ],
        "args": [
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          },
          {
            "name": "beneficiary",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "0b01",
        "name": "reject_proposal",
        "docs": [
          "Reject a proposed spend. The original deposit will be slashed.",
          "",
          "May only be called from `T::RejectOrigin`.",
          "",
          "# <weight>",
          "- Complexity: O(1)",
          "- DbReads: `Proposals`, `rejected proposer account`",
          "- DbWrites: `Proposals`, `rejected proposer account`",
          "# </weight>"
        ],
        "args": [
          {
            "name": "proposal_id",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          }
        ]
      },
      {
        "lookup": "0b02",
        "name": "approve_proposal",
        "docs": [
          "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
          "and the original deposit will be returned.",
          "",
          "May only be called from `T::ApproveOrigin`.",
          "",
          "# <weight>",
          "- Complexity: O(1).",
          "- DbReads: `Proposals`, `Approvals`",
          "- DbWrite: `Approvals`",
          "# </weight>"
        ],
        "args": [
          {
            "name": "proposal_id",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          }
        ]
      },
      {
        "lookup": "0b03",
        "name": "spend",
        "docs": [
          "Propose and approve a spend of treasury funds.",
          "",
          "- `origin`: Must be `SpendOrigin` with the `Success` value being at least `amount`.",
          "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
          "- `beneficiary`: The destination account for the transfer.",
          "",
          "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
          "beneficiary."
        ],
        "args": [
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          },
          {
            "name": "beneficiary",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "0b04",
        "name": "remove_approval",
        "docs": [
          "Force a previously approved proposal to be removed from the approval queue.",
          "The original deposit will no longer be returned.",
          "",
          "May only be called from `T::RejectOrigin`.",
          "- `proposal_id`: The index of a proposal",
          "",
          "# <weight>",
          "- Complexity: O(A) where `A` is the number of approvals",
          "- Db reads and writes: `Approvals`",
          "# </weight>",
          "",
          "Errors:",
          "- `ProposalNotApproved`: The `proposal_id` supplied was not found in the approval queue,",
          "i.e., the proposal has not been approved. This could also mean the proposal does not",
          "exist altogether, thus there is no way it would have been approved in the first place."
        ],
        "args": [
          {
            "name": "proposal_id",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 219
    },
    "events": [
      {
        "lookup": "0b00",
        "name": "Proposed",
        "docs": [
          "New proposal."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "proposal_index"
        ],
        "args_type_name": [
          "ProposalIndex"
        ]
      },
      {
        "lookup": "0b01",
        "name": "Spending",
        "docs": [
          "We have ended a spend period and will now allocate funds."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "budget_remaining"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      },
      {
        "lookup": "0b02",
        "name": "Awarded",
        "docs": [
          "Some funds have been allocated."
        ],
        "args": [
          "U32",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "proposal_index",
          "award",
          "account"
        ],
        "args_type_name": [
          "ProposalIndex",
          "BalanceOf",
          "AccountId"
        ]
      },
      {
        "lookup": "0b03",
        "name": "Rejected",
        "docs": [
          "A proposal was rejected; funds were slashed."
        ],
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "proposal_index",
          "slashed"
        ],
        "args_type_name": [
          "ProposalIndex",
          "BalanceOf"
        ]
      },
      {
        "lookup": "0b04",
        "name": "Burnt",
        "docs": [
          "Some of our funds have been burnt."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "burnt_funds"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      },
      {
        "lookup": "0b05",
        "name": "Rollover",
        "docs": [
          "Spending has finished; this is the amount that rolls over until next spend."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "rollover_balance"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      },
      {
        "lookup": "0b06",
        "name": "Deposit",
        "docs": [
          "Some funds have been deposited."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "value"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      },
      {
        "lookup": "0b07",
        "name": "SpendApproved",
        "docs": [
          "A new spend proposal has been approved."
        ],
        "args": [
          "U32",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "proposal_index",
          "amount",
          "beneficiary"
        ],
        "args_type_name": [
          "ProposalIndex",
          "BalanceOf",
          "AccountId"
        ]
      },
      {
        "lookup": "0b08",
        "name": "UpdatedInactive",
        "docs": [
          "The inactive funds of the pallet have been updated."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "reactivated",
          "deactivated"
        ],
        "args_type_name": [
          "BalanceOf",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 32
    },
    "constants": [
      {
        "name": "ProposalBond",
        "type": "U32",
        "type_value": 81,
        "constants_value": "30750000",
        "docs": [
          " Fraction of a proposal's value that should be bonded in order to place the proposal.",
          " An accepted proposal gets these back. A rejected proposal does not."
        ]
      },
      {
        "name": "ProposalBondMinimum",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0000c16ff28623000000000000000000",
        "docs": [
          " Minimum amount of funds that should be placed in a deposit for making a proposal."
        ]
      },
      {
        "name": "ProposalBondMaximum",
        "type": "option<U128>",
        "type_value": 57,
        "constants_value": "010000c52ebca2b1000000000000000000",
        "docs": [
          " Maximum amount of funds that should be placed in a deposit for making a proposal."
        ]
      },
      {
        "name": "SpendPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "201c0000",
        "docs": [
          " Period between successive spends."
        ]
      },
      {
        "name": "Burn",
        "type": "U32",
        "type_value": 81,
        "constants_value": "00000000",
        "docs": [
          " Percentage of spare funds (if any) that are burnt per spend period."
        ]
      },
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 220,
        "constants_value": "70792f7472737279",
        "docs": [
          " The treasury's pallet id, used for deriving its sovereign account ID."
        ]
      },
      {
        "name": "MaxApprovals",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum number of approvals that can wait in the spending queue.",
          "",
          " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."
        ]
      }
    ],
    "errors": [
      {
        "name": "InsufficientProposersBalance",
        "doc": [
          "Proposer's balance is too low."
        ]
      },
      {
        "name": "InvalidIndex",
        "doc": [
          "No proposal or bounty at that index."
        ]
      },
      {
        "name": "TooManyApprovals",
        "doc": [
          "Too many approvals in the queue."
        ]
      },
      {
        "name": "InsufficientPermission",
        "doc": [
          "The spend origin is valid but the amount it is allowed to spend is lower than the",
          "amount to be spent."
        ]
      },
      {
        "name": "ProposalNotApproved",
        "doc": [
          "Proposal has not been approved."
        ]
      }
    ],
    "errors_value": {
      "type": 221
    },
    "index": 11
  },
  {
    "name": "Utility",
    "prefix": "",
    "storage": null,
    "calls": [
      {
        "lookup": "0d00",
        "name": "batch",
        "docs": [
          "Send a batch of dispatch calls.",
          "",
          "May be called from any origin except `None`.",
          "",
          "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
          "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
          "",
          "If origin is root then the calls are dispatched without checking origin filter. (This",
          "includes bypassing `frame_system::Config::BaseCallFilter`).",
          "",
          "# <weight>",
          "- Complexity: O(C) where C is the number of calls to be batched.",
          "# </weight>",
          "",
          "This will return `Ok` in all circumstances. To determine the success of the batch, an",
          "event is deposited. If a call failed and the batch was interrupted, then the",
          "`BatchInterrupted` event is deposited, along with the number of successful calls made",
          "and the error of the failed call. If all were successful, then the `BatchCompleted`",
          "event is deposited."
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<hydradx_runtime:RuntimeCall>",
            "type_name": "Vec<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0d01",
        "name": "as_derivative",
        "docs": [
          "Send a call through an indexed pseudonym of the sender.",
          "",
          "Filter from origin are passed along. The call will be dispatched with an origin which",
          "use the same filter as the origin of this call.",
          "",
          "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
          "because you expect `proxy` to have been used prior in the call stack and you do not want",
          "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
          "in the Multisig pallet instead.",
          "",
          "NOTE: Prior to version *12, this was called `as_limited_sub`.",
          "",
          "The dispatch origin for this call must be _Signed_."
        ],
        "args": [
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0d02",
        "name": "batch_all",
        "docs": [
          "Send a batch of dispatch calls and atomically execute them.",
          "The whole transaction will rollback and fail if any of the calls failed.",
          "",
          "May be called from any origin except `None`.",
          "",
          "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
          "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
          "",
          "If origin is root then the calls are dispatched without checking origin filter. (This",
          "includes bypassing `frame_system::Config::BaseCallFilter`).",
          "",
          "# <weight>",
          "- Complexity: O(C) where C is the number of calls to be batched.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<hydradx_runtime:RuntimeCall>",
            "type_name": "Vec<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0d03",
        "name": "dispatch_as",
        "docs": [
          "Dispatches a function call with a provided origin.",
          "",
          "The dispatch origin for this call must be _Root_.",
          "",
          "# <weight>",
          "- O(1).",
          "- Limited storage reads.",
          "- One DB write (event).",
          "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
          "# </weight>"
        ],
        "args": [
          {
            "name": "as_origin",
            "type": "hydradx_runtime:OriginCaller",
            "type_name": "Box<PalletsOrigin>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0d04",
        "name": "force_batch",
        "docs": [
          "Send a batch of dispatch calls.",
          "Unlike `batch`, it allows errors and won't interrupt.",
          "",
          "May be called from any origin except `None`.",
          "",
          "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
          "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
          "",
          "If origin is root then the calls are dispatch without checking origin filter. (This",
          "includes bypassing `frame_system::Config::BaseCallFilter`).",
          "",
          "# <weight>",
          "- Complexity: O(C) where C is the number of calls to be batched.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "calls",
            "type": "Vec<hydradx_runtime:RuntimeCall>",
            "type_name": "Vec<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0d05",
        "name": "with_weight",
        "docs": [
          "Dispatch a function call with a specified weight.",
          "",
          "This function does not check the weight of the call, and instead allows the",
          "Root origin to specify the weight of the call.",
          "",
          "The dispatch origin for this call must be _Root_."
        ],
        "args": [
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          },
          {
            "name": "weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 222
    },
    "events": [
      {
        "lookup": "0d00",
        "name": "BatchInterrupted",
        "docs": [
          "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
          "well as the error."
        ],
        "args": [
          "U32",
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "index",
          "error"
        ],
        "args_type_name": [
          "u32",
          "DispatchError"
        ]
      },
      {
        "lookup": "0d01",
        "name": "BatchCompleted",
        "docs": [
          "Batch of dispatches completed fully with no error."
        ],
        "args": null
      },
      {
        "lookup": "0d02",
        "name": "BatchCompletedWithErrors",
        "docs": [
          "Batch of dispatches completed but has errors."
        ],
        "args": null
      },
      {
        "lookup": "0d03",
        "name": "ItemCompleted",
        "docs": [
          "A single item within a Batch of dispatches has completed with no error."
        ],
        "args": null
      },
      {
        "lookup": "0d04",
        "name": "ItemFailed",
        "docs": [
          "A single item within a Batch of dispatches has completed with error."
        ],
        "args": [
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "error"
        ],
        "args_type_name": [
          "DispatchError"
        ]
      },
      {
        "lookup": "0d05",
        "name": "DispatchedAs",
        "docs": [
          "A call was dispatched."
        ],
        "args": [
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "result"
        ],
        "args_type_name": [
          "DispatchResult"
        ]
      }
    ],
    "events_value": {
      "type": 33
    },
    "constants": [
      {
        "name": "batched_calls_limit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "aa2a0000",
        "docs": [
          " The limit on the number of batched calls."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooManyCalls",
        "doc": [
          "Too many calls batched."
        ]
      }
    ],
    "errors_value": {
      "type": 396
    },
    "index": 13
  },
  {
    "name": "Preimage",
    "prefix": "Preimage",
    "storage": [
      {
        "name": "StatusFor",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "pallet_preimage:RequestStatus",
            "keys_id": 11,
            "value_id": 397
          }
        },
        "fallback": "0x00",
        "docs": [
          " The request status of a given hash."
        ]
      },
      {
        "name": "PreimageFor",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "Tuple:H256U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 399,
            "value_id": 400
          }
        },
        "fallback": "0x00",
        "docs": null
      }
    ],
    "calls": [
      {
        "lookup": "0f00",
        "name": "note_preimage",
        "docs": [
          "Register a preimage on-chain.",
          "",
          "If the preimage was previously requested, no fees or deposits are taken for providing",
          "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
        ],
        "args": [
          {
            "name": "bytes",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "0f01",
        "name": "unnote_preimage",
        "docs": [
          "Clear an unrequested preimage from the runtime storage.",
          "",
          "If `len` is provided, then it will be a much cheaper operation.",
          "",
          "- `hash`: The hash of the preimage to be removed from the store.",
          "- `len`: The length of the preimage of `hash`."
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "0f02",
        "name": "request_preimage",
        "docs": [
          "Request a preimage be uploaded to the chain without paying any fees or deposits.",
          "",
          "If the preimage requests has already been provided on-chain, we unreserve any deposit",
          "a user may have paid, and take the control of the preimage out of their hands."
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "0f03",
        "name": "unrequest_preimage",
        "docs": [
          "Clear a previously made request for a preimage.",
          "",
          "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 225
    },
    "events": [
      {
        "lookup": "0f00",
        "name": "Noted",
        "docs": [
          "A preimage has been noted."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "0f01",
        "name": "Requested",
        "docs": [
          "A preimage has been requested."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "0f02",
        "name": "Cleared",
        "docs": [
          "A preimage has ben cleared."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      }
    ],
    "events_value": {
      "type": 36
    },
    "errors": [
      {
        "name": "TooBig",
        "doc": [
          "Preimage is too large to store on-chain."
        ]
      },
      {
        "name": "AlreadyNoted",
        "doc": [
          "Preimage has already been noted on-chain."
        ]
      },
      {
        "name": "NotAuthorized",
        "doc": [
          "The user is not authorized to perform this action."
        ]
      },
      {
        "name": "NotNoted",
        "doc": [
          "The preimage cannot be removed since it has not yet been noted."
        ]
      },
      {
        "name": "Requested",
        "doc": [
          "A preimage may not be removed when there are outstanding requests."
        ]
      },
      {
        "name": "NotRequested",
        "doc": [
          "The preimage request cannot be removed since no outstanding requests exist."
        ]
      }
    ],
    "errors_value": {
      "type": 401
    },
    "index": 15
  },
  {
    "name": "Identity",
    "prefix": "Identity",
    "storage": [
      {
        "name": "IdentityOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "pallet_identity:types:Registration",
            "keys_id": 0,
            "value_id": 402
          }
        },
        "fallback": "0x00",
        "docs": [
          " Information that is pertinent to identify the entity behind an account.",
          "",
          "0x2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
        ]
      },
      {
        "name": "SuperOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:AccountIdpallet_identity:types:Data",
            "keys_id": 0,
            "value_id": 262
          }
        },
        "fallback": "0x00",
        "docs": [
          " The super-identity of an alternative \"sub\" identity together with its name, within that",
          " context. If the account is not some other account's sub-identity, then just `None`."
        ]
      },
      {
        "name": "SubsOf",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:U128Vec<AccountId>",
            "keys_id": 0,
            "value_id": 406
          }
        },
        "fallback": "0x0000000000000000000000000000000000",
        "docs": [
          " Alternative \"sub\" identities of this account.",
          "",
          " The first item is the deposit, the second is a vector of the accounts.",
          "",
          "0x2054574f582d4e4f54453a204f4b20e2809520604163636f756e7449646020697320612073656375726520686173682e"
        ]
      },
      {
        "name": "Registrars",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<option<pallet_identity:types:RegistrarInfo>>",
          "PlainTypeValue": 408
        },
        "fallback": "0x00",
        "docs": [
          " The set of registrars. Not expected to get very big as can only be added through a",
          " special origin (likely a council motion).",
          "",
          " The index into this can be cast to `RegistrarIndex` to get a valid value."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1100",
        "name": "add_registrar",
        "docs": [
          "Add a registrar to the system.",
          "",
          "The dispatch origin for this call must be `T::RegistrarOrigin`.",
          "",
          "- `account`: the account of the registrar.",
          "",
          "Emits `RegistrarAdded` if successful.",
          "",
          "# <weight>",
          "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
          "- One storage mutation (codec `O(R)`).",
          "- One event.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "account",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "1101",
        "name": "set_identity",
        "docs": [
          "Set an account's identity information and reserve the appropriate deposit.",
          "",
          "If the account already has identity information, the deposit is taken as part payment",
          "for the new deposit.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `info`: The identity information.",
          "",
          "Emits `IdentitySet` if successful.",
          "",
          "# <weight>",
          "- `O(X + X' + R)`",
          "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
          "  - where `R` judgements-count (registrar-count-bounded)",
          "- One balance reserve operation.",
          "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
          "- One event.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "info",
            "type": "pallet_identity:types:IdentityInfo",
            "type_name": "Box<IdentityInfo<MaxAdditionalFields>>"
          }
        ]
      },
      {
        "lookup": "1102",
        "name": "set_subs",
        "docs": [
          "Set the sub-accounts of the sender.",
          "",
          "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
          "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
          "",
          "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
          "identity.",
          "",
          "- `subs`: The identity's (new) sub-accounts.",
          "",
          "# <weight>",
          "- `O(P + S)`",
          "  - where `P` old-subs-count (hard- and deposit-bounded).",
          "  - where `S` subs-count (hard- and deposit-bounded).",
          "- At most one balance operations.",
          "- DB:",
          "  - `P + S` storage mutations (codec complexity `O(1)`)",
          "  - One storage read (codec complexity `O(P)`).",
          "  - One storage write (codec complexity `O(S)`).",
          "  - One storage-exists (`IdentityOf::contains_key`).",
          "# </weight>"
        ],
        "args": [
          {
            "name": "subs",
            "type": "Vec<Tuple:AccountIdpallet_identity:types:Data>",
            "type_name": "Vec<(AccountId, Data)>"
          }
        ]
      },
      {
        "lookup": "1103",
        "name": "clear_identity",
        "docs": [
          "Clear an account's identity info and all sub-accounts and return all deposits.",
          "",
          "Payment: All reserved balances on the account are returned.",
          "",
          "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
          "identity.",
          "",
          "Emits `IdentityCleared` if successful.",
          "",
          "# <weight>",
          "- `O(R + S + X)`",
          "  - where `R` registrar-count (governance-bounded).",
          "  - where `S` subs-count (hard- and deposit-bounded).",
          "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
          "- One balance-unreserve operation.",
          "- `2` storage reads and `S + 2` storage deletions.",
          "- One event.",
          "# </weight>"
        ],
        "args": null
      },
      {
        "lookup": "1104",
        "name": "request_judgement",
        "docs": [
          "Request a judgement from a registrar.",
          "",
          "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
          "given.",
          "",
          "The dispatch origin for this call must be _Signed_ and the sender must have a",
          "registered identity.",
          "",
          "- `reg_index`: The index of the registrar whose judgement is requested.",
          "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
          "",
          "```nocompile",
          "Self::registrars().get(reg_index).unwrap().fee",
          "```",
          "",
          "Emits `JudgementRequested` if successful.",
          "",
          "# <weight>",
          "- `O(R + X)`.",
          "- One balance-reserve operation.",
          "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
          "- One event.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "reg_index",
            "type": "compact<U32>",
            "type_name": "RegistrarIndex"
          },
          {
            "name": "max_fee",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1105",
        "name": "cancel_request",
        "docs": [
          "Cancel a previous request.",
          "",
          "Payment: A previously reserved deposit is returned on success.",
          "",
          "The dispatch origin for this call must be _Signed_ and the sender must have a",
          "registered identity.",
          "",
          "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
          "",
          "Emits `JudgementUnrequested` if successful.",
          "",
          "# <weight>",
          "- `O(R + X)`.",
          "- One balance-reserve operation.",
          "- One storage mutation `O(R + X)`.",
          "- One event",
          "# </weight>"
        ],
        "args": [
          {
            "name": "reg_index",
            "type": "U32",
            "type_name": "RegistrarIndex"
          }
        ]
      },
      {
        "lookup": "1106",
        "name": "set_fee",
        "docs": [
          "Set the fee required for a judgement to be requested from a registrar.",
          "",
          "The dispatch origin for this call must be _Signed_ and the sender must be the account",
          "of the registrar whose index is `index`.",
          "",
          "- `index`: the index of the registrar whose fee is to be set.",
          "- `fee`: the new fee.",
          "",
          "# <weight>",
          "- `O(R)`.",
          "- One storage mutation `O(R)`.",
          "0x2d2042656e63686d61726b3a20372e333135202b2052202a20302e33323920c2b57320286d696e207371756172657320616e616c7973697329",
          "# </weight>"
        ],
        "args": [
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "RegistrarIndex"
          },
          {
            "name": "fee",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1107",
        "name": "set_account_id",
        "docs": [
          "Change the account associated with a registrar.",
          "",
          "The dispatch origin for this call must be _Signed_ and the sender must be the account",
          "of the registrar whose index is `index`.",
          "",
          "- `index`: the index of the registrar whose fee is to be set.",
          "- `new`: the new account ID.",
          "",
          "# <weight>",
          "- `O(R)`.",
          "- One storage mutation `O(R)`.",
          "0x2d2042656e63686d61726b3a20382e383233202b2052202a20302e333220c2b57320286d696e207371756172657320616e616c7973697329",
          "# </weight>"
        ],
        "args": [
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "RegistrarIndex"
          },
          {
            "name": "new",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "1108",
        "name": "set_fields",
        "docs": [
          "Set the field information for a registrar.",
          "",
          "The dispatch origin for this call must be _Signed_ and the sender must be the account",
          "of the registrar whose index is `index`.",
          "",
          "- `index`: the index of the registrar whose fee is to be set.",
          "- `fields`: the fields that the registrar concerns themselves with.",
          "",
          "# <weight>",
          "- `O(R)`.",
          "- One storage mutation `O(R)`.",
          "0x2d2042656e63686d61726b3a20372e343634202b2052202a20302e33323520c2b57320286d696e207371756172657320616e616c7973697329",
          "# </weight>"
        ],
        "args": [
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "RegistrarIndex"
          },
          {
            "name": "fields",
            "type": "U64",
            "type_name": "IdentityFields"
          }
        ]
      },
      {
        "lookup": "1109",
        "name": "provide_judgement",
        "docs": [
          "Provide a judgement for an account's identity.",
          "",
          "The dispatch origin for this call must be _Signed_ and the sender must be the account",
          "of the registrar whose index is `reg_index`.",
          "",
          "- `reg_index`: the index of the registrar whose judgement is being made.",
          "- `target`: the account whose identity the judgement is upon. This must be an account",
          "  with a registered identity.",
          "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
          "- `identity`: The hash of the [`IdentityInfo`] for that the judgement is provided.",
          "",
          "Emits `JudgementGiven` if successful.",
          "",
          "# <weight>",
          "- `O(R + X)`.",
          "- One balance-transfer operation.",
          "- Up to one account-lookup operation.",
          "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
          "- One event.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "reg_index",
            "type": "compact<U32>",
            "type_name": "RegistrarIndex"
          },
          {
            "name": "target",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "judgement",
            "type": "pallet_identity:types:Judgement",
            "type_name": "Judgement<BalanceOf>"
          },
          {
            "name": "identity",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "110a",
        "name": "kill_identity",
        "docs": [
          "Remove an account's identity and sub-account information and slash the deposits.",
          "",
          "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
          "`Slash`. Verification request deposits are not returned; they should be cancelled",
          "manually using `cancel_request`.",
          "",
          "The dispatch origin for this call must match `T::ForceOrigin`.",
          "",
          "- `target`: the account whose identity the judgement is upon. This must be an account",
          "  with a registered identity.",
          "",
          "Emits `IdentityKilled` if successful.",
          "",
          "# <weight>",
          "- `O(R + S + X)`.",
          "- One balance-reserve operation.",
          "- `S + 2` storage mutations.",
          "- One event.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "target",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "110b",
        "name": "add_sub",
        "docs": [
          "Add the given account to the sender's subs.",
          "",
          "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
          "to the sender.",
          "",
          "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
          "sub identity of `sub`."
        ],
        "args": [
          {
            "name": "sub",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "data",
            "type": "pallet_identity:types:Data",
            "type_name": "Data"
          }
        ]
      },
      {
        "lookup": "110c",
        "name": "rename_sub",
        "docs": [
          "Alter the associated name of the given sub-account.",
          "",
          "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
          "sub identity of `sub`."
        ],
        "args": [
          {
            "name": "sub",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "data",
            "type": "pallet_identity:types:Data",
            "type_name": "Data"
          }
        ]
      },
      {
        "lookup": "110d",
        "name": "remove_sub",
        "docs": [
          "Remove the given account from the sender's subs.",
          "",
          "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
          "to the sender.",
          "",
          "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
          "sub identity of `sub`."
        ],
        "args": [
          {
            "name": "sub",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "110e",
        "name": "quit_sub",
        "docs": [
          "Remove the sender as a sub-account.",
          "",
          "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
          "to the sender (*not* the original depositor).",
          "",
          "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
          "super-identity.",
          "",
          "NOTE: This should not normally be used, but is provided in the case that the non-",
          "controller of an account is maliciously registered as a sub-account."
        ],
        "args": null
      }
    ],
    "calls_value": {
      "type": 226
    },
    "events": [
      {
        "lookup": "1100",
        "name": "IdentitySet",
        "docs": [
          "A name was set or reset (which will remove all judgements)."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "who"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "1101",
        "name": "IdentityCleared",
        "docs": [
          "A name was cleared, and the given balance returned."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1102",
        "name": "IdentityKilled",
        "docs": [
          "A name was removed and the given balance slashed."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1103",
        "name": "JudgementRequested",
        "docs": [
          "A judgement was asked from a registrar."
        ],
        "args": [
          "AccountId",
          "U32"
        ],
        "args_name": [
          "who",
          "registrar_index"
        ],
        "args_type_name": [
          "AccountId",
          "RegistrarIndex"
        ]
      },
      {
        "lookup": "1104",
        "name": "JudgementUnrequested",
        "docs": [
          "A judgement request was retracted."
        ],
        "args": [
          "AccountId",
          "U32"
        ],
        "args_name": [
          "who",
          "registrar_index"
        ],
        "args_type_name": [
          "AccountId",
          "RegistrarIndex"
        ]
      },
      {
        "lookup": "1105",
        "name": "JudgementGiven",
        "docs": [
          "A judgement was given by a registrar."
        ],
        "args": [
          "AccountId",
          "U32"
        ],
        "args_name": [
          "target",
          "registrar_index"
        ],
        "args_type_name": [
          "AccountId",
          "RegistrarIndex"
        ]
      },
      {
        "lookup": "1106",
        "name": "RegistrarAdded",
        "docs": [
          "A registrar was added."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "registrar_index"
        ],
        "args_type_name": [
          "RegistrarIndex"
        ]
      },
      {
        "lookup": "1107",
        "name": "SubIdentityAdded",
        "docs": [
          "A sub-identity was added to an identity and the deposit paid."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "sub",
          "main",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1108",
        "name": "SubIdentityRemoved",
        "docs": [
          "A sub-identity was removed from an identity and the deposit freed."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "sub",
          "main",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1109",
        "name": "SubIdentityRevoked",
        "docs": [
          "A sub-identity was cleared, and the given deposit repatriated from the",
          "main identity account to the sub-identity account."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "sub",
          "main",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 37
    },
    "constants": [
      {
        "name": "BasicDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00406352bfc601000000000000000000",
        "docs": [
          " The amount held on deposit for a registered identity"
        ]
      },
      {
        "name": "FieldDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00407a10f35a00000000000000000000",
        "docs": [
          " The amount held on deposit per additional field for a registered identity."
        ]
      },
      {
        "name": "SubAccountDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00406352bfc601000000000000000000",
        "docs": [
          " The amount held on deposit for a registered subaccount. This should account for the fact",
          " that one storage item's value will increase by the size of an account ID, and there will",
          " be another trie item whose value is the size of an account ID plus 32 bytes."
        ]
      },
      {
        "name": "MaxSubAccounts",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum number of sub-accounts allowed per identified account."
        ]
      },
      {
        "name": "MaxAdditionalFields",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
          " required to access an identity, but can be pretty high."
        ]
      },
      {
        "name": "MaxRegistrars",
        "type": "U32",
        "type_value": 4,
        "constants_value": "14000000",
        "docs": [
          " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
          " of, e.g., updating judgements."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooManySubAccounts",
        "doc": [
          "Too many subs-accounts."
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Account isn't found."
        ]
      },
      {
        "name": "NotNamed",
        "doc": [
          "Account isn't named."
        ]
      },
      {
        "name": "EmptyIndex",
        "doc": [
          "Empty index."
        ]
      },
      {
        "name": "FeeChanged",
        "doc": [
          "Fee is changed."
        ]
      },
      {
        "name": "NoIdentity",
        "doc": [
          "No identity found."
        ]
      },
      {
        "name": "StickyJudgement",
        "doc": [
          "Sticky judgement."
        ]
      },
      {
        "name": "JudgementGiven",
        "doc": [
          "Judgement given."
        ]
      },
      {
        "name": "InvalidJudgement",
        "doc": [
          "Invalid judgement."
        ]
      },
      {
        "name": "InvalidIndex",
        "doc": [
          "The index is invalid."
        ]
      },
      {
        "name": "InvalidTarget",
        "doc": [
          "The target is invalid."
        ]
      },
      {
        "name": "TooManyFields",
        "doc": [
          "Too many additional fields."
        ]
      },
      {
        "name": "TooManyRegistrars",
        "doc": [
          "Maximum amount of registrars reached. Cannot add any more."
        ]
      },
      {
        "name": "AlreadyClaimed",
        "doc": [
          "Account ID is already named."
        ]
      },
      {
        "name": "NotSub",
        "doc": [
          "Sender is not a sub-account."
        ]
      },
      {
        "name": "NotOwned",
        "doc": [
          "Sub-account isn't owned by sender."
        ]
      },
      {
        "name": "JudgementForDifferentIdentity",
        "doc": [
          "The provided judgement was for a different identity."
        ]
      },
      {
        "name": "JudgementPaymentFailed",
        "doc": [
          "Error that occurs when there is an issue paying for judgement."
        ]
      }
    ],
    "errors_value": {
      "type": 412
    },
    "index": 17
  },
  {
    "name": "Democracy",
    "prefix": "Democracy",
    "storage": [
      {
        "name": "PublicPropCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of (public) proposals that have been made so far."
        ]
      },
      {
        "name": "PublicProps",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:U32frame_support:traits:preimages:BoundedAccountId>",
          "PlainTypeValue": 413
        },
        "fallback": "0x00",
        "docs": [
          " The public proposals. Unsorted. The second item is the proposal."
        ]
      },
      {
        "name": "DepositOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Tuple:Vec<AccountId>U128",
            "keys_id": 4,
            "value_id": 416
          }
        },
        "fallback": "0x00",
        "docs": [
          " Those who have locked a deposit.",
          "",
          " TWOX-NOTE: Safe, as increasing integer keys are safe."
        ]
      },
      {
        "name": "ReferendumCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The next free referendum index, aka the number of referenda started so far."
        ]
      },
      {
        "name": "LowestUnbaked",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The lowest referendum index representing an unbaked referendum. Equal to",
          " `ReferendumCount` if there isn't a unbaked referendum."
        ]
      },
      {
        "name": "ReferendumInfoOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_democracy:types:ReferendumInfo",
            "keys_id": 4,
            "value_id": 418
          }
        },
        "fallback": "0x00",
        "docs": [
          " Information concerning any given referendum.",
          "",
          "0x2054574f582d4e4f54453a205341464520617320696e646578657320617265206e6f7420756e64657220616e2061747461636b6572e280997320636f6e74726f6c2e"
        ]
      },
      {
        "name": "VotingOf",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "pallet_democracy:vote:Voting",
            "keys_id": 0,
            "value_id": 421
          }
        },
        "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " All votes for a particular voter. We store the balance for the number of votes that we",
          " have recorded. The second item is the total amount of delegations, that will be added.",
          "",
          " TWOX-NOTE: SAFE as `AccountId`s are crypto hashes anyway."
        ]
      },
      {
        "name": "LastTabledWasExternal",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 46
        },
        "fallback": "0x00",
        "docs": [
          " True if the last referendum tabled was submitted externally. False if it was a public",
          " proposal."
        ]
      },
      {
        "name": "NextExternal",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Tuple:frame_support:traits:preimages:Boundedpallet_democracy:vote_threshold:VoteThreshold",
          "PlainTypeValue": 427
        },
        "fallback": "0x00",
        "docs": [
          " The referendum to be tabled whenever it would be valid to table an external proposal.",
          " This happens when a referendum needs to be tabled and one of two conditions are met:",
          " - `LastTabledWasExternal` is `false`; or",
          " - `PublicProps` is empty."
        ]
      },
      {
        "name": "Blacklist",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Tuple:U32Vec<AccountId>",
            "keys_id": 11,
            "value_id": 428
          }
        },
        "fallback": "0x00",
        "docs": [
          " A record of who vetoed what. Maps proposal hash to a possible existent block number",
          " (until when it may not be resubmitted) and who vetoed it."
        ]
      },
      {
        "name": "Cancellations",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Bool",
            "keys_id": 11,
            "value_id": 46
          }
        },
        "fallback": "0x00",
        "docs": [
          " Record of all proposals that have been subject to emergency cancellation."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1300",
        "name": "propose",
        "docs": [
          "Propose a sensitive action to be taken.",
          "",
          "The dispatch origin of this call must be _Signed_ and the sender must",
          "have funds to cover the deposit.",
          "",
          "- `proposal_hash`: The hash of the proposal preimage.",
          "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
          "",
          "Emits `Proposed`."
        ],
        "args": [
          {
            "name": "proposal",
            "type": "frame_support:traits:preimages:Bounded",
            "type_name": "BoundedCallOf"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1301",
        "name": "second",
        "docs": [
          "Signals agreement with a particular proposal.",
          "",
          "The dispatch origin of this call must be _Signed_ and the sender",
          "must have funds to cover the deposit, equal to the original deposit.",
          "",
          "- `proposal`: The index of the proposal to second."
        ],
        "args": [
          {
            "name": "proposal",
            "type": "compact<U32>",
            "type_name": "PropIndex"
          }
        ]
      },
      {
        "lookup": "1302",
        "name": "vote",
        "docs": [
          "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
          "otherwise it is a vote to keep the status quo.",
          "",
          "The dispatch origin of this call must be _Signed_.",
          "",
          "- `ref_index`: The index of the referendum to vote for.",
          "- `vote`: The vote configuration."
        ],
        "args": [
          {
            "name": "ref_index",
            "type": "compact<U32>",
            "type_name": "ReferendumIndex"
          },
          {
            "name": "vote",
            "type": "pallet_democracy:vote:AccountVote",
            "type_name": "AccountVote<BalanceOf>"
          }
        ]
      },
      {
        "lookup": "1303",
        "name": "emergency_cancel",
        "docs": [
          "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
          "referendum.",
          "",
          "The dispatch origin of this call must be `CancellationOrigin`.",
          "",
          "-`ref_index`: The index of the referendum to cancel.",
          "",
          "Weight: `O(1)`."
        ],
        "args": [
          {
            "name": "ref_index",
            "type": "U32",
            "type_name": "ReferendumIndex"
          }
        ]
      },
      {
        "lookup": "1304",
        "name": "external_propose",
        "docs": [
          "Schedule a referendum to be tabled once it is legal to schedule an external",
          "referendum.",
          "",
          "The dispatch origin of this call must be `ExternalOrigin`.",
          "",
          "- `proposal_hash`: The preimage hash of the proposal."
        ],
        "args": [
          {
            "name": "proposal",
            "type": "frame_support:traits:preimages:Bounded",
            "type_name": "BoundedCallOf"
          }
        ]
      },
      {
        "lookup": "1305",
        "name": "external_propose_majority",
        "docs": [
          "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
          "an external referendum.",
          "",
          "The dispatch of this call must be `ExternalMajorityOrigin`.",
          "",
          "- `proposal_hash`: The preimage hash of the proposal.",
          "",
          "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
          "pre-scheduled `external_propose` call.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "proposal",
            "type": "frame_support:traits:preimages:Bounded",
            "type_name": "BoundedCallOf"
          }
        ]
      },
      {
        "lookup": "1306",
        "name": "external_propose_default",
        "docs": [
          "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
          "schedule an external referendum.",
          "",
          "The dispatch of this call must be `ExternalDefaultOrigin`.",
          "",
          "- `proposal_hash`: The preimage hash of the proposal.",
          "",
          "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
          "pre-scheduled `external_propose` call.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "proposal",
            "type": "frame_support:traits:preimages:Bounded",
            "type_name": "BoundedCallOf"
          }
        ]
      },
      {
        "lookup": "1307",
        "name": "fast_track",
        "docs": [
          "Schedule the currently externally-proposed majority-carries referendum to be tabled",
          "immediately. If there is no externally-proposed referendum currently, or if there is one",
          "but it is not a majority-carries referendum then it fails.",
          "",
          "The dispatch of this call must be `FastTrackOrigin`.",
          "",
          "- `proposal_hash`: The hash of the current external proposal.",
          "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
          "\tMust be always greater than zero.",
          "\tFor `FastTrackOrigin` must be equal or greater than `FastTrackVotingPeriod`.",
          "- `delay`: The number of block after voting has ended in approval and this should be",
          "  enacted. This doesn't have a minimum amount.",
          "",
          "Emits `Started`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "H256"
          },
          {
            "name": "voting_period",
            "type": "U32",
            "type_name": "BlockNumber"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumber"
          }
        ]
      },
      {
        "lookup": "1308",
        "name": "veto_external",
        "docs": [
          "Veto and blacklist the external proposal hash.",
          "",
          "The dispatch origin of this call must be `VetoOrigin`.",
          "",
          "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
          "",
          "Emits `Vetoed`.",
          "",
          "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "H256"
          }
        ]
      },
      {
        "lookup": "1309",
        "name": "cancel_referendum",
        "docs": [
          "Remove a referendum.",
          "",
          "The dispatch origin of this call must be _Root_.",
          "",
          "- `ref_index`: The index of the referendum to cancel.",
          "",
          "# Weight: `O(1)`."
        ],
        "args": [
          {
            "name": "ref_index",
            "type": "compact<U32>",
            "type_name": "ReferendumIndex"
          }
        ]
      },
      {
        "lookup": "130a",
        "name": "delegate",
        "docs": [
          "Delegate the voting power (with some given conviction) of the sending account.",
          "",
          "The balance delegated is locked for as long as it's delegated, and thereafter for the",
          "time appropriate for the conviction's lock period.",
          "",
          "The dispatch origin of this call must be _Signed_, and the signing account must either:",
          "  - be delegating already; or",
          "  - have no voting activity (if there is, then it will need to be removed/consolidated",
          "    through `reap_vote` or `unvote`).",
          "",
          "- `to`: The account whose voting the `target` account's voting power will follow.",
          "- `conviction`: The conviction that will be attached to the delegated votes. When the",
          "  account is undelegated, the funds will be locked for the corresponding period.",
          "- `balance`: The amount of the account's balance to be used in delegating. This must not",
          "  be more than the account's current balance.",
          "",
          "Emits `Delegated`.",
          "",
          "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
          "  voted on. Weight is charged as if maximum votes."
        ],
        "args": [
          {
            "name": "to",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "conviction",
            "type": "pallet_democracy:conviction:Conviction",
            "type_name": "Conviction"
          },
          {
            "name": "balance",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "130b",
        "name": "undelegate",
        "docs": [
          "Undelegate the voting power of the sending account.",
          "",
          "Tokens may be unlocked following once an amount of time consistent with the lock period",
          "of the conviction with which the delegation was issued.",
          "",
          "The dispatch origin of this call must be _Signed_ and the signing account must be",
          "currently delegating.",
          "",
          "Emits `Undelegated`.",
          "",
          "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
          "  voted on. Weight is charged as if maximum votes."
        ],
        "args": null
      },
      {
        "lookup": "130c",
        "name": "clear_public_proposals",
        "docs": [
          "Clears all public proposals.",
          "",
          "The dispatch origin of this call must be _Root_.",
          "",
          "Weight: `O(1)`."
        ],
        "args": null
      },
      {
        "lookup": "130d",
        "name": "unlock",
        "docs": [
          "Unlock tokens that have an expired lock.",
          "",
          "The dispatch origin of this call must be _Signed_.",
          "",
          "- `target`: The account to remove the lock on.",
          "",
          "Weight: `O(R)` with R number of vote of target."
        ],
        "args": [
          {
            "name": "target",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "130e",
        "name": "remove_vote",
        "docs": [
          "Remove a vote for a referendum.",
          "",
          "If:",
          "- the referendum was cancelled, or",
          "- the referendum is ongoing, or",
          "- the referendum has ended such that",
          "  - the vote of the account was in opposition to the result; or",
          "  - there was no conviction to the account's vote; or",
          "  - the account made a split vote",
          "...then the vote is removed cleanly and a following call to `unlock` may result in more",
          "funds being available.",
          "",
          "If, however, the referendum has ended and:",
          "- it finished corresponding to the vote of the account, and",
          "- the account made a standard vote with conviction, and",
          "- the lock period of the conviction is not over",
          "...then the lock will be aggregated into the overall account's lock, which may involve",
          "*overlocking* (where the two locks are combined into a single lock that is the maximum",
          "of both the amount locked and the time is it locked for).",
          "",
          "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
          "registered for referendum `index`.",
          "",
          "- `index`: The index of referendum of the vote to be removed.",
          "",
          "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
          "  Weight is calculated for the maximum number of vote."
        ],
        "args": [
          {
            "name": "index",
            "type": "U32",
            "type_name": "ReferendumIndex"
          }
        ]
      },
      {
        "lookup": "130f",
        "name": "remove_other_vote",
        "docs": [
          "Remove a vote for a referendum.",
          "",
          "If the `target` is equal to the signer, then this function is exactly equivalent to",
          "`remove_vote`. If not equal to the signer, then the vote must have expired,",
          "either because the referendum was cancelled, because the voter lost the referendum or",
          "because the conviction period is over.",
          "",
          "The dispatch origin of this call must be _Signed_.",
          "",
          "- `target`: The account of the vote to be removed; this account must have voted for",
          "  referendum `index`.",
          "- `index`: The index of referendum of the vote to be removed.",
          "",
          "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
          "  Weight is calculated for the maximum number of vote."
        ],
        "args": [
          {
            "name": "target",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "index",
            "type": "U32",
            "type_name": "ReferendumIndex"
          }
        ]
      },
      {
        "lookup": "1310",
        "name": "blacklist",
        "docs": [
          "Permanently place a proposal into the blacklist. This prevents it from ever being",
          "proposed again.",
          "",
          "If called on a queued public or external proposal, then this will result in it being",
          "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
          "then it will be cancelled.",
          "",
          "The dispatch origin of this call must be `BlacklistOrigin`.",
          "",
          "- `proposal_hash`: The proposal hash to blacklist permanently.",
          "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
          "cancelled.",
          "",
          "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
          "  reasonable value)."
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "H256"
          },
          {
            "name": "maybe_ref_index",
            "type": "option<U32>",
            "type_name": "Option<ReferendumIndex>"
          }
        ]
      },
      {
        "lookup": "1311",
        "name": "cancel_proposal",
        "docs": [
          "Remove a proposal.",
          "",
          "The dispatch origin of this call must be `CancelProposalOrigin`.",
          "",
          "- `prop_index`: The index of the proposal to cancel.",
          "",
          "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
        ],
        "args": [
          {
            "name": "prop_index",
            "type": "compact<U32>",
            "type_name": "PropIndex"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 266
    },
    "events": [
      {
        "lookup": "1300",
        "name": "Proposed",
        "docs": [
          "A motion has been proposed by a public account."
        ],
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "proposal_index",
          "deposit"
        ],
        "args_type_name": [
          "PropIndex",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1301",
        "name": "Tabled",
        "docs": [
          "A public proposal has been tabled for referendum vote."
        ],
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "proposal_index",
          "deposit"
        ],
        "args_type_name": [
          "PropIndex",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1302",
        "name": "ExternalTabled",
        "docs": [
          "An external proposal has been tabled."
        ],
        "args": null
      },
      {
        "lookup": "1303",
        "name": "Started",
        "docs": [
          "A referendum has begun."
        ],
        "args": [
          "U32",
          "pallet_democracy:vote_threshold:VoteThreshold"
        ],
        "args_name": [
          "ref_index",
          "threshold"
        ],
        "args_type_name": [
          "ReferendumIndex",
          "VoteThreshold"
        ]
      },
      {
        "lookup": "1304",
        "name": "Passed",
        "docs": [
          "A proposal has been approved by referendum."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "ref_index"
        ],
        "args_type_name": [
          "ReferendumIndex"
        ]
      },
      {
        "lookup": "1305",
        "name": "NotPassed",
        "docs": [
          "A proposal has been rejected by referendum."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "ref_index"
        ],
        "args_type_name": [
          "ReferendumIndex"
        ]
      },
      {
        "lookup": "1306",
        "name": "Cancelled",
        "docs": [
          "A referendum has been cancelled."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "ref_index"
        ],
        "args_type_name": [
          "ReferendumIndex"
        ]
      },
      {
        "lookup": "1307",
        "name": "Delegated",
        "docs": [
          "An account has delegated their vote to another account."
        ],
        "args": [
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "who",
          "target"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "1308",
        "name": "Undelegated",
        "docs": [
          "An account has cancelled a previous delegation operation."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "1309",
        "name": "Vetoed",
        "docs": [
          "An external proposal has been vetoed."
        ],
        "args": [
          "AccountId",
          "H256",
          "U32"
        ],
        "args_name": [
          "who",
          "proposal_hash",
          "until"
        ],
        "args_type_name": [
          "AccountId",
          "H256",
          "BlockNumber"
        ]
      },
      {
        "lookup": "130a",
        "name": "Blacklisted",
        "docs": [
          "A proposal_hash has been blacklisted permanently."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "proposal_hash"
        ],
        "args_type_name": [
          "H256"
        ]
      },
      {
        "lookup": "130b",
        "name": "Voted",
        "docs": [
          "An account has voted in a referendum"
        ],
        "args": [
          "AccountId",
          "U32",
          "pallet_democracy:vote:AccountVote"
        ],
        "args_name": [
          "voter",
          "ref_index",
          "vote"
        ],
        "args_type_name": [
          "AccountId",
          "ReferendumIndex",
          "AccountVote<BalanceOf>"
        ]
      },
      {
        "lookup": "130c",
        "name": "Seconded",
        "docs": [
          "An account has secconded a proposal"
        ],
        "args": [
          "AccountId",
          "U32"
        ],
        "args_name": [
          "seconder",
          "prop_index"
        ],
        "args_type_name": [
          "AccountId",
          "PropIndex"
        ]
      },
      {
        "lookup": "130d",
        "name": "ProposalCanceled",
        "docs": [
          "A proposal got canceled."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "prop_index"
        ],
        "args_type_name": [
          "PropIndex"
        ]
      }
    ],
    "events_value": {
      "type": 38
    },
    "constants": [
      {
        "name": "EnactmentPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "201c0000",
        "docs": [
          " The period between a proposal being approved and enacted.",
          "",
          " It should generally be a little more than the unstake period to ensure that",
          " voting stakers have an opportunity to remove themselves from the system in the case",
          " where they are on the losing side of a vote."
        ]
      },
      {
        "name": "LaunchPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "60540000",
        "docs": [
          " How often (in blocks) new public referenda are launched."
        ]
      },
      {
        "name": "VotingPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "60540000",
        "docs": [
          " How often (in blocks) to check for new votes."
        ]
      },
      {
        "name": "VoteLockingPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "c0a80000",
        "docs": [
          " The minimum period of vote locking.",
          "",
          " It should be no shorter than enactment period to ensure that in the case of an approval,",
          " those successful voters are locked into the consequences that their votes entail."
        ]
      },
      {
        "name": "MinimumDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00008a5d784563010000000000000000",
        "docs": [
          " The minimum amount to be used as a deposit for a public referendum proposal."
        ]
      },
      {
        "name": "InstantAllowed",
        "type": "Bool",
        "type_value": 46,
        "constants_value": "01",
        "docs": [
          " Indicator for whether an emergency origin is even allowed to happen. Some chains may",
          " want to set this permanently to `false`, others may want to condition it on things such",
          " as an upgrade having happened recently."
        ]
      },
      {
        "name": "FastTrackVotingPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "84030000",
        "docs": [
          " Minimum voting period allowed for a fast-track referendum."
        ]
      },
      {
        "name": "CooloffPeriod",
        "type": "U32",
        "type_value": 4,
        "constants_value": "e0c40000",
        "docs": [
          " Period in blocks where an external proposal may not be re-submitted after being vetoed."
        ]
      },
      {
        "name": "MaxVotes",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum number of votes for an account.",
          "",
          " Also used to compute weight, an overly big value can",
          " lead to extrinsic with very big weight: see `delegate` for instance."
        ]
      },
      {
        "name": "MaxProposals",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum number of public proposals that can exist at any time."
        ]
      },
      {
        "name": "MaxDeposits",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum number of deposits a public proposal may have at any time."
        ]
      },
      {
        "name": "MaxBlacklisted",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum number of items which can be blacklisted."
        ]
      }
    ],
    "errors": [
      {
        "name": "ValueLow",
        "doc": [
          "Value too low"
        ]
      },
      {
        "name": "ProposalMissing",
        "doc": [
          "Proposal does not exist"
        ]
      },
      {
        "name": "AlreadyCanceled",
        "doc": [
          "Cannot cancel the same proposal twice"
        ]
      },
      {
        "name": "DuplicateProposal",
        "doc": [
          "Proposal already made"
        ]
      },
      {
        "name": "ProposalBlacklisted",
        "doc": [
          "Proposal still blacklisted"
        ]
      },
      {
        "name": "NotSimpleMajority",
        "doc": [
          "Next external proposal not simple majority"
        ]
      },
      {
        "name": "InvalidHash",
        "doc": [
          "Invalid hash"
        ]
      },
      {
        "name": "NoProposal",
        "doc": [
          "No external proposal"
        ]
      },
      {
        "name": "AlreadyVetoed",
        "doc": [
          "Identity may not veto a proposal twice"
        ]
      },
      {
        "name": "ReferendumInvalid",
        "doc": [
          "Vote given for invalid referendum"
        ]
      },
      {
        "name": "NoneWaiting",
        "doc": [
          "No proposals waiting"
        ]
      },
      {
        "name": "NotVoter",
        "doc": [
          "The given account did not vote on the referendum."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "The actor has no permission to conduct the action."
        ]
      },
      {
        "name": "AlreadyDelegating",
        "doc": [
          "The account is already delegating."
        ]
      },
      {
        "name": "InsufficientFunds",
        "doc": [
          "Too high a balance was provided that the account cannot afford."
        ]
      },
      {
        "name": "NotDelegating",
        "doc": [
          "The account is not currently delegating."
        ]
      },
      {
        "name": "VotesExist",
        "doc": [
          "The account currently has votes attached to it and the operation cannot succeed until",
          "these are removed, either through `unvote` or `reap_vote`."
        ]
      },
      {
        "name": "InstantNotAllowed",
        "doc": [
          "The instant referendum origin is currently disallowed."
        ]
      },
      {
        "name": "Nonsense",
        "doc": [
          "Delegation to oneself makes no sense."
        ]
      },
      {
        "name": "WrongUpperBound",
        "doc": [
          "Invalid upper bound."
        ]
      },
      {
        "name": "MaxVotesReached",
        "doc": [
          "Maximum number of votes reached."
        ]
      },
      {
        "name": "TooMany",
        "doc": [
          "Maximum number of items reached."
        ]
      },
      {
        "name": "VotingPeriodLow",
        "doc": [
          "Voting period too low"
        ]
      }
    ],
    "errors_value": {
      "type": 429
    },
    "index": 19
  },
  {
    "name": "Elections",
    "prefix": "Elections",
    "storage": [
      {
        "name": "Members",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<pallet_elections_phragmen:SeatHolder>",
          "PlainTypeValue": 430
        },
        "fallback": "0x00",
        "docs": [
          " The current elected members.",
          "",
          " Invariant: Always sorted based on account id."
        ]
      },
      {
        "name": "RunnersUp",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<pallet_elections_phragmen:SeatHolder>",
          "PlainTypeValue": 430
        },
        "fallback": "0x00",
        "docs": [
          " The current reserved runners-up.",
          "",
          " Invariant: Always sorted based on rank (worse to best). Upon removal of a member, the",
          " last (i.e. _best_) runner-up will be replaced."
        ]
      },
      {
        "name": "Candidates",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:AccountIdU128>",
          "PlainTypeValue": 43
        },
        "fallback": "0x00",
        "docs": [
          " The present candidate list. A current member or runner-up can never enter this vector",
          " and is always implicitly assumed to be a candidate.",
          "",
          " Second element is the deposit.",
          "",
          " Invariant: Always sorted based on account id."
        ]
      },
      {
        "name": "ElectionRounds",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The total number of vote rounds that have happened, excluding the upcoming one."
        ]
      },
      {
        "name": "Voting",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "pallet_elections_phragmen:Voter",
            "keys_id": 0,
            "value_id": 432
          }
        },
        "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Votes and locked stake of a particular voter.",
          "",
          " TWOX-NOTE: SAFE as `AccountId` is a crypto hash."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1500",
        "name": "vote",
        "docs": [
          "Vote for a set of candidates for the upcoming round of election. This can be called to",
          "set the initial votes, or update already existing votes.",
          "",
          "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is",
          "reserved. The deposit is based on the number of votes and can be updated over time.",
          "",
          "The `votes` should:",
          "  - not be empty.",
          "  - be less than the number of possible candidates. Note that all current members and",
          "    runners-up are also automatically candidates for the next round.",
          "",
          "If `value` is more than `who`'s free balance, then the maximum of the two is used.",
          "",
          "The dispatch origin of this call must be signed.",
          "",
          "### Warning",
          "",
          "It is the responsibility of the caller to **NOT** place all of their balance into the",
          "lock and keep some for further operations.",
          "",
          "# <weight>",
          "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "votes",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "value",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1501",
        "name": "remove_voter",
        "docs": [
          "Remove `origin` as a voter.",
          "",
          "This removes the lock and returns the deposit.",
          "",
          "The dispatch origin of this call must be signed and be a voter."
        ],
        "args": null
      },
      {
        "lookup": "1502",
        "name": "submit_candidacy",
        "docs": [
          "Submit oneself for candidacy. A fixed amount of deposit is recorded.",
          "",
          "All candidates are wiped at the end of the term. They either become a member/runner-up,",
          "or leave the system while their deposit is slashed.",
          "",
          "The dispatch origin of this call must be signed.",
          "",
          "### Warning",
          "",
          "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]",
          "to get their deposit back. Losing the spot in an election will always lead to a slash.",
          "",
          "# <weight>",
          "The number of current candidates must be provided as witness data.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "candidate_count",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1503",
        "name": "renounce_candidacy",
        "docs": [
          "Renounce one's intention to be a candidate for the next election round. 3 potential",
          "outcomes exist:",
          "",
          "- `origin` is a candidate and not elected in any set. In this case, the deposit is",
          "  unreserved, returned and origin is removed as a candidate.",
          "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and",
          "  origin is removed as a runner-up.",
          "- `origin` is a current member. In this case, the deposit is unreserved and origin is",
          "  removed as a member, consequently not being a candidate for the next round anymore.",
          "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they",
          "  are immediately used. If the prime is renouncing, then no prime will exist until the",
          "  next round.",
          "",
          "The dispatch origin of this call must be signed, and have one of the above roles.",
          "",
          "# <weight>",
          "The type of renouncing must be provided as witness data.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "renouncing",
            "type": "pallet_elections_phragmen:Renouncing",
            "type_name": "Renouncing"
          }
        ]
      },
      {
        "lookup": "1504",
        "name": "remove_member",
        "docs": [
          "Remove a particular member from the set. This is effective immediately and the bond of",
          "the outgoing member is slashed.",
          "",
          "If a runner-up is available, then the best runner-up will be removed and replaces the",
          "outgoing member. Otherwise, if `rerun_election` is `true`, a new phragmen election is",
          "started, else, nothing happens.",
          "",
          "If `slash_bond` is set to true, the bond of the member being removed is slashed. Else,",
          "it is returned.",
          "",
          "The dispatch origin of this call must be root.",
          "",
          "Note that this does not affect the designated block number of the next election.",
          "",
          "# <weight>",
          "If we have a replacement, we use a small weight. Else, since this is a root call and",
          "will go into phragmen, we assume full block for now.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "slash_bond",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "rerun_election",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "1505",
        "name": "clean_defunct_voters",
        "docs": [
          "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The",
          "deposit of the removed voters are returned.",
          "",
          "This is an root function to be used only for cleaning the state.",
          "",
          "The dispatch origin of this call must be root.",
          "",
          "# <weight>",
          "The total number of voters and those that are defunct must be provided as witness data.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "num_voters",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "num_defunct",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 270
    },
    "events": [
      {
        "lookup": "1500",
        "name": "NewTerm",
        "docs": [
          "A new term with new_members. This indicates that enough candidates existed to run",
          "the election, not that enough have has been elected. The inner value must be examined",
          "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
          "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
          "begin with."
        ],
        "args": [
          "Vec<Tuple:AccountIdU128>"
        ],
        "args_name": [
          "new_members"
        ],
        "args_type_name": [
          "Vec<(<T as frame_system::Config>::AccountId, BalanceOf)>"
        ]
      },
      {
        "lookup": "1501",
        "name": "EmptyTerm",
        "docs": [
          "No (or not enough) candidates existed for this round. This is different from",
          "`NewTerm(\\[\\])`. See the description of `NewTerm`."
        ],
        "args": null
      },
      {
        "lookup": "1502",
        "name": "ElectionError",
        "docs": [
          "Internal error happened while trying to perform election."
        ],
        "args": null
      },
      {
        "lookup": "1503",
        "name": "MemberKicked",
        "docs": [
          "A member has been removed. This should always be followed by either `NewTerm` or",
          "`EmptyTerm`."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "member"
        ],
        "args_type_name": [
          "<T as frame_system::Config>::AccountId"
        ]
      },
      {
        "lookup": "1504",
        "name": "Renounced",
        "docs": [
          "Someone has renounced their candidacy."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "candidate"
        ],
        "args_type_name": [
          "<T as frame_system::Config>::AccountId"
        ]
      },
      {
        "lookup": "1505",
        "name": "CandidateSlashed",
        "docs": [
          "A candidate was slashed by amount due to failing to obtain a seat as member or",
          "runner-up.",
          "",
          "Note that old members and runners-up are also candidates."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "candidate",
          "amount"
        ],
        "args_type_name": [
          "<T as frame_system::Config>::AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1506",
        "name": "SeatHolderSlashed",
        "docs": [
          "A seat holder was slashed by amount by being forcefully removed from the set."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "seat_holder",
          "amount"
        ],
        "args_type_name": [
          "<T as frame_system::Config>::AccountId",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 42
    },
    "constants": [
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 109,
        "constants_value": "706872656c656374",
        "docs": [
          " Identifier for the elections-phragmen pallet's lock"
        ]
      },
      {
        "name": "CandidacyBond",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00406352bfc601000000000000000000",
        "docs": [
          " How much should be locked up in order to submit one's candidacy."
        ]
      },
      {
        "name": "VotingBondBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0010a5d4e80000000000000000000000",
        "docs": [
          " Base deposit associated with voting.",
          "",
          " This should be sensibly high to economically ensure the pallet cannot be attacked by",
          " creating a gigantic number of votes."
        ]
      },
      {
        "name": "VotingBondFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0010a5d4e80000000000000000000000",
        "docs": [
          " The amount of bond that need to be locked for each vote (32 bytes)."
        ]
      },
      {
        "name": "DesiredMembers",
        "type": "U32",
        "type_value": 4,
        "constants_value": "0d000000",
        "docs": [
          " Number of members to elect."
        ]
      },
      {
        "name": "DesiredRunnersUp",
        "type": "U32",
        "type_value": 4,
        "constants_value": "0f000000",
        "docs": [
          " Number of runners_up to keep."
        ]
      },
      {
        "name": "TermDuration",
        "type": "U32",
        "type_value": 4,
        "constants_value": "e0c40000",
        "docs": [
          " How long each seat is kept. This defines the next block number at which an election",
          " round will happen. If set to zero, no elections are ever triggered and the module will",
          " be in passive mode."
        ]
      },
      {
        "name": "MaxCandidates",
        "type": "U32",
        "type_value": 4,
        "constants_value": "e8030000",
        "docs": [
          " The maximum number of candidates in a phragmen election.",
          "",
          " Warning: The election happens onchain, and this value will determine",
          " the size of the election. When this limit is reached no more",
          " candidates are accepted in the election."
        ]
      },
      {
        "name": "MaxVoters",
        "type": "U32",
        "type_value": 4,
        "constants_value": "10270000",
        "docs": [
          " The maximum number of voters to allow in a phragmen election.",
          "",
          " Warning: This impacts the size of the election which is run onchain.",
          " When the limit is reached the new voters are ignored."
        ]
      }
    ],
    "errors": [
      {
        "name": "UnableToVote",
        "doc": [
          "Cannot vote when no candidates or members exist."
        ]
      },
      {
        "name": "NoVotes",
        "doc": [
          "Must vote for at least one candidate."
        ]
      },
      {
        "name": "TooManyVotes",
        "doc": [
          "Cannot vote more than candidates."
        ]
      },
      {
        "name": "MaximumVotesExceeded",
        "doc": [
          "Cannot vote more than maximum allowed."
        ]
      },
      {
        "name": "LowBalance",
        "doc": [
          "Cannot vote with stake less than minimum balance."
        ]
      },
      {
        "name": "UnableToPayBond",
        "doc": [
          "Voter can not pay voting bond."
        ]
      },
      {
        "name": "MustBeVoter",
        "doc": [
          "Must be a voter."
        ]
      },
      {
        "name": "DuplicatedCandidate",
        "doc": [
          "Duplicated candidate submission."
        ]
      },
      {
        "name": "TooManyCandidates",
        "doc": [
          "Too many candidates have been created."
        ]
      },
      {
        "name": "MemberSubmit",
        "doc": [
          "Member cannot re-submit candidacy."
        ]
      },
      {
        "name": "RunnerUpSubmit",
        "doc": [
          "Runner cannot re-submit candidacy."
        ]
      },
      {
        "name": "InsufficientCandidateFunds",
        "doc": [
          "Candidate does not have enough funds."
        ]
      },
      {
        "name": "NotMember",
        "doc": [
          "Not a member."
        ]
      },
      {
        "name": "InvalidWitnessData",
        "doc": [
          "The provided count of number of candidates is incorrect."
        ]
      },
      {
        "name": "InvalidVoteCount",
        "doc": [
          "The provided count of number of votes is incorrect."
        ]
      },
      {
        "name": "InvalidRenouncing",
        "doc": [
          "The renouncing origin presented a wrong `Renouncing` parameter."
        ]
      },
      {
        "name": "InvalidReplacement",
        "doc": [
          "Prediction regarding replacement after member removal is wrong."
        ]
      }
    ],
    "errors_value": {
      "type": 433
    },
    "index": 21
  },
  {
    "name": "Council",
    "prefix": "Council",
    "storage": [
      {
        "name": "Proposals",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<H256>",
          "PlainTypeValue": 434
        },
        "fallback": "0x00",
        "docs": [
          " The hashes of the active proposals."
        ]
      },
      {
        "name": "ProposalOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Call",
            "keys_id": 11,
            "value_id": 224
          }
        },
        "fallback": "0x00",
        "docs": [
          " Actual proposal for a given hash, if it's current."
        ]
      },
      {
        "name": "Voting",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "pallet_collective:Votes",
            "keys_id": 11,
            "value_id": 435
          }
        },
        "fallback": "0x00",
        "docs": [
          " Votes on a given proposal, if it is ongoing."
        ]
      },
      {
        "name": "ProposalCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Proposals so far."
        ]
      },
      {
        "name": "Members",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 182
        },
        "fallback": "0x00",
        "docs": [
          " The current members of the collective. This is stored sorted (just by value)."
        ]
      },
      {
        "name": "Prime",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "AccountId",
          "PlainTypeValue": 0
        },
        "fallback": "0x00",
        "docs": [
          " The prime member that helps determine the default vote behavior in case of absentations."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1700",
        "name": "set_members",
        "docs": [
          "Set the collective's membership.",
          "",
          "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
          "- `prime`: The prime member whose vote sets the default.",
          "- `old_count`: The upper bound for the previous number of members in storage. Used for",
          "  weight estimation.",
          "",
          "Requires root origin.",
          "",
          "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
          "      the weight estimations rely on it to estimate dispatchable weight.",
          "",
          "# WARNING:",
          "",
          "The `pallet-collective` can also be managed by logic outside of the pallet through the",
          "implementation of the trait [`ChangeMembers`].",
          "Any call to `set_members` must be careful that the member set doesn't get out of sync",
          "with other logic managing the member set.",
          "",
          "# <weight>",
          "## Weight",
          "- `O(MP + N)` where:",
          "  - `M` old-members-count (code- and governance-bounded)",
          "  - `N` new-members-count (code- and governance-bounded)",
          "  - `P` proposals-count (code-bounded)",
          "- DB:",
          "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
          "    members",
          "  - 1 storage read (codec `O(P)`) for reading the proposals",
          "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
          "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
          "# </weight>"
        ],
        "args": [
          {
            "name": "new_members",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "prime",
            "type": "option<AccountId>",
            "type_name": "Option<AccountId>"
          },
          {
            "name": "old_count",
            "type": "U32",
            "type_name": "MemberCount"
          }
        ]
      },
      {
        "lookup": "1701",
        "name": "execute",
        "docs": [
          "Dispatch a proposal from a member using the `Member` origin.",
          "",
          "Origin must be a member of the collective.",
          "",
          "# <weight>",
          "## Weight",
          "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
          "  `proposal`",
          "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
          "- 1 event",
          "# </weight>"
        ],
        "args": [
          {
            "name": "proposal",
            "type": "Call",
            "type_name": "Box<<T as Config<I>>::Proposal>"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1702",
        "name": "propose",
        "docs": [
          "Add a new proposal to either be voted on or executed directly.",
          "",
          "Requires the sender to be member.",
          "",
          "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
          "or put up for voting.",
          "",
          "# <weight>",
          "## Weight",
          "- `O(B + M + P1)` or `O(B + M + P2)` where:",
          "  - `B` is `proposal` size in bytes (length-fee-bounded)",
          "  - `M` is members-count (code- and governance-bounded)",
          "  - branching is influenced by `threshold` where:",
          "    - `P1` is proposal execution complexity (`threshold < 2`)",
          "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
          "- DB:",
          "  - 1 storage read `is_member` (codec `O(M)`)",
          "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
          "  - DB accesses influenced by `threshold`:",
          "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
          "    - OR proposal insertion (`threshold <= 2`)",
          "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
          "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
          "      - 1 storage write `ProposalOf` (codec `O(B)`)",
          "      - 1 storage write `Voting` (codec `O(M)`)",
          "  - 1 event",
          "# </weight>"
        ],
        "args": [
          {
            "name": "threshold",
            "type": "compact<U32>",
            "type_name": "MemberCount"
          },
          {
            "name": "proposal",
            "type": "Call",
            "type_name": "Box<<T as Config<I>>::Proposal>"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1703",
        "name": "vote",
        "docs": [
          "Add an aye or nay vote for the sender to the given proposal.",
          "",
          "Requires the sender to be a member.",
          "",
          "Transaction fees will be waived if the member is voting on any particular proposal",
          "for the first time and the call is successful. Subsequent vote changes will charge a",
          "fee.",
          "# <weight>",
          "## Weight",
          "- `O(M)` where `M` is members-count (code- and governance-bounded)",
          "- DB:",
          "  - 1 storage read `Members` (codec `O(M)`)",
          "  - 1 storage mutation `Voting` (codec `O(M)`)",
          "- 1 event",
          "# </weight>"
        ],
        "args": [
          {
            "name": "proposal",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          },
          {
            "name": "approve",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "1704",
        "name": "close_old_weight",
        "docs": [
          "Close a vote that is either approved, disapproved or whose voting period has ended.",
          "",
          "May be called by any signed account in order to finish voting and close the proposal.",
          "",
          "If called before the end of the voting period it will only close the vote if it is",
          "has enough votes to be approved or disapproved.",
          "",
          "If called after the end of the voting period abstentions are counted as rejections",
          "unless there is a prime member set and the prime member cast an approval.",
          "",
          "If the close operation completes successfully with disapproval, the transaction fee will",
          "be waived. Otherwise execution of the approved operation will be charged to the caller.",
          "",
          "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
          "proposal.",
          "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
          "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
          "",
          "# <weight>",
          "## Weight",
          "- `O(B + M + P1 + P2)` where:",
          "  - `B` is `proposal` size in bytes (length-fee-bounded)",
          "  - `M` is members-count (code- and governance-bounded)",
          "  - `P1` is the complexity of `proposal` preimage.",
          "  - `P2` is proposal-count (code-bounded)",
          "- DB:",
          " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
          " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
          "   `O(P2)`)",
          " - any mutations done while executing `proposal` (`P1`)",
          "- up to 3 events",
          "# </weight>"
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          },
          {
            "name": "proposal_weight_bound",
            "type": "compact<sp_weights:OldWeight>",
            "type_name": "OldWeight"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1705",
        "name": "disapprove_proposal",
        "docs": [
          "Disapprove a proposal, close, and remove it from the system, regardless of its current",
          "state.",
          "",
          "Must be called by the Root origin.",
          "",
          "Parameters:",
          "* `proposal_hash`: The hash of the proposal that should be disapproved.",
          "",
          "# <weight>",
          "Complexity: O(P) where P is the number of max proposals",
          "DB Weight:",
          "* Reads: Proposals",
          "* Writes: Voting, Proposals, ProposalOf",
          "# </weight>"
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "1706",
        "name": "close",
        "docs": [
          "Close a vote that is either approved, disapproved or whose voting period has ended.",
          "",
          "May be called by any signed account in order to finish voting and close the proposal.",
          "",
          "If called before the end of the voting period it will only close the vote if it is",
          "has enough votes to be approved or disapproved.",
          "",
          "If called after the end of the voting period abstentions are counted as rejections",
          "unless there is a prime member set and the prime member cast an approval.",
          "",
          "If the close operation completes successfully with disapproval, the transaction fee will",
          "be waived. Otherwise execution of the approved operation will be charged to the caller.",
          "",
          "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
          "proposal.",
          "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
          "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
          "",
          "# <weight>",
          "## Weight",
          "- `O(B + M + P1 + P2)` where:",
          "  - `B` is `proposal` size in bytes (length-fee-bounded)",
          "  - `M` is members-count (code- and governance-bounded)",
          "  - `P1` is the complexity of `proposal` preimage.",
          "  - `P2` is proposal-count (code-bounded)",
          "- DB:",
          " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
          " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
          "   `O(P2)`)",
          " - any mutations done while executing `proposal` (`P1`)",
          "- up to 3 events",
          "# </weight>"
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          },
          {
            "name": "proposal_weight_bound",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 272
    },
    "events": [
      {
        "lookup": "1700",
        "name": "Proposed",
        "docs": [
          "A motion (given hash) has been proposed (by given account) with a threshold (given",
          "`MemberCount`)."
        ],
        "args": [
          "AccountId",
          "U32",
          "H256",
          "U32"
        ],
        "args_name": [
          "account",
          "proposal_index",
          "proposal_hash",
          "threshold"
        ],
        "args_type_name": [
          "AccountId",
          "ProposalIndex",
          "Hash",
          "MemberCount"
        ]
      },
      {
        "lookup": "1701",
        "name": "Voted",
        "docs": [
          "A motion (given hash) has been voted on by given account, leaving",
          "a tally (yes votes and no votes given respectively as `MemberCount`)."
        ],
        "args": [
          "AccountId",
          "H256",
          "Bool",
          "U32",
          "U32"
        ],
        "args_name": [
          "account",
          "proposal_hash",
          "voted",
          "yes",
          "no"
        ],
        "args_type_name": [
          "AccountId",
          "Hash",
          "bool",
          "MemberCount",
          "MemberCount"
        ]
      },
      {
        "lookup": "1702",
        "name": "Approved",
        "docs": [
          "A motion was approved by the required threshold."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "proposal_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1703",
        "name": "Disapproved",
        "docs": [
          "A motion was not approved by the required threshold."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "proposal_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1704",
        "name": "Executed",
        "docs": [
          "A motion was executed; result will be `Ok` if it returned without error."
        ],
        "args": [
          "H256",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "proposal_hash",
          "result"
        ],
        "args_type_name": [
          "Hash",
          "DispatchResult"
        ]
      },
      {
        "lookup": "1705",
        "name": "MemberExecuted",
        "docs": [
          "A single member did some action; result will be `Ok` if it returned without error."
        ],
        "args": [
          "H256",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "proposal_hash",
          "result"
        ],
        "args_type_name": [
          "Hash",
          "DispatchResult"
        ]
      },
      {
        "lookup": "1706",
        "name": "Closed",
        "docs": [
          "A proposal was closed because its threshold was reached or after its duration was up."
        ],
        "args": [
          "H256",
          "U32",
          "U32"
        ],
        "args_name": [
          "proposal_hash",
          "yes",
          "no"
        ],
        "args_type_name": [
          "Hash",
          "MemberCount",
          "MemberCount"
        ]
      }
    ],
    "events_value": {
      "type": 45
    },
    "errors": [
      {
        "name": "NotMember",
        "doc": [
          "Account is not a member"
        ]
      },
      {
        "name": "DuplicateProposal",
        "doc": [
          "Duplicate proposals not allowed"
        ]
      },
      {
        "name": "ProposalMissing",
        "doc": [
          "Proposal must exist"
        ]
      },
      {
        "name": "WrongIndex",
        "doc": [
          "Mismatched index"
        ]
      },
      {
        "name": "DuplicateVote",
        "doc": [
          "Duplicate vote ignored"
        ]
      },
      {
        "name": "AlreadyInitialized",
        "doc": [
          "Members are already initialized!"
        ]
      },
      {
        "name": "TooEarly",
        "doc": [
          "The close call was made too early, before the end of the voting."
        ]
      },
      {
        "name": "TooManyProposals",
        "doc": [
          "There can only be a maximum of `MaxProposals` active proposals."
        ]
      },
      {
        "name": "WrongProposalWeight",
        "doc": [
          "The given weight bound for the proposal was too low."
        ]
      },
      {
        "name": "WrongProposalLength",
        "doc": [
          "The given length bound for the proposal was too low."
        ]
      }
    ],
    "errors_value": {
      "type": 436
    },
    "index": 23
  },
  {
    "name": "TechnicalCommittee",
    "prefix": "TechnicalCommittee",
    "storage": [
      {
        "name": "Proposals",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<H256>",
          "PlainTypeValue": 437
        },
        "fallback": "0x00",
        "docs": [
          " The hashes of the active proposals."
        ]
      },
      {
        "name": "ProposalOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Call",
            "keys_id": 11,
            "value_id": 224
          }
        },
        "fallback": "0x00",
        "docs": [
          " Actual proposal for a given hash, if it's current."
        ]
      },
      {
        "name": "Voting",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "pallet_collective:Votes",
            "keys_id": 11,
            "value_id": 435
          }
        },
        "fallback": "0x00",
        "docs": [
          " Votes on a given proposal, if it is ongoing."
        ]
      },
      {
        "name": "ProposalCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Proposals so far."
        ]
      },
      {
        "name": "Members",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 182
        },
        "fallback": "0x00",
        "docs": [
          " The current members of the collective. This is stored sorted (just by value)."
        ]
      },
      {
        "name": "Prime",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "AccountId",
          "PlainTypeValue": 0
        },
        "fallback": "0x00",
        "docs": [
          " The prime member that helps determine the default vote behavior in case of absentations."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1900",
        "name": "set_members",
        "docs": [
          "Set the collective's membership.",
          "",
          "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
          "- `prime`: The prime member whose vote sets the default.",
          "- `old_count`: The upper bound for the previous number of members in storage. Used for",
          "  weight estimation.",
          "",
          "Requires root origin.",
          "",
          "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
          "      the weight estimations rely on it to estimate dispatchable weight.",
          "",
          "# WARNING:",
          "",
          "The `pallet-collective` can also be managed by logic outside of the pallet through the",
          "implementation of the trait [`ChangeMembers`].",
          "Any call to `set_members` must be careful that the member set doesn't get out of sync",
          "with other logic managing the member set.",
          "",
          "# <weight>",
          "## Weight",
          "- `O(MP + N)` where:",
          "  - `M` old-members-count (code- and governance-bounded)",
          "  - `N` new-members-count (code- and governance-bounded)",
          "  - `P` proposals-count (code-bounded)",
          "- DB:",
          "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
          "    members",
          "  - 1 storage read (codec `O(P)`) for reading the proposals",
          "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
          "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
          "# </weight>"
        ],
        "args": [
          {
            "name": "new_members",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "prime",
            "type": "option<AccountId>",
            "type_name": "Option<AccountId>"
          },
          {
            "name": "old_count",
            "type": "U32",
            "type_name": "MemberCount"
          }
        ]
      },
      {
        "lookup": "1901",
        "name": "execute",
        "docs": [
          "Dispatch a proposal from a member using the `Member` origin.",
          "",
          "Origin must be a member of the collective.",
          "",
          "# <weight>",
          "## Weight",
          "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
          "  `proposal`",
          "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
          "- 1 event",
          "# </weight>"
        ],
        "args": [
          {
            "name": "proposal",
            "type": "Call",
            "type_name": "Box<<T as Config<I>>::Proposal>"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1902",
        "name": "propose",
        "docs": [
          "Add a new proposal to either be voted on or executed directly.",
          "",
          "Requires the sender to be member.",
          "",
          "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
          "or put up for voting.",
          "",
          "# <weight>",
          "## Weight",
          "- `O(B + M + P1)` or `O(B + M + P2)` where:",
          "  - `B` is `proposal` size in bytes (length-fee-bounded)",
          "  - `M` is members-count (code- and governance-bounded)",
          "  - branching is influenced by `threshold` where:",
          "    - `P1` is proposal execution complexity (`threshold < 2`)",
          "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
          "- DB:",
          "  - 1 storage read `is_member` (codec `O(M)`)",
          "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
          "  - DB accesses influenced by `threshold`:",
          "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
          "    - OR proposal insertion (`threshold <= 2`)",
          "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
          "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
          "      - 1 storage write `ProposalOf` (codec `O(B)`)",
          "      - 1 storage write `Voting` (codec `O(M)`)",
          "  - 1 event",
          "# </weight>"
        ],
        "args": [
          {
            "name": "threshold",
            "type": "compact<U32>",
            "type_name": "MemberCount"
          },
          {
            "name": "proposal",
            "type": "Call",
            "type_name": "Box<<T as Config<I>>::Proposal>"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1903",
        "name": "vote",
        "docs": [
          "Add an aye or nay vote for the sender to the given proposal.",
          "",
          "Requires the sender to be a member.",
          "",
          "Transaction fees will be waived if the member is voting on any particular proposal",
          "for the first time and the call is successful. Subsequent vote changes will charge a",
          "fee.",
          "# <weight>",
          "## Weight",
          "- `O(M)` where `M` is members-count (code- and governance-bounded)",
          "- DB:",
          "  - 1 storage read `Members` (codec `O(M)`)",
          "  - 1 storage mutation `Voting` (codec `O(M)`)",
          "- 1 event",
          "# </weight>"
        ],
        "args": [
          {
            "name": "proposal",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          },
          {
            "name": "approve",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "1904",
        "name": "close_old_weight",
        "docs": [
          "Close a vote that is either approved, disapproved or whose voting period has ended.",
          "",
          "May be called by any signed account in order to finish voting and close the proposal.",
          "",
          "If called before the end of the voting period it will only close the vote if it is",
          "has enough votes to be approved or disapproved.",
          "",
          "If called after the end of the voting period abstentions are counted as rejections",
          "unless there is a prime member set and the prime member cast an approval.",
          "",
          "If the close operation completes successfully with disapproval, the transaction fee will",
          "be waived. Otherwise execution of the approved operation will be charged to the caller.",
          "",
          "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
          "proposal.",
          "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
          "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
          "",
          "# <weight>",
          "## Weight",
          "- `O(B + M + P1 + P2)` where:",
          "  - `B` is `proposal` size in bytes (length-fee-bounded)",
          "  - `M` is members-count (code- and governance-bounded)",
          "  - `P1` is the complexity of `proposal` preimage.",
          "  - `P2` is proposal-count (code-bounded)",
          "- DB:",
          " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
          " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
          "   `O(P2)`)",
          " - any mutations done while executing `proposal` (`P1`)",
          "- up to 3 events",
          "# </weight>"
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          },
          {
            "name": "proposal_weight_bound",
            "type": "compact<sp_weights:OldWeight>",
            "type_name": "OldWeight"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1905",
        "name": "disapprove_proposal",
        "docs": [
          "Disapprove a proposal, close, and remove it from the system, regardless of its current",
          "state.",
          "",
          "Must be called by the Root origin.",
          "",
          "Parameters:",
          "* `proposal_hash`: The hash of the proposal that should be disapproved.",
          "",
          "# <weight>",
          "Complexity: O(P) where P is the number of max proposals",
          "DB Weight:",
          "* Reads: Proposals",
          "* Writes: Voting, Proposals, ProposalOf",
          "# </weight>"
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "1906",
        "name": "close",
        "docs": [
          "Close a vote that is either approved, disapproved or whose voting period has ended.",
          "",
          "May be called by any signed account in order to finish voting and close the proposal.",
          "",
          "If called before the end of the voting period it will only close the vote if it is",
          "has enough votes to be approved or disapproved.",
          "",
          "If called after the end of the voting period abstentions are counted as rejections",
          "unless there is a prime member set and the prime member cast an approval.",
          "",
          "If the close operation completes successfully with disapproval, the transaction fee will",
          "be waived. Otherwise execution of the approved operation will be charged to the caller.",
          "",
          "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
          "proposal.",
          "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
          "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
          "",
          "# <weight>",
          "## Weight",
          "- `O(B + M + P1 + P2)` where:",
          "  - `B` is `proposal` size in bytes (length-fee-bounded)",
          "  - `M` is members-count (code- and governance-bounded)",
          "  - `P1` is the complexity of `proposal` preimage.",
          "  - `P2` is proposal-count (code-bounded)",
          "- DB:",
          " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
          " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
          "   `O(P2)`)",
          " - any mutations done while executing `proposal` (`P1`)",
          "- up to 3 events",
          "# </weight>"
        ],
        "args": [
          {
            "name": "proposal_hash",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "index",
            "type": "compact<U32>",
            "type_name": "ProposalIndex"
          },
          {
            "name": "proposal_weight_bound",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          },
          {
            "name": "length_bound",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 275
    },
    "events": [
      {
        "lookup": "1900",
        "name": "Proposed",
        "docs": [
          "A motion (given hash) has been proposed (by given account) with a threshold (given",
          "`MemberCount`)."
        ],
        "args": [
          "AccountId",
          "U32",
          "H256",
          "U32"
        ],
        "args_name": [
          "account",
          "proposal_index",
          "proposal_hash",
          "threshold"
        ],
        "args_type_name": [
          "AccountId",
          "ProposalIndex",
          "Hash",
          "MemberCount"
        ]
      },
      {
        "lookup": "1901",
        "name": "Voted",
        "docs": [
          "A motion (given hash) has been voted on by given account, leaving",
          "a tally (yes votes and no votes given respectively as `MemberCount`)."
        ],
        "args": [
          "AccountId",
          "H256",
          "Bool",
          "U32",
          "U32"
        ],
        "args_name": [
          "account",
          "proposal_hash",
          "voted",
          "yes",
          "no"
        ],
        "args_type_name": [
          "AccountId",
          "Hash",
          "bool",
          "MemberCount",
          "MemberCount"
        ]
      },
      {
        "lookup": "1902",
        "name": "Approved",
        "docs": [
          "A motion was approved by the required threshold."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "proposal_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1903",
        "name": "Disapproved",
        "docs": [
          "A motion was not approved by the required threshold."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "proposal_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1904",
        "name": "Executed",
        "docs": [
          "A motion was executed; result will be `Ok` if it returned without error."
        ],
        "args": [
          "H256",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "proposal_hash",
          "result"
        ],
        "args_type_name": [
          "Hash",
          "DispatchResult"
        ]
      },
      {
        "lookup": "1905",
        "name": "MemberExecuted",
        "docs": [
          "A single member did some action; result will be `Ok` if it returned without error."
        ],
        "args": [
          "H256",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "proposal_hash",
          "result"
        ],
        "args_type_name": [
          "Hash",
          "DispatchResult"
        ]
      },
      {
        "lookup": "1906",
        "name": "Closed",
        "docs": [
          "A proposal was closed because its threshold was reached or after its duration was up."
        ],
        "args": [
          "H256",
          "U32",
          "U32"
        ],
        "args_name": [
          "proposal_hash",
          "yes",
          "no"
        ],
        "args_type_name": [
          "Hash",
          "MemberCount",
          "MemberCount"
        ]
      }
    ],
    "events_value": {
      "type": 47
    },
    "errors": [
      {
        "name": "NotMember",
        "doc": [
          "Account is not a member"
        ]
      },
      {
        "name": "DuplicateProposal",
        "doc": [
          "Duplicate proposals not allowed"
        ]
      },
      {
        "name": "ProposalMissing",
        "doc": [
          "Proposal must exist"
        ]
      },
      {
        "name": "WrongIndex",
        "doc": [
          "Mismatched index"
        ]
      },
      {
        "name": "DuplicateVote",
        "doc": [
          "Duplicate vote ignored"
        ]
      },
      {
        "name": "AlreadyInitialized",
        "doc": [
          "Members are already initialized!"
        ]
      },
      {
        "name": "TooEarly",
        "doc": [
          "The close call was made too early, before the end of the voting."
        ]
      },
      {
        "name": "TooManyProposals",
        "doc": [
          "There can only be a maximum of `MaxProposals` active proposals."
        ]
      },
      {
        "name": "WrongProposalWeight",
        "doc": [
          "The given weight bound for the proposal was too low."
        ]
      },
      {
        "name": "WrongProposalLength",
        "doc": [
          "The given length bound for the proposal was too low."
        ]
      }
    ],
    "errors_value": {
      "type": 438
    },
    "index": 25
  },
  {
    "name": "Tips",
    "prefix": "Tips",
    "storage": [
      {
        "name": "Tips",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "pallet_tips:OpenTip",
            "keys_id": 11,
            "value_id": 439
          }
        },
        "fallback": "0x00",
        "docs": [
          " TipsMap that are not yet completed. Keyed by the hash of `(reason, who)` from the value.",
          " This has the insecure enumerable hash function since the key itself is already",
          " guaranteed to be a secure hash."
        ]
      },
      {
        "name": "Reasons",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "Vec<U8>",
            "keys_id": 11,
            "value_id": 12
          }
        },
        "fallback": "0x00",
        "docs": [
          " Simple preimage lookup from the reason's hash to the original data. Again, has an",
          " insecure enumerable hash since the key is guaranteed to be the result of a secure hash."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1b00",
        "name": "report_awesome",
        "docs": [
          "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
          "`DataDepositPerByte` for each byte in `reason`.",
          "",
          "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
          "  a UTF-8-encoded URL.",
          "- `who`: The account which should be credited for the tip.",
          "",
          "Emits `NewTip` if successful.",
          "",
          "# <weight>",
          "- Complexity: `O(R)` where `R` length of `reason`.",
          "  - encoding and hashing of 'reason'",
          "- DbReads: `Reasons`, `Tips`",
          "- DbWrites: `Reasons`, `Tips`",
          "# </weight>"
        ],
        "args": [
          {
            "name": "reason",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "1b01",
        "name": "retract_tip",
        "docs": [
          "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
          "",
          "If successful, the original deposit will be unreserved.",
          "",
          "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
          "must have been reported by the signing account through `report_awesome` (and not",
          "through `tip_new`).",
          "",
          "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
          "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
          "",
          "Emits `TipRetracted` if successful.",
          "",
          "# <weight>",
          "- Complexity: `O(1)`",
          "  - Depends on the length of `T::Hash` which is fixed.",
          "- DbReads: `Tips`, `origin account`",
          "- DbWrites: `Reasons`, `Tips`, `origin account`",
          "# </weight>"
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "1b02",
        "name": "tip_new",
        "docs": [
          "Give a tip for something new; no finder's fee will be taken.",
          "",
          "The dispatch origin for this call must be _Signed_ and the signing account must be a",
          "member of the `Tippers` set.",
          "",
          "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
          "  a UTF-8-encoded URL.",
          "- `who`: The account which should be credited for the tip.",
          "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
          "  value of active tippers will be given to the `who`.",
          "",
          "Emits `NewTip` if successful.",
          "",
          "# <weight>",
          "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
          "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by",
          "    `ContainsLengthBound`. The actual cost depends on the implementation of",
          "    `T::Tippers`.",
          "  - `O(R)`: hashing and encoding of reason of length `R`",
          "- DbReads: `Tippers`, `Reasons`",
          "- DbWrites: `Reasons`, `Tips`",
          "# </weight>"
        ],
        "args": [
          {
            "name": "reason",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "tip_value",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1b03",
        "name": "tip",
        "docs": [
          "Declare a tip value for an already-open tip.",
          "",
          "The dispatch origin for this call must be _Signed_ and the signing account must be a",
          "member of the `Tippers` set.",
          "",
          "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
          "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
          "  account ID.",
          "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
          "  value of active tippers will be given to the `who`.",
          "",
          "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
          "has started.",
          "",
          "# <weight>",
          "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
          "  `T`, insert tip and check closing, `T` is charged as upper bound given by",
          "  `ContainsLengthBound`. The actual cost depends on the implementation of `T::Tippers`.",
          "",
          "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
          "  is weighted as if almost full i.e of length `T-1`.",
          "- DbReads: `Tippers`, `Tips`",
          "- DbWrites: `Tips`",
          "# </weight>"
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          },
          {
            "name": "tip_value",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "1b04",
        "name": "close_tip",
        "docs": [
          "Close and payout a tip.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "The tip identified by `hash` must have finished its countdown period.",
          "",
          "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
          "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
          "",
          "# <weight>",
          "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
          "  `T`. `T` is charged as upper bound given by `ContainsLengthBound`. The actual cost",
          "  depends on the implementation of `T::Tippers`.",
          "- DbReads: `Tips`, `Tippers`, `tip finder`",
          "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
          "# </weight>"
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "1b05",
        "name": "slash_tip",
        "docs": [
          "Remove and slash an already-open tip.",
          "",
          "May only be called from `T::RejectOrigin`.",
          "",
          "As a result, the finder is slashed and the deposits are lost.",
          "",
          "Emits `TipSlashed` if successful.",
          "",
          "# <weight>",
          "  `T` is charged as upper bound given by `ContainsLengthBound`.",
          "  The actual cost depends on the implementation of `T::Tippers`.",
          "# </weight>"
        ],
        "args": [
          {
            "name": "hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 276
    },
    "events": [
      {
        "lookup": "1b00",
        "name": "NewTip",
        "docs": [
          "A new tip suggestion has been opened."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "tip_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1b01",
        "name": "TipClosing",
        "docs": [
          "A tip suggestion has reached threshold and is closing."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "tip_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1b02",
        "name": "TipClosed",
        "docs": [
          "A tip suggestion has been closed."
        ],
        "args": [
          "H256",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "tip_hash",
          "who",
          "payout"
        ],
        "args_type_name": [
          "Hash",
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "1b03",
        "name": "TipRetracted",
        "docs": [
          "A tip suggestion has been retracted."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "tip_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "1b04",
        "name": "TipSlashed",
        "docs": [
          "A tip suggestion has been slashed."
        ],
        "args": [
          "H256",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "tip_hash",
          "finder",
          "deposit"
        ],
        "args_type_name": [
          "Hash",
          "AccountId",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 48
    },
    "constants": [
      {
        "name": "MaximumReasonLength",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00040000",
        "docs": [
          " Maximum acceptable reason length.",
          "",
          " Benchmarks depend on this value, be sure to update weights file when changing this value"
        ]
      },
      {
        "name": "DataDepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0010a5d4e80000000000000000000000",
        "docs": [
          " The amount held on deposit per byte within the tip report reason or bounty description."
        ]
      },
      {
        "name": "TipCountdown",
        "type": "U32",
        "type_value": 4,
        "constants_value": "58020000",
        "docs": [
          " The period for which a tip remains open after is has achieved threshold tippers."
        ]
      },
      {
        "name": "TipFindersFee",
        "type": "U8",
        "type_value": 440,
        "constants_value": "01",
        "docs": [
          " The percent of the final tip which goes to the original reporter of the tip."
        ]
      },
      {
        "name": "TipReportDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0080c6a47e8d03000000000000000000",
        "docs": [
          " The amount held on deposit for placing a tip report."
        ]
      }
    ],
    "errors": [
      {
        "name": "ReasonTooBig",
        "doc": [
          "The reason given is just too big."
        ]
      },
      {
        "name": "AlreadyKnown",
        "doc": [
          "The tip was already found/started."
        ]
      },
      {
        "name": "UnknownTip",
        "doc": [
          "The tip hash is unknown."
        ]
      },
      {
        "name": "NotFinder",
        "doc": [
          "The account attempting to retract the tip is not the finder of the tip."
        ]
      },
      {
        "name": "StillOpen",
        "doc": [
          "The tip cannot be claimed/closed because there are not enough tippers yet."
        ]
      },
      {
        "name": "Premature",
        "doc": [
          "The tip cannot be claimed/closed because it's still in the countdown period."
        ]
      }
    ],
    "errors_value": {
      "type": 441
    },
    "index": 27
  },
  {
    "name": "Proxy",
    "prefix": "Proxy",
    "storage": [
      {
        "name": "Proxies",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:Vec<pallet_proxy:ProxyDefinition>U128",
            "keys_id": 0,
            "value_id": 442
          }
        },
        "fallback": "0x0000000000000000000000000000000000",
        "docs": [
          " The set of account proxies. Maps the account which has delegated to the accounts",
          " which are being delegated to, together with the amount held on deposit."
        ]
      },
      {
        "name": "Announcements",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:Vec<pallet_proxy:Announcement>U128",
            "keys_id": 0,
            "value_id": 446
          }
        },
        "fallback": "0x0000000000000000000000000000000000",
        "docs": [
          " The announcements made by the proxy (key)."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1d00",
        "name": "proxy",
        "docs": [
          "Dispatch the given `call` from an account that the sender is authorised for through",
          "`add_proxy`.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `real`: The account that the proxy will make a call on behalf of.",
          "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
          "- `call`: The call to be made by the `real` account."
        ],
        "args": [
          {
            "name": "real",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "force_proxy_type",
            "type": "option<hydradx_runtime:system:ProxyType>",
            "type_name": "Option<ProxyType>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "1d01",
        "name": "add_proxy",
        "docs": [
          "Register a proxy account for the sender that is able to make calls on its behalf.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `proxy`: The account that the `caller` would like to make a proxy.",
          "- `proxy_type`: The permissions allowed for this proxy account.",
          "- `delay`: The announcement period required of the initial proxy. Will generally be",
          "zero."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "proxy_type",
            "type": "hydradx_runtime:system:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumber"
          }
        ]
      },
      {
        "lookup": "1d02",
        "name": "remove_proxy",
        "docs": [
          "Unregister a proxy account for the sender.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `proxy`: The account that the `caller` would like to remove as a proxy.",
          "- `proxy_type`: The permissions currently enabled for the removed proxy account."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "proxy_type",
            "type": "hydradx_runtime:system:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumber"
          }
        ]
      },
      {
        "lookup": "1d03",
        "name": "remove_proxies",
        "docs": [
          "Unregister all proxy accounts for the sender.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "WARNING: This may be called on accounts created by `pure`, however if done, then",
          "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
        ],
        "args": null
      },
      {
        "lookup": "1d04",
        "name": "create_pure",
        "docs": [
          "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
          "initialize it with a proxy of `proxy_type` for `origin` sender.",
          "",
          "Requires a `Signed` origin.",
          "",
          "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
          "new account. This will almost always be the most permissive `ProxyType` possible to",
          "allow for maximum flexibility.",
          "- `index`: A disambiguation index, in case this is called multiple times in the same",
          "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
          "want to use `0`.",
          "- `delay`: The announcement period required of the initial proxy. Will generally be",
          "zero.",
          "",
          "Fails with `Duplicate` if this has already been called in this transaction, from the",
          "same sender, with the same parameters.",
          "",
          "Fails if there are insufficient funds to pay for deposit."
        ],
        "args": [
          {
            "name": "proxy_type",
            "type": "hydradx_runtime:system:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "delay",
            "type": "U32",
            "type_name": "BlockNumber"
          },
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          }
        ]
      },
      {
        "lookup": "1d05",
        "name": "kill_pure",
        "docs": [
          "Removes a previously spawned pure proxy.",
          "",
          "WARNING: **All access to this account will be lost.** Any funds held in it will be",
          "inaccessible.",
          "",
          "Requires a `Signed` origin, and the sender account must have been created by a call to",
          "`pure` with corresponding parameters.",
          "",
          "- `spawner`: The account that originally called `pure` to create this account.",
          "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
          "- `proxy_type`: The proxy type originally passed to `pure`.",
          "- `height`: The height of the chain when the call to `pure` was processed.",
          "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
          "",
          "Fails with `NoPermission` in case the caller is not a previously created pure",
          "account whose `pure` call has corresponding parameters."
        ],
        "args": [
          {
            "name": "spawner",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "proxy_type",
            "type": "hydradx_runtime:system:ProxyType",
            "type_name": "ProxyType"
          },
          {
            "name": "index",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "height",
            "type": "compact<U32>",
            "type_name": "BlockNumber"
          },
          {
            "name": "ext_index",
            "type": "compact<U32>",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "1d06",
        "name": "announce",
        "docs": [
          "Publish the hash of a proxy-call that will be made in the future.",
          "",
          "This must be called some number of blocks before the corresponding `proxy` is attempted",
          "if the delay associated with the proxy relationship is greater than zero.",
          "",
          "No more than `MaxPending` announcements may be made at any one time.",
          "",
          "This will take a deposit of `AnnouncementDepositFactor` as well as",
          "`AnnouncementDepositBase` if there are no other pending announcements.",
          "",
          "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
          "",
          "Parameters:",
          "- `real`: The account that the proxy will make a call on behalf of.",
          "- `call_hash`: The hash of the call to be made by the `real` account."
        ],
        "args": [
          {
            "name": "real",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "1d07",
        "name": "remove_announcement",
        "docs": [
          "Remove a given announcement.",
          "",
          "May be called by a proxy account to remove a call they previously announced and return",
          "the deposit.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `real`: The account that the proxy will make a call on behalf of.",
          "- `call_hash`: The hash of the call to be made by the `real` account."
        ],
        "args": [
          {
            "name": "real",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "1d08",
        "name": "reject_announcement",
        "docs": [
          "Remove the given announcement of a delegate.",
          "",
          "May be called by a target (proxied) account to remove a call that one of their delegates",
          "(`delegate`) has announced they want to execute. The deposit is returned.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `delegate`: The account that previously announced the call.",
          "- `call_hash`: The hash of the call to be made."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "call_hash",
            "type": "H256",
            "type_name": "CallHashOf"
          }
        ]
      },
      {
        "lookup": "1d09",
        "name": "proxy_announced",
        "docs": [
          "Dispatch the given `call` from an account that the sender is authorized for through",
          "`add_proxy`.",
          "",
          "Removes any corresponding announcement(s).",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "Parameters:",
          "- `real`: The account that the proxy will make a call on behalf of.",
          "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
          "- `call`: The call to be made by the `real` account."
        ],
        "args": [
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "real",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "force_proxy_type",
            "type": "option<hydradx_runtime:system:ProxyType>",
            "type_name": "Option<ProxyType>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 277
    },
    "events": [
      {
        "lookup": "1d00",
        "name": "ProxyExecuted",
        "docs": [
          "A proxy was executed correctly, with the given."
        ],
        "args": [
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "result"
        ],
        "args_type_name": [
          "DispatchResult"
        ]
      },
      {
        "lookup": "1d01",
        "name": "PureCreated",
        "docs": [
          "A pure account has been created by new proxy with given",
          "disambiguation index and proxy type."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "hydradx_runtime:system:ProxyType",
          "U16"
        ],
        "args_name": [
          "pure",
          "who",
          "proxy_type",
          "disambiguation_index"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "u16"
        ]
      },
      {
        "lookup": "1d02",
        "name": "Announced",
        "docs": [
          "An announcement was placed to make a call in the future."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "H256"
        ],
        "args_name": [
          "real",
          "proxy",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "CallHashOf"
        ]
      },
      {
        "lookup": "1d03",
        "name": "ProxyAdded",
        "docs": [
          "A proxy was added."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "hydradx_runtime:system:ProxyType",
          "U32"
        ],
        "args_name": [
          "delegator",
          "delegatee",
          "proxy_type",
          "delay"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "BlockNumber"
        ]
      },
      {
        "lookup": "1d04",
        "name": "ProxyRemoved",
        "docs": [
          "A proxy was removed."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "hydradx_runtime:system:ProxyType",
          "U32"
        ],
        "args_name": [
          "delegator",
          "delegatee",
          "proxy_type",
          "delay"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "ProxyType",
          "BlockNumber"
        ]
      }
    ],
    "events_value": {
      "type": 49
    },
    "constants": [
      {
        "name": "ProxyDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e011021eb600000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating a proxy.",
          "",
          " This is held for an additional storage item whose value size is",
          " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."
        ]
      },
      {
        "name": "ProxyDepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "002c9980e60000000000000000000000",
        "docs": [
          " The amount of currency needed per proxy added.",
          "",
          " This is held for adding 32 bytes plus an instance of `ProxyType` more into a",
          " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take",
          " into account `32 + proxy_type.encode().len()` bytes of data."
        ]
      },
      {
        "name": "MaxProxies",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum amount of proxies allowed for a single account."
        ]
      },
      {
        "name": "MaxPending",
        "type": "U32",
        "type_value": 4,
        "constants_value": "20000000",
        "docs": [
          " The maximum amount of time-delayed announcements that are allowed to be pending."
        ]
      },
      {
        "name": "AnnouncementDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00e011021eb600000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating an announcement.",
          "",
          " This is held when a new storage item holding a `Balance` is created (typically 16",
          " bytes)."
        ]
      },
      {
        "name": "AnnouncementDepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00583201cd0100000000000000000000",
        "docs": [
          " The amount of currency needed per announcement made.",
          "",
          " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)",
          " into a pre-existing storage value."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooMany",
        "doc": [
          "There are too many proxies registered or too many announcements pending."
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Proxy registration not found."
        ]
      },
      {
        "name": "NotProxy",
        "doc": [
          "Sender is not a proxy of the account to be proxied."
        ]
      },
      {
        "name": "Unproxyable",
        "doc": [
          "A call which is incompatible with the proxy type's filter was attempted."
        ]
      },
      {
        "name": "Duplicate",
        "doc": [
          "Account is already a proxy."
        ]
      },
      {
        "name": "NoPermission",
        "doc": [
          "Call may not be made by proxy because it may escalate its privileges."
        ]
      },
      {
        "name": "Unannounced",
        "doc": [
          "Announcement, if made at all, was made too recently."
        ]
      },
      {
        "name": "NoSelfProxy",
        "doc": [
          "Cannot add self as proxy."
        ]
      }
    ],
    "errors_value": {
      "type": 450
    },
    "index": 29
  },
  {
    "name": "Multisig",
    "prefix": "Multisig",
    "storage": [
      {
        "name": "Multisigs",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "[U8; 32]"
            ],
            "value": "pallet_multisig:Multisig",
            "keys_id": 451,
            "value_id": 452
          }
        },
        "fallback": "0x00",
        "docs": [
          " The set of open multisig operations."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "1f00",
        "name": "as_multi_threshold_1",
        "docs": [
          "Immediately dispatch a multi-signature call using a single approval from the caller.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `other_signatories`: The accounts (other than the sender) who are part of the",
          "multi-signature, but do not participate in the approval process.",
          "- `call`: The call to be executed.",
          "",
          "Result is equivalent to the dispatched result.",
          "",
          "# <weight>",
          "O(Z + C) where Z is the length of the call and C its execution weight.",
          "-------------------------------",
          "- DB Weight: None",
          "- Plus Call Weight",
          "# </weight>"
        ],
        "args": [
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "1f01",
        "name": "as_multi",
        "docs": [
          "Register approval for a dispatch to be made from a deterministic composite account if",
          "approved by a total of `threshold - 1` of `other_signatories`.",
          "",
          "If there are enough, then dispatch the call.",
          "",
          "Payment: `DepositBase` will be reserved if this is the first approval, plus",
          "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
          "is cancelled.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `threshold`: The total number of approvals for this dispatch before it is executed.",
          "- `other_signatories`: The accounts (other than the sender) who can approve this",
          "dispatch. May not be empty.",
          "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
          "not the first approval, then it must be `Some`, with the timepoint (block number and",
          "transaction index) of the first approval transaction.",
          "- `call`: The call to be executed.",
          "",
          "NOTE: Unless this is the final approval, you will generally want to use",
          "`approve_as_multi` instead, since it only requires a hash of the call.",
          "",
          "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
          "on success, result is `Ok` and the result from the interior call, if it was executed,",
          "may be found in the deposited `MultisigExecuted` event.",
          "",
          "# <weight>",
          "- `O(S + Z + Call)`.",
          "- Up to one balance-reserve or unreserve operation.",
          "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
          "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
          "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
          "- One encode & hash, both of complexity `O(S)`.",
          "- Up to one binary search and insert (`O(logS + S)`).",
          "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
          "- One event.",
          "- The weight of the `call`.",
          "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
          "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
          "-------------------------------",
          "- DB Weight:",
          "    - Reads: Multisig Storage, [Caller Account]",
          "    - Writes: Multisig Storage, [Caller Account]",
          "- Plus Call Weight",
          "# </weight>"
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "maybe_timepoint",
            "type": "option<pallet_multisig:Timepoint>",
            "type_name": "Option<Timepoint<BlockNumber>>"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          },
          {
            "name": "max_weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "1f02",
        "name": "approve_as_multi",
        "docs": [
          "Register approval for a dispatch to be made from a deterministic composite account if",
          "approved by a total of `threshold - 1` of `other_signatories`.",
          "",
          "Payment: `DepositBase` will be reserved if this is the first approval, plus",
          "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
          "is cancelled.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `threshold`: The total number of approvals for this dispatch before it is executed.",
          "- `other_signatories`: The accounts (other than the sender) who can approve this",
          "dispatch. May not be empty.",
          "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
          "not the first approval, then it must be `Some`, with the timepoint (block number and",
          "transaction index) of the first approval transaction.",
          "- `call_hash`: The hash of the call to be executed.",
          "",
          "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
          "",
          "# <weight>",
          "- `O(S)`.",
          "- Up to one balance-reserve or unreserve operation.",
          "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
          "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
          "- One encode & hash, both of complexity `O(S)`.",
          "- Up to one binary search and insert (`O(logS + S)`).",
          "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
          "- One event.",
          "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
          "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
          "----------------------------------",
          "- DB Weight:",
          "    - Read: Multisig Storage, [Caller Account]",
          "    - Write: Multisig Storage, [Caller Account]",
          "# </weight>"
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "maybe_timepoint",
            "type": "option<pallet_multisig:Timepoint>",
            "type_name": "Option<Timepoint<BlockNumber>>"
          },
          {
            "name": "call_hash",
            "type": "[U8; 32]",
            "type_name": "[u8; 32]"
          },
          {
            "name": "max_weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "1f03",
        "name": "cancel_as_multi",
        "docs": [
          "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
          "for this operation will be unreserved on success.",
          "",
          "The dispatch origin for this call must be _Signed_.",
          "",
          "- `threshold`: The total number of approvals for this dispatch before it is executed.",
          "- `other_signatories`: The accounts (other than the sender) who can approve this",
          "dispatch. May not be empty.",
          "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
          "transaction for this dispatch.",
          "- `call_hash`: The hash of the call to be executed.",
          "",
          "# <weight>",
          "- `O(S)`.",
          "- Up to one balance-reserve or unreserve operation.",
          "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
          "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
          "- One encode & hash, both of complexity `O(S)`.",
          "- One event.",
          "- I/O: 1 read `O(S)`, one remove.",
          "- Storage: removes one item.",
          "----------------------------------",
          "- DB Weight:",
          "    - Read: Multisig Storage, [Caller Account], Refund Account",
          "    - Write: Multisig Storage, [Caller Account], Refund Account",
          "# </weight>"
        ],
        "args": [
          {
            "name": "threshold",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "other_signatories",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          },
          {
            "name": "timepoint",
            "type": "pallet_multisig:Timepoint",
            "type_name": "Timepoint<BlockNumber>"
          },
          {
            "name": "call_hash",
            "type": "[U8; 32]",
            "type_name": "[u8; 32]"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 279
    },
    "events": [
      {
        "lookup": "1f00",
        "name": "NewMultisig",
        "docs": [
          "A new multisig operation has begun."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "approving",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "CallHash"
        ]
      },
      {
        "lookup": "1f01",
        "name": "MultisigApproval",
        "docs": [
          "A multisig operation has been approved by someone."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "approving",
          "timepoint",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumber>",
          "AccountId",
          "CallHash"
        ]
      },
      {
        "lookup": "1f02",
        "name": "MultisigExecuted",
        "docs": [
          "A multisig operation has been executed."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "approving",
          "timepoint",
          "multisig",
          "call_hash",
          "result"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumber>",
          "AccountId",
          "CallHash",
          "DispatchResult"
        ]
      },
      {
        "lookup": "1f03",
        "name": "MultisigCancelled",
        "docs": [
          "A multisig operation has been cancelled."
        ],
        "args": [
          "AccountId",
          "pallet_multisig:Timepoint",
          "AccountId",
          "[U8; 32]"
        ],
        "args_name": [
          "cancelling",
          "timepoint",
          "multisig",
          "call_hash"
        ],
        "args_type_name": [
          "AccountId",
          "Timepoint<BlockNumber>",
          "AccountId",
          "CallHash"
        ]
      }
    ],
    "events_value": {
      "type": 52
    },
    "constants": [
      {
        "name": "DepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00a037cd4cb800000000000000000000",
        "docs": [
          " The base amount of currency needed to reserve for creating a multisig execution or to",
          " store a dispatch call for later.",
          "",
          " This is held for an additional storage item whose value size is",
          " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
          " `32 + sizeof(AccountId)` bytes."
        ]
      },
      {
        "name": "DepositFactor",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00807584df0000000000000000000000",
        "docs": [
          " The amount of currency needed per unit threshold when creating a multisig execution.",
          "",
          " This is held for adding 32 bytes more into a pre-existing storage value."
        ]
      },
      {
        "name": "MaxSignatories",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " The maximum amount of signatories allowed in the multisig."
        ]
      }
    ],
    "errors": [
      {
        "name": "MinimumThreshold",
        "doc": [
          "Threshold must be 2 or greater."
        ]
      },
      {
        "name": "AlreadyApproved",
        "doc": [
          "Call is already approved by this signatory."
        ]
      },
      {
        "name": "NoApprovalsNeeded",
        "doc": [
          "Call doesn't need any (more) approvals."
        ]
      },
      {
        "name": "TooFewSignatories",
        "doc": [
          "There are too few signatories in the list."
        ]
      },
      {
        "name": "TooManySignatories",
        "doc": [
          "There are too many signatories in the list."
        ]
      },
      {
        "name": "SignatoriesOutOfOrder",
        "doc": [
          "The signatories were provided out of order; they should be ordered."
        ]
      },
      {
        "name": "SenderInSignatories",
        "doc": [
          "The sender was contained in the other signatories; it shouldn't be."
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Multisig operation not found when attempting to cancel."
        ]
      },
      {
        "name": "NotOwner",
        "doc": [
          "Only the account that originally created the multisig is able to cancel it."
        ]
      },
      {
        "name": "NoTimepoint",
        "doc": [
          "No timepoint was given, yet the multisig operation is already underway."
        ]
      },
      {
        "name": "WrongTimepoint",
        "doc": [
          "A different timepoint was given to the multisig operation that is underway."
        ]
      },
      {
        "name": "UnexpectedTimepoint",
        "doc": [
          "A timepoint was given, yet no multisig operation is underway."
        ]
      },
      {
        "name": "MaxWeightTooLow",
        "doc": [
          "The maximum weight information provided was too low."
        ]
      },
      {
        "name": "AlreadyStored",
        "doc": [
          "The data to be stored is already stored."
        ]
      }
    ],
    "errors_value": {
      "type": 454
    },
    "index": 31
  },
  {
    "name": "Uniques",
    "prefix": "Uniques",
    "storage": [
      {
        "name": "Class",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "pallet_uniques:types:CollectionDetails",
            "keys_id": 6,
            "value_id": 455
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of a collection."
        ]
      },
      {
        "name": "OwnershipAcceptance",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U128",
            "keys_id": 0,
            "value_id": 6
          }
        },
        "fallback": "0x00",
        "docs": [
          " The collection, if any, of which an account is willing to take ownership."
        ]
      },
      {
        "name": "Account",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U128",
              "U128"
            ],
            "value": "NULL",
            "keys_id": 456,
            "value_id": 35
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items held by any given account; set out this way so that items owned by a single",
          " account can be enumerated."
        ]
      },
      {
        "name": "ClassAccount",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U128"
            ],
            "value": "NULL",
            "keys_id": 44,
            "value_id": 35
          }
        },
        "fallback": "0x00",
        "docs": [
          " The collections owned by any given account; set out this way so that collections owned by",
          " a single account can be enumerated."
        ]
      },
      {
        "name": "Asset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128",
              "U128"
            ],
            "value": "pallet_uniques:types:ItemDetails",
            "keys_id": 292,
            "value_id": 457
          }
        },
        "fallback": "0x00",
        "docs": [
          " The items in existence and their ownership details."
        ]
      },
      {
        "name": "ClassMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "pallet_uniques:types:CollectionMetadata",
            "keys_id": 6,
            "value_id": 458
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of a collection."
        ]
      },
      {
        "name": "InstanceMetadataOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128",
              "U128"
            ],
            "value": "pallet_uniques:types:ItemMetadata",
            "keys_id": 292,
            "value_id": 459
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of an item."
        ]
      },
      {
        "name": "Attribute",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128",
              "option<U128>",
              "Vec<U8>"
            ],
            "value": "Tuple:Vec<U8>U128",
            "keys_id": 460,
            "value_id": 461
          }
        },
        "fallback": "0x00",
        "docs": [
          " Attributes of a collection."
        ]
      },
      {
        "name": "ItemPriceOf",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128",
              "U128"
            ],
            "value": "Tuple:U128option<AccountId>",
            "keys_id": 292,
            "value_id": 462
          }
        },
        "fallback": "0x00",
        "docs": [
          " Price of an asset instance."
        ]
      },
      {
        "name": "CollectionMaxSupply",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "U32",
            "keys_id": 6,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Keeps track of the number of items a collection might have."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "2000",
        "name": "create",
        "docs": [
          "Issue a new collection of non-fungible items from a public origin.",
          "",
          "This new collection has no items initially and its owner is the origin.",
          "",
          "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
          "",
          "`ItemDeposit` funds of sender are reserved.",
          "",
          "Parameters:",
          "- `collection`: The identifier of the new collection. This must not be currently in use.",
          "- `admin`: The admin of this collection. The admin is the initial address of each",
          "member of the collection's admin team.",
          "",
          "Emits `Created` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "admin",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "2001",
        "name": "force_create",
        "docs": [
          "Issue a new collection of non-fungible items from a privileged origin.",
          "",
          "This new collection has no items initially.",
          "",
          "The origin must conform to `ForceOrigin`.",
          "",
          "Unlike `create`, no funds are reserved.",
          "",
          "- `collection`: The identifier of the new item. This must not be currently in use.",
          "- `owner`: The owner of this collection of items. The owner has full superuser",
          "  permissions",
          "over this item, but may later change and configure the permissions using",
          "`transfer_ownership` and `set_team`.",
          "",
          "Emits `ForceCreated` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "owner",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "free_holding",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "2002",
        "name": "destroy",
        "docs": [
          "Destroy a collection of fungible items.",
          "",
          "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
          "owner of the `collection`.",
          "",
          "- `collection`: The identifier of the collection to be destroyed.",
          "- `witness`: Information on the items minted in the collection. This must be",
          "correct.",
          "",
          "Emits `Destroyed` event when successful.",
          "",
          "Weight: `O(n + m)` where:",
          "- `n = witness.items`",
          "- `m = witness.item_metadatas`",
          "- `a = witness.attributes`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "witness",
            "type": "pallet_uniques:types:DestroyWitness",
            "type_name": "DestroyWitness"
          }
        ]
      },
      {
        "lookup": "2003",
        "name": "mint",
        "docs": [
          "Mint an item of a particular collection.",
          "",
          "The origin must be Signed and the sender must be the Issuer of the `collection`.",
          "",
          "- `collection`: The collection of the item to be minted.",
          "- `item`: The item value of the item to be minted.",
          "- `beneficiary`: The initial owner of the minted item.",
          "",
          "Emits `Issued` event when successful.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "owner",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "2004",
        "name": "burn",
        "docs": [
          "Destroy a single item.",
          "",
          "Origin must be Signed and the signing account must be either:",
          "- the Admin of the `collection`;",
          "- the Owner of the `item`;",
          "",
          "- `collection`: The collection of the item to be burned.",
          "- `item`: The item of the item to be burned.",
          "- `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the",
          "  item is owned by this value.",
          "",
          "Emits `Burned` with the actual amount burned.",
          "",
          "Weight: `O(1)`",
          "Modes: `check_owner.is_some()`."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "check_owner",
            "type": "option<AccountId>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "2005",
        "name": "transfer",
        "docs": [
          "Move an item from the sender account to another.",
          "",
          "This resets the approved account of the item.",
          "",
          "Origin must be Signed and the signing account must be either:",
          "- the Admin of the `collection`;",
          "- the Owner of the `item`;",
          "- the approved delegate for the `item` (in this case, the approval is reset).",
          "",
          "Arguments:",
          "- `collection`: The collection of the item to be transferred.",
          "- `item`: The item of the item to be transferred.",
          "- `dest`: The account to receive ownership of the item.",
          "",
          "Emits `Transferred`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "2006",
        "name": "redeposit",
        "docs": [
          "Reevaluate the deposits on some items.",
          "",
          "Origin must be Signed and the sender should be the Owner of the `collection`.",
          "",
          "- `collection`: The collection to be frozen.",
          "- `items`: The items of the collection whose deposits will be reevaluated.",
          "",
          "NOTE: This exists as a best-effort function. Any items which are unknown or",
          "in the case that the owner account does not have reservable funds to pay for a",
          "deposit increase are ignored. Generally the owner isn't going to call this on items",
          "whose existing deposit is less than the refreshed deposit as it would only cost them,",
          "so it's of little consequence.",
          "",
          "It will still return an error in the case that the collection is unknown of the signer",
          "is not permitted to call it.",
          "",
          "Weight: `O(items.len())`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "items",
            "type": "Vec<U128>",
            "type_name": "Vec<ItemId>"
          }
        ]
      },
      {
        "lookup": "2007",
        "name": "freeze",
        "docs": [
          "Disallow further unprivileged transfer of an item.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the `collection`.",
          "",
          "- `collection`: The collection of the item to be frozen.",
          "- `item`: The item of the item to be frozen.",
          "",
          "Emits `Frozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "2008",
        "name": "thaw",
        "docs": [
          "Re-allow unprivileged transfer of an item.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the `collection`.",
          "",
          "- `collection`: The collection of the item to be thawed.",
          "- `item`: The item of the item to be thawed.",
          "",
          "Emits `Thawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "2009",
        "name": "freeze_collection",
        "docs": [
          "Disallow further unprivileged transfers for a whole collection.",
          "",
          "Origin must be Signed and the sender should be the Freezer of the `collection`.",
          "",
          "- `collection`: The collection to be frozen.",
          "",
          "Emits `CollectionFrozen`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "200a",
        "name": "thaw_collection",
        "docs": [
          "Re-allow unprivileged transfers for a whole collection.",
          "",
          "Origin must be Signed and the sender should be the Admin of the `collection`.",
          "",
          "- `collection`: The collection to be thawed.",
          "",
          "Emits `CollectionThawed`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "200b",
        "name": "transfer_ownership",
        "docs": [
          "Change the Owner of a collection.",
          "",
          "Origin must be Signed and the sender should be the Owner of the `collection`.",
          "",
          "- `collection`: The collection whose owner should be changed.",
          "- `owner`: The new Owner of this collection. They must have called",
          "  `set_accept_ownership` with `collection` in order for this operation to succeed.",
          "",
          "Emits `OwnerChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "owner",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "200c",
        "name": "set_team",
        "docs": [
          "Change the Issuer, Admin and Freezer of a collection.",
          "",
          "Origin must be Signed and the sender should be the Owner of the `collection`.",
          "",
          "- `collection`: The collection whose team should be changed.",
          "- `issuer`: The new Issuer of this collection.",
          "- `admin`: The new Admin of this collection.",
          "- `freezer`: The new Freezer of this collection.",
          "",
          "Emits `TeamChanged`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "issuer",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "200d",
        "name": "approve_transfer",
        "docs": [
          "Approve an item to be transferred by a delegated third-party account.",
          "",
          "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be",
          "either the owner of the `item` or the admin of the collection.",
          "",
          "- `collection`: The collection of the item to be approved for delegated transfer.",
          "- `item`: The item of the item to be approved for delegated transfer.",
          "- `delegate`: The account to delegate permission to transfer the item.",
          "",
          "Important NOTE: The `approved` account gets reset after each transfer.",
          "",
          "Emits `ApprovedTransfer` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "delegate",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          }
        ]
      },
      {
        "lookup": "200e",
        "name": "cancel_approval",
        "docs": [
          "Cancel the prior approval for the transfer of an item by a delegate.",
          "",
          "Origin must be either:",
          "- the `Force` origin;",
          "- `Signed` with the signer being the Admin of the `collection`;",
          "- `Signed` with the signer being the Owner of the `item`;",
          "",
          "Arguments:",
          "- `collection`: The collection of the item of whose approval will be cancelled.",
          "- `item`: The item of the item of whose approval will be cancelled.",
          "- `maybe_check_delegate`: If `Some` will ensure that the given account is the one to",
          "  which permission of transfer is delegated.",
          "",
          "Emits `ApprovalCancelled` on success.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "maybe_check_delegate",
            "type": "option<AccountId>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "200f",
        "name": "force_item_status",
        "docs": [
          "Alter the attributes of a given item.",
          "",
          "Origin must be `ForceOrigin`.",
          "",
          "- `collection`: The identifier of the item.",
          "- `owner`: The new Owner of this item.",
          "- `issuer`: The new Issuer of this item.",
          "- `admin`: The new Admin of this item.",
          "- `freezer`: The new Freezer of this item.",
          "- `free_holding`: Whether a deposit is taken for holding an item of this collection.",
          "- `is_frozen`: Whether this collection is frozen except for permissioned/admin",
          "instructions.",
          "",
          "Emits `ItemStatusChanged` with the identity of the item.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "owner",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "issuer",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "admin",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "freezer",
            "type": "AccountId",
            "type_name": "AccountIdLookupOf"
          },
          {
            "name": "free_holding",
            "type": "Bool",
            "type_name": "bool"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "2010",
        "name": "set_attribute",
        "docs": [
          "Set an attribute for a collection or item.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "`collection`.",
          "",
          "If the origin is Signed, then funds of signer are reserved according to the formula:",
          "`MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into",
          "account any already reserved funds.",
          "",
          "- `collection`: The identifier of the collection whose item's metadata to set.",
          "- `maybe_item`: The identifier of the item whose metadata to set.",
          "- `key`: The key of the attribute.",
          "- `value`: The value to which to set the attribute.",
          "",
          "Emits `AttributeSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U128>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          },
          {
            "name": "value",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, ValueLimit>"
          }
        ]
      },
      {
        "lookup": "2011",
        "name": "clear_attribute",
        "docs": [
          "Clear an attribute for a collection or item.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "`collection`.",
          "",
          "Any deposit is freed for the collection's owner.",
          "",
          "- `collection`: The identifier of the collection whose item's metadata to clear.",
          "- `maybe_item`: The identifier of the item whose metadata to clear.",
          "- `key`: The key of the attribute.",
          "",
          "Emits `AttributeCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "maybe_item",
            "type": "option<U128>",
            "type_name": "Option<ItemId>"
          },
          {
            "name": "key",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, KeyLimit>"
          }
        ]
      },
      {
        "lookup": "2012",
        "name": "set_metadata",
        "docs": [
          "Set the metadata for an item.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "`collection`.",
          "",
          "If the origin is Signed, then funds of signer are reserved according to the formula:",
          "`MetadataDepositBase + DepositPerByte * data.len` taking into",
          "account any already reserved funds.",
          "",
          "- `collection`: The identifier of the collection whose item's metadata to set.",
          "- `item`: The identifier of the item whose metadata to set.",
          "- `data`: The general information of this item. Limited in length by `StringLimit`.",
          "- `is_frozen`: Whether the metadata should be frozen against further changes.",
          "",
          "Emits `MetadataSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "2013",
        "name": "clear_metadata",
        "docs": [
          "Clear the metadata for an item.",
          "",
          "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
          "`item`.",
          "",
          "Any deposit is freed for the collection's owner.",
          "",
          "- `collection`: The identifier of the collection whose item's metadata to clear.",
          "- `item`: The identifier of the item whose metadata to clear.",
          "",
          "Emits `MetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          }
        ]
      },
      {
        "lookup": "2014",
        "name": "set_collection_metadata",
        "docs": [
          "Set the metadata for a collection.",
          "",
          "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
          "the `collection`.",
          "",
          "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
          "`MetadataDepositBase + DepositPerByte * data.len` taking into",
          "account any already reserved funds.",
          "",
          "- `collection`: The identifier of the item whose metadata to update.",
          "- `data`: The general information of this item. Limited in length by `StringLimit`.",
          "- `is_frozen`: Whether the metadata should be frozen against further changes.",
          "",
          "Emits `CollectionMetadataSet`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "data",
            "type": "Vec<U8>",
            "type_name": "BoundedVec<u8, StringLimit>"
          },
          {
            "name": "is_frozen",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "2015",
        "name": "clear_collection_metadata",
        "docs": [
          "Clear the metadata for a collection.",
          "",
          "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
          "the `collection`.",
          "",
          "Any deposit is freed for the collection's owner.",
          "",
          "- `collection`: The identifier of the collection whose metadata to clear.",
          "",
          "Emits `CollectionMetadataCleared`.",
          "",
          "Weight: `O(1)`"
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          }
        ]
      },
      {
        "lookup": "2016",
        "name": "set_accept_ownership",
        "docs": [
          "Set (or reset) the acceptance of ownership for a particular account.",
          "",
          "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a",
          "provider reference.",
          "",
          "- `maybe_collection`: The identifier of the collection whose ownership the signer is",
          "  willing to accept, or if `None`, an indication that the signer is willing to accept no",
          "  ownership transferal.",
          "",
          "Emits `OwnershipAcceptanceChanged`."
        ],
        "args": [
          {
            "name": "maybe_collection",
            "type": "option<U128>",
            "type_name": "Option<CollectionId>"
          }
        ]
      },
      {
        "lookup": "2017",
        "name": "set_collection_max_supply",
        "docs": [
          "Set the maximum amount of items a collection could have.",
          "",
          "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
          "the `collection`.",
          "",
          "Note: This function can only succeed once per collection.",
          "",
          "- `collection`: The identifier of the collection to change.",
          "- `max_supply`: The maximum amount of items a collection could have.",
          "",
          "Emits `CollectionMaxSupplySet` event when successful."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "max_supply",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "2018",
        "name": "set_price",
        "docs": [
          "Set (or reset) the price for an item.",
          "",
          "Origin must be Signed and must be the owner of the asset `item`.",
          "",
          "- `collection`: The collection of the item.",
          "- `item`: The item to set the price for.",
          "- `price`: The price for the item. Pass `None`, to reset the price.",
          "- `buyer`: Restricts the buy operation to a specific account.",
          "",
          "Emits `ItemPriceSet` on success if the price is not `None`.",
          "Emits `ItemPriceRemoved` on success if the price is `None`."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "price",
            "type": "option<U128>",
            "type_name": "Option<ItemPrice>"
          },
          {
            "name": "whitelisted_buyer",
            "type": "option<AccountId>",
            "type_name": "Option<AccountIdLookupOf>"
          }
        ]
      },
      {
        "lookup": "2019",
        "name": "buy_item",
        "docs": [
          "Allows to buy an item if it's up for sale.",
          "",
          "Origin must be Signed and must not be the owner of the `item`.",
          "",
          "- `collection`: The collection of the item.",
          "- `item`: The item the sender wants to buy.",
          "- `bid_price`: The price the sender is willing to pay.",
          "",
          "Emits `ItemBought` on success."
        ],
        "args": [
          {
            "name": "collection",
            "type": "U128",
            "type_name": "CollectionId"
          },
          {
            "name": "item",
            "type": "U128",
            "type_name": "ItemId"
          },
          {
            "name": "bid_price",
            "type": "U128",
            "type_name": "ItemPrice"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 281
    },
    "events": [
      {
        "lookup": "2000",
        "name": "Created",
        "docs": [
          "A `collection` was created."
        ],
        "args": [
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "creator",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "2001",
        "name": "ForceCreated",
        "docs": [
          "A `collection` was force-created."
        ],
        "args": [
          "U128",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId"
        ]
      },
      {
        "lookup": "2002",
        "name": "Destroyed",
        "docs": [
          "A `collection` was destroyed."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "2003",
        "name": "Issued",
        "docs": [
          "An `item` was issued."
        ],
        "args": [
          "U128",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "2004",
        "name": "Transferred",
        "docs": [
          "An `item` was transferred."
        ],
        "args": [
          "U128",
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "from",
          "to"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "2005",
        "name": "Burned",
        "docs": [
          "An `item` was destroyed."
        ],
        "args": [
          "U128",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "2006",
        "name": "Frozen",
        "docs": [
          "Some `item` was frozen."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "2007",
        "name": "Thawed",
        "docs": [
          "Some `item` was thawed."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "2008",
        "name": "CollectionFrozen",
        "docs": [
          "Some `collection` was frozen."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "2009",
        "name": "CollectionThawed",
        "docs": [
          "Some `collection` was thawed."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "200a",
        "name": "OwnerChanged",
        "docs": [
          "The owner changed."
        ],
        "args": [
          "U128",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "new_owner"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId"
        ]
      },
      {
        "lookup": "200b",
        "name": "TeamChanged",
        "docs": [
          "The management team changed."
        ],
        "args": [
          "U128",
          "AccountId",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "issuer",
          "admin",
          "freezer"
        ],
        "args_type_name": [
          "CollectionId",
          "AccountId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "200c",
        "name": "ApprovedTransfer",
        "docs": [
          "An `item` of a `collection` has been approved by the `owner` for transfer by",
          "a `delegate`."
        ],
        "args": [
          "U128",
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "200d",
        "name": "ApprovalCancelled",
        "docs": [
          "An approval for a `delegate` account to transfer the `item` of an item",
          "`collection` was cancelled by its `owner`."
        ],
        "args": [
          "U128",
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "owner",
          "delegate"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "AccountId",
          "AccountId"
        ]
      },
      {
        "lookup": "200e",
        "name": "ItemStatusChanged",
        "docs": [
          "A `collection` has had its attributes changed by the `Force` origin."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "200f",
        "name": "CollectionMetadataSet",
        "docs": [
          "New metadata has been set for a `collection`."
        ],
        "args": [
          "U128",
          "Vec<U8>",
          "Bool"
        ],
        "args_name": [
          "collection",
          "data",
          "is_frozen"
        ],
        "args_type_name": [
          "CollectionId",
          "BoundedVec<u8, StringLimit>",
          "bool"
        ]
      },
      {
        "lookup": "2010",
        "name": "CollectionMetadataCleared",
        "docs": [
          "Metadata has been cleared for a `collection`."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "collection"
        ],
        "args_type_name": [
          "CollectionId"
        ]
      },
      {
        "lookup": "2011",
        "name": "MetadataSet",
        "docs": [
          "New metadata has been set for an item."
        ],
        "args": [
          "U128",
          "U128",
          "Vec<U8>",
          "Bool"
        ],
        "args_name": [
          "collection",
          "item",
          "data",
          "is_frozen"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "BoundedVec<u8, StringLimit>",
          "bool"
        ]
      },
      {
        "lookup": "2012",
        "name": "MetadataCleared",
        "docs": [
          "Metadata has been cleared for an item."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "2013",
        "name": "Redeposited",
        "docs": [
          "Metadata has been cleared for an item."
        ],
        "args": [
          "U128",
          "Vec<U128>"
        ],
        "args_name": [
          "collection",
          "successful_items"
        ],
        "args_type_name": [
          "CollectionId",
          "Vec<ItemId>"
        ]
      },
      {
        "lookup": "2014",
        "name": "AttributeSet",
        "docs": [
          "New attribute metadata has been set for a `collection` or `item`."
        ],
        "args": [
          "U128",
          "option<U128>",
          "Vec<U8>",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "maybe_item",
          "key",
          "value"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "BoundedVec<u8, KeyLimit>",
          "BoundedVec<u8, ValueLimit>"
        ]
      },
      {
        "lookup": "2015",
        "name": "AttributeCleared",
        "docs": [
          "Attribute metadata has been cleared for a `collection` or `item`."
        ],
        "args": [
          "U128",
          "option<U128>",
          "Vec<U8>"
        ],
        "args_name": [
          "collection",
          "maybe_item",
          "key"
        ],
        "args_type_name": [
          "CollectionId",
          "Option<ItemId>",
          "BoundedVec<u8, KeyLimit>"
        ]
      },
      {
        "lookup": "2016",
        "name": "OwnershipAcceptanceChanged",
        "docs": [
          "Ownership acceptance has changed for an account."
        ],
        "args": [
          "AccountId",
          "option<U128>"
        ],
        "args_name": [
          "who",
          "maybe_collection"
        ],
        "args_type_name": [
          "AccountId",
          "Option<CollectionId>"
        ]
      },
      {
        "lookup": "2017",
        "name": "CollectionMaxSupplySet",
        "docs": [
          "Max supply has been set for a collection."
        ],
        "args": [
          "U128",
          "U32"
        ],
        "args_name": [
          "collection",
          "max_supply"
        ],
        "args_type_name": [
          "CollectionId",
          "u32"
        ]
      },
      {
        "lookup": "2018",
        "name": "ItemPriceSet",
        "docs": [
          "The price was set for the instance."
        ],
        "args": [
          "U128",
          "U128",
          "U128",
          "option<AccountId>"
        ],
        "args_name": [
          "collection",
          "item",
          "price",
          "whitelisted_buyer"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "ItemPrice",
          "Option<AccountId>"
        ]
      },
      {
        "lookup": "2019",
        "name": "ItemPriceRemoved",
        "docs": [
          "The price for the instance was removed."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "collection",
          "item"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId"
        ]
      },
      {
        "lookup": "201a",
        "name": "ItemBought",
        "docs": [
          "An item was bought."
        ],
        "args": [
          "U128",
          "U128",
          "U128",
          "AccountId",
          "AccountId"
        ],
        "args_name": [
          "collection",
          "item",
          "price",
          "seller",
          "buyer"
        ],
        "args_type_name": [
          "CollectionId",
          "ItemId",
          "ItemPrice",
          "AccountId",
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 54
    },
    "constants": [
      {
        "name": "CollectionDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00000000000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for collection."
        ]
      },
      {
        "name": "ItemDeposit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00000000000000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved for an item."
        ]
      },
      {
        "name": "MetadataDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0080c6a47e8d03000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding metadata to your item."
        ]
      },
      {
        "name": "AttributeDepositBase",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0010a5d4e80000000000000000000000",
        "docs": [
          " The basic amount of funds that must be reserved when adding an attribute to an item."
        ]
      },
      {
        "name": "DepositPerByte",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0010a5d4e80000000000000000000000",
        "docs": [
          " The additional funds that must be reserved for the number of bytes store in metadata,",
          " either \"normal\" metadata or attribute metadata."
        ]
      },
      {
        "name": "StringLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "48000000",
        "docs": [
          " The maximum length of data stored on-chain."
        ]
      },
      {
        "name": "KeyLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00010000",
        "docs": [
          " The maximum length of an attribute key."
        ]
      },
      {
        "name": "ValueLimit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00040000",
        "docs": [
          " The maximum length of an attribute value."
        ]
      }
    ],
    "errors": [
      {
        "name": "NoPermission",
        "doc": [
          "The signing account has no permission to do the operation."
        ]
      },
      {
        "name": "UnknownCollection",
        "doc": [
          "The given item ID is unknown."
        ]
      },
      {
        "name": "AlreadyExists",
        "doc": [
          "The item ID has already been used for an item."
        ]
      },
      {
        "name": "WrongOwner",
        "doc": [
          "The owner turned out to be different to what was expected."
        ]
      },
      {
        "name": "BadWitness",
        "doc": [
          "Invalid witness data given."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The item ID is already taken."
        ]
      },
      {
        "name": "Frozen",
        "doc": [
          "The item or collection is frozen."
        ]
      },
      {
        "name": "WrongDelegate",
        "doc": [
          "The delegate turned out to be different to what was expected."
        ]
      },
      {
        "name": "NoDelegate",
        "doc": [
          "There is no delegate approved."
        ]
      },
      {
        "name": "Unapproved",
        "doc": [
          "No approval exists that would allow the transfer."
        ]
      },
      {
        "name": "Unaccepted",
        "doc": [
          "The named owner has not signed ownership of the collection is acceptable."
        ]
      },
      {
        "name": "Locked",
        "doc": [
          "The item is locked."
        ]
      },
      {
        "name": "MaxSupplyReached",
        "doc": [
          "All items have been minted."
        ]
      },
      {
        "name": "MaxSupplyAlreadySet",
        "doc": [
          "The max supply has already been set."
        ]
      },
      {
        "name": "MaxSupplyTooSmall",
        "doc": [
          "The provided max supply is less to the amount of items a collection already has."
        ]
      },
      {
        "name": "UnknownItem",
        "doc": [
          "The given item ID is unknown."
        ]
      },
      {
        "name": "NotForSale",
        "doc": [
          "Item is not for sale."
        ]
      },
      {
        "name": "BidTooLow",
        "doc": [
          "The provided bid is too low."
        ]
      }
    ],
    "errors_value": {
      "type": 463
    },
    "index": 32
  },
  {
    "name": "AssetRegistry",
    "prefix": "AssetRegistry",
    "storage": [
      {
        "name": "Assets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_asset_registry:types:AssetDetails",
            "keys_id": 4,
            "value_id": 464
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of an asset."
        ]
      },
      {
        "name": "NextAssetId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Next available asset id. This is sequential id assigned for each new registered asset."
        ]
      },
      {
        "name": "AssetIds",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "Vec<U8>"
            ],
            "value": "U32",
            "keys_id": 62,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Mapping between asset name and asset id."
        ]
      },
      {
        "name": "AssetLocations",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "xcm:v3:multilocation:MultiLocation",
            "keys_id": 4,
            "value_id": 64
          }
        },
        "fallback": "0x00",
        "docs": [
          " Native location of an asset."
        ]
      },
      {
        "name": "LocationAssets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "xcm:v3:multilocation:MultiLocation"
            ],
            "value": "U32",
            "keys_id": 64,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Local asset for native location."
        ]
      },
      {
        "name": "AssetMetadataMap",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_asset_registry:types:AssetMetadata",
            "keys_id": 4,
            "value_id": 465
          }
        },
        "fallback": "0x00",
        "docs": [
          " Metadata of an asset."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3300",
        "name": "register",
        "docs": [
          "Register a new asset.",
          "",
          "Asset is identified by `name` and the name must not be used to register another asset.",
          "",
          "New asset is given `NextAssetId` - sequential asset id",
          "",
          "Adds mapping between `name` and assigned `asset_id` so asset id can be retrieved by name too (Note: this approach is used in AMM implementation (xyk))",
          "",
          "Emits 'Registered` event when successful."
        ],
        "args": [
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "asset_type",
            "type": "pallet_asset_registry:types:AssetType",
            "type_name": "AssetType<AssetId>"
          },
          {
            "name": "existential_deposit",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "asset_id",
            "type": "option<U32>",
            "type_name": "Option<AssetId>"
          },
          {
            "name": "metadata",
            "type": "option<pallet_asset_registry:types:Metadata>",
            "type_name": "Option<Metadata>"
          },
          {
            "name": "location",
            "type": "option<xcm:v3:multilocation:MultiLocation>",
            "type_name": "Option<AssetNativeLocation>"
          },
          {
            "name": "xcm_rate_limit",
            "type": "option<U128>",
            "type_name": "Option<Balance>"
          }
        ]
      },
      {
        "lookup": "3301",
        "name": "update",
        "docs": [
          "Update registered asset.",
          "",
          "Updates also mapping between name and asset id if provided name is different than currently registered.",
          "",
          "Emits `Updated` event when successful."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "asset_type",
            "type": "pallet_asset_registry:types:AssetType",
            "type_name": "AssetType<AssetId>"
          },
          {
            "name": "existential_deposit",
            "type": "option<U128>",
            "type_name": "Option<Balance>"
          },
          {
            "name": "xcm_rate_limit",
            "type": "option<U128>",
            "type_name": "Option<Balance>"
          }
        ]
      },
      {
        "lookup": "3302",
        "name": "set_metadata",
        "docs": [
          "Set metadata for an asset.",
          "",
          "- `asset_id`: Asset identifier.",
          "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
          "- `decimals`: The number of decimals this asset uses to represent one unit.",
          "",
          "Emits `MetadataSet` event when successful."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "symbol",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "decimals",
            "type": "U8",
            "type_name": "u8"
          }
        ]
      },
      {
        "lookup": "3303",
        "name": "set_location",
        "docs": [
          "Set asset native location.",
          "",
          "Adds mapping between native location and local asset id and vice versa.",
          "",
          "Mainly used in XCM.",
          "",
          "Emits `LocationSet` event when successful."
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "location",
            "type": "xcm:v3:multilocation:MultiLocation",
            "type_name": "AssetNativeLocation"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 283
    },
    "events": [
      {
        "lookup": "3300",
        "name": "Registered",
        "docs": [
          "Asset was registered."
        ],
        "args": [
          "U32",
          "Vec<U8>",
          "pallet_asset_registry:types:AssetType"
        ],
        "args_name": [
          "asset_id",
          "asset_name",
          "asset_type"
        ],
        "args_type_name": [
          "AssetId",
          "BoundedVec<u8, StringLimit>",
          "AssetType<AssetId>"
        ]
      },
      {
        "lookup": "3301",
        "name": "Updated",
        "docs": [
          "Asset was updated."
        ],
        "args": [
          "U32",
          "Vec<U8>",
          "pallet_asset_registry:types:AssetType",
          "U128",
          "option<U128>"
        ],
        "args_name": [
          "asset_id",
          "asset_name",
          "asset_type",
          "existential_deposit",
          "xcm_rate_limit"
        ],
        "args_type_name": [
          "AssetId",
          "BoundedVec<u8, StringLimit>",
          "AssetType<AssetId>",
          "Balance",
          "Option<Balance>"
        ]
      },
      {
        "lookup": "3302",
        "name": "MetadataSet",
        "docs": [
          "Metadata set for an asset."
        ],
        "args": [
          "U32",
          "Vec<U8>",
          "U8"
        ],
        "args_name": [
          "asset_id",
          "symbol",
          "decimals"
        ],
        "args_type_name": [
          "AssetId",
          "BoundedVec<u8, StringLimit>",
          "u8"
        ]
      },
      {
        "lookup": "3303",
        "name": "LocationSet",
        "docs": [
          "Native location set for an asset."
        ],
        "args": [
          "U32",
          "xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset_id",
          "location"
        ],
        "args_type_name": [
          "AssetId",
          "AssetNativeLocation"
        ]
      }
    ],
    "events_value": {
      "type": 61
    },
    "constants": [
      {
        "name": "SequentialIdStartAt",
        "type": "U32",
        "type_value": 4,
        "constants_value": "40420f00",
        "docs": null
      },
      {
        "name": "NativeAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset Id"
        ]
      }
    ],
    "errors": [
      {
        "name": "NoIdAvailable",
        "doc": [
          "Asset ID is not available. This only happens when it reaches the MAX value of given id type."
        ]
      },
      {
        "name": "AssetNotFound",
        "doc": [
          "Invalid asset name or symbol."
        ]
      },
      {
        "name": "TooLong",
        "doc": [
          "Invalid asset name or symbol."
        ]
      },
      {
        "name": "AssetNotRegistered",
        "doc": [
          "Asset ID is not registered in the asset-registry."
        ]
      },
      {
        "name": "AssetAlreadyRegistered",
        "doc": [
          "Asset is already registered."
        ]
      },
      {
        "name": "InvalidSharedAssetLen",
        "doc": [
          "Incorrect number of assets provided to create shared asset."
        ]
      },
      {
        "name": "CannotUpdateLocation",
        "doc": [
          "Cannot update asset location"
        ]
      },
      {
        "name": "NotInReservedRange",
        "doc": [
          "Selected asset id is out of reserved range."
        ]
      },
      {
        "name": "LocationAlreadyRegistered",
        "doc": [
          "Location already registered with different asset"
        ]
      }
    ],
    "errors_value": {
      "type": 466
    },
    "index": 51
  },
  {
    "name": "Claims",
    "prefix": "Claims",
    "storage": [
      {
        "name": "Claims",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "[U8; 20]"
            ],
            "value": "U128",
            "keys_id": 76,
            "value_id": 6
          }
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Asset id storage for each shared token"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3500",
        "name": "claim",
        "docs": [
          "Claim xHDX by providing signed message with Ethereum address."
        ],
        "args": [
          {
            "name": "ethereum_signature",
            "type": "[U8; 65]",
            "type_name": "EcdsaSignature"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 287
    },
    "events": [
      {
        "lookup": "3500",
        "name": "Claim",
        "docs": null,
        "args": [
          "AccountId",
          "[U8; 20]",
          "U128"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "AccountId",
          "EthereumAddress",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 75
    },
    "errors": [
      {
        "name": "InvalidEthereumSignature",
        "doc": [
          "Ethereum signature is not valid"
        ]
      },
      {
        "name": "NoClaimOrAlreadyClaimed",
        "doc": [
          "Claim is not valid"
        ]
      },
      {
        "name": "BalanceOverflow",
        "doc": [
          "Value reached maximum and cannot be incremented further"
        ]
      }
    ],
    "errors_value": {
      "type": 467
    },
    "index": 53
  },
  {
    "name": "GenesisHistory",
    "prefix": "GenesisHistory",
    "storage": [
      {
        "name": "PreviousChain",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_genesis_history:Chain",
          "PlainTypeValue": 468
        },
        "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "docs": null
      }
    ],
    "calls_value": {
      "type": 290
    },
    "errors": null,
    "errors_value": null,
    "index": 55
  },
  {
    "name": "CollatorRewards",
    "prefix": "CollatorRewards",
    "storage": [
      {
        "name": "Collators",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<AccountId>",
            "keys_id": 4,
            "value_id": 469
          }
        },
        "fallback": "0x00",
        "docs": [
          " Stores the collators per session (index)."
        ]
      }
    ],
    "events": [
      {
        "lookup": "3900",
        "name": "CollatorRewarded",
        "docs": [
          "Collator was rewarded."
        ],
        "args": [
          "AccountId",
          "U128",
          "U32"
        ],
        "args_name": [
          "who",
          "amount",
          "currency"
        ],
        "args_type_name": [
          "AccountId",
          "Balance",
          "CurrencyId"
        ]
      }
    ],
    "events_value": {
      "type": 77
    },
    "constants": [
      {
        "name": "RewardPerCollator",
        "type": "U128",
        "type_value": 6,
        "constants_value": "78fa8b75289e01000000000000000000",
        "docs": [
          " Reward amount per one collator."
        ]
      },
      {
        "name": "RewardCurrencyId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Reward Asset Id"
        ]
      }
    ],
    "errors": null,
    "errors_value": {
      "type": 470
    },
    "index": 57
  },
  {
    "name": "Omnipool",
    "prefix": "Omnipool",
    "storage": [
      {
        "name": "Assets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_omnipool:types:AssetState",
            "keys_id": 4,
            "value_id": 471
          }
        },
        "fallback": "0x00",
        "docs": [
          " State of an asset in the omnipool"
        ]
      },
      {
        "name": "HubAssetImbalance",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_omnipool:types:SimpleImbalance",
          "PlainTypeValue": 472
        },
        "fallback": "0x0000000000000000000000000000000001",
        "docs": [
          " Imbalance of hub asset"
        ]
      },
      {
        "name": "HubAssetTradability",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U8",
          "PlainTypeValue": 80
        },
        "fallback": "0x01",
        "docs": [
          " Tradable state of hub asset."
        ]
      },
      {
        "name": "Positions",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "pallet_omnipool:types:Position",
            "keys_id": 6,
            "value_id": 473
          }
        },
        "fallback": "0x00",
        "docs": [
          " LP positions. Maps NFT instance id to corresponding position"
        ]
      },
      {
        "name": "NextPositionId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Position ids sequencer"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3b01",
        "name": "add_token",
        "docs": [
          "Add new token to omnipool in quantity `amount` at price `initial_price`",
          "",
          "Can be called only after pool is initialized, otherwise it returns `NoStableAssetInPool`",
          "",
          "Initial liquidity must be transferred to pool's account for this new token manually prior to calling `add_token`.",
          "",
          "Initial liquidity is pool's account balance of the token.",
          "",
          "Position NFT token is minted for `position_owner`.",
          "",
          "Parameters:",
          "- `asset`: The identifier of the new asset added to the pool. Must be registered in Asset registry",
          "- `initial_price`: Initial price",
          "- `position_owner`: account id for which share are distributed in form on NFT",
          "",
          "Emits `TokenAdded` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "asset",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "initial_price",
            "type": "U128",
            "type_name": "Price"
          },
          {
            "name": "weight_cap",
            "type": "U32",
            "type_name": "Permill"
          },
          {
            "name": "position_owner",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3b02",
        "name": "add_liquidity",
        "docs": [
          "Add liquidity of asset `asset` in quantity `amount` to Omnipool",
          "",
          "`add_liquidity` adds specified asset amount to pool and in exchange gives the origin",
          "corresponding shares amount in form of NFT at current price.",
          "",
          "Asset's tradable state must contain ADD_LIQUIDITY flag, otherwise `NotAllowed` error is returned.",
          "",
          "NFT is minted using NTFHandler which implements non-fungibles traits from frame_support.",
          "",
          "Asset weight cap must be respected, otherwise `AssetWeightExceeded` error is returned.",
          "Asset weight is ratio between new HubAsset reserve and total reserve of Hub asset in Omnipool.",
          "",
          "Parameters:",
          "- `asset`: The identifier of the new asset added to the pool. Must be already in the pool",
          "- `amount`: Amount of asset added to omnipool",
          "",
          "Emits `LiquidityAdded` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "asset",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3b03",
        "name": "remove_liquidity",
        "docs": [
          "Remove liquidity of asset `asset` in quantity `amount` from Omnipool",
          "",
          "`remove_liquidity` removes specified shares amount from given PositionId (NFT instance).",
          "",
          "Asset's tradable state must contain REMOVE_LIQUIDITY flag, otherwise `NotAllowed` error is returned.",
          "",
          "if all shares from given position are removed, NFT is burned.",
          "",
          "Parameters:",
          "- `position_id`: The identifier of position which liquidity is removed from.",
          "- `amount`: Amount of shares removed from omnipool",
          "",
          "Emits `LiquidityRemoved` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "position_id",
            "type": "U128",
            "type_name": "PositionItemId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3b04",
        "name": "sacrifice_position",
        "docs": [
          "Sacrifice LP position in favor of pool.",
          "",
          "A position is destroyed and liquidity owned by LP becomes pool owned liquidity.",
          "",
          "Only owner of position can perform this action.",
          "",
          "Emits `PositionDestroyed`."
        ],
        "args": [
          {
            "name": "position_id",
            "type": "U128",
            "type_name": "PositionItemId"
          }
        ]
      },
      {
        "lookup": "3b05",
        "name": "sell",
        "docs": [
          "Execute a swap of `asset_in` for `asset_out`.",
          "",
          "Price is determined by the Omnipool.",
          "",
          "Hub asset is traded separately.",
          "",
          "Asset's tradable states must contain SELL flag for asset_in and BUY flag for asset_out, otherwise `NotAllowed` error is returned.",
          "",
          "Parameters:",
          "- `asset_in`: ID of asset sold to the pool",
          "- `asset_out`: ID of asset bought from the pool",
          "- `amount`: Amount of asset sold",
          "- `min_buy_amount`: Minimum amount required to receive",
          "",
          "Emits `SellExecuted` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "min_buy_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3b06",
        "name": "buy",
        "docs": [
          "Execute a swap of `asset_out` for `asset_in`.",
          "",
          "Price is determined by the Omnipool.",
          "",
          "Hub asset is traded separately.",
          "",
          "Asset's tradable states must contain SELL flag for asset_in and BUY flag for asset_out, otherwise `NotAllowed` error is returned.",
          "",
          "Parameters:",
          "- `asset_in`: ID of asset sold to the pool",
          "- `asset_out`: ID of asset bought from the pool",
          "- `amount`: Amount of asset sold",
          "- `max_sell_amount`: Maximum amount to be sold.",
          "",
          "Emits `BuyExecuted` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "max_sell_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "3b07",
        "name": "set_asset_tradable_state",
        "docs": [
          "Update asset's tradable state.",
          "",
          "Parameters:",
          "- `asset_id`: asset id",
          "- `state`: new state",
          "",
          "Emits `TradableStateUpdated` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "state",
            "type": "U8",
            "type_name": "Tradability"
          }
        ]
      },
      {
        "lookup": "3b08",
        "name": "refund_refused_asset",
        "docs": [
          "Refund given amount of asset to a recipient.",
          "",
          "A refund is needed when a token is refused to be added to Omnipool, and initial liquidity of the asset has been already transferred to pool's account.",
          "",
          "Transfer is performed only when asset is not in Omnipool and pool's balance has sufficient amount.",
          "",
          "Only `AuthorityOrigin` can perform this operition -same as `add_token`o",
          "",
          "Emits `AssetRefunded`"
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "recipient",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3b09",
        "name": "set_asset_weight_cap",
        "docs": [
          "Update asset's weight cap",
          "",
          "Parameters:",
          "- `asset_id`: asset id",
          "- `cap`: new weight cap",
          "",
          "Emits `AssetWeightCapUpdated` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "cap",
            "type": "U32",
            "type_name": "Permill"
          }
        ]
      },
      {
        "lookup": "3b0b",
        "name": "withdraw_protocol_liquidity",
        "docs": null,
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "price",
            "type": "Tuple:U128U128",
            "type_name": "(Balance, Balance)"
          },
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3b0c",
        "name": "remove_token",
        "docs": null,
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "beneficiary",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 291
    },
    "events": [
      {
        "lookup": "3b00",
        "name": "TokenAdded",
        "docs": [
          "An asset was added to Omnipool"
        ],
        "args": [
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "initial_amount",
          "initial_price"
        ],
        "args_type_name": [
          "AssetId",
          "Balance",
          "Price"
        ]
      },
      {
        "lookup": "3b01",
        "name": "TokenRemoved",
        "docs": [
          "An asset was removed from Omnipool"
        ],
        "args": [
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "asset_id",
          "amount",
          "hub_withdrawn"
        ],
        "args_type_name": [
          "AssetId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "3b02",
        "name": "LiquidityAdded",
        "docs": [
          "Liquidity of an asset was added to Omnipool."
        ],
        "args": [
          "AccountId",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_id",
          "amount",
          "position_id"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "Balance",
          "PositionItemId"
        ]
      },
      {
        "lookup": "3b03",
        "name": "LiquidityRemoved",
        "docs": [
          "Liquidity of an asset was removed to Omnipool."
        ],
        "args": [
          "AccountId",
          "U128",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "position_id",
          "asset_id",
          "shares_removed",
          "fee"
        ],
        "args_type_name": [
          "AccountId",
          "PositionItemId",
          "AssetId",
          "Balance",
          "FixedU128"
        ]
      },
      {
        "lookup": "3b04",
        "name": "ProtocolLiquidityRemoved",
        "docs": [
          "Liquidity of an asset was removed to Omnipool."
        ],
        "args": [
          "AccountId",
          "U32",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_id",
          "amount",
          "hub_amount",
          "shares_removed"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "Balance",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "3b05",
        "name": "SellExecuted",
        "docs": [
          "Sell trade executed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_in",
          "asset_out",
          "amount_in",
          "amount_out",
          "asset_fee_amount",
          "protocol_fee_amount"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "3b06",
        "name": "BuyExecuted",
        "docs": [
          "Buy trade executed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_in",
          "asset_out",
          "amount_in",
          "amount_out",
          "asset_fee_amount",
          "protocol_fee_amount"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "3b07",
        "name": "PositionCreated",
        "docs": [
          "LP Position was created and NFT instance minted."
        ],
        "args": [
          "U128",
          "AccountId",
          "U32",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "position_id",
          "owner",
          "asset",
          "amount",
          "shares",
          "price"
        ],
        "args_type_name": [
          "PositionItemId",
          "AccountId",
          "AssetId",
          "Balance",
          "Balance",
          "Price"
        ]
      },
      {
        "lookup": "3b08",
        "name": "PositionDestroyed",
        "docs": [
          "LP Position was destroyed and NFT instance burned."
        ],
        "args": [
          "U128",
          "AccountId"
        ],
        "args_name": [
          "position_id",
          "owner"
        ],
        "args_type_name": [
          "PositionItemId",
          "AccountId"
        ]
      },
      {
        "lookup": "3b09",
        "name": "PositionUpdated",
        "docs": [
          "LP Position was created and NFT instance minted."
        ],
        "args": [
          "U128",
          "AccountId",
          "U32",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "position_id",
          "owner",
          "asset",
          "amount",
          "shares",
          "price"
        ],
        "args_type_name": [
          "PositionItemId",
          "AccountId",
          "AssetId",
          "Balance",
          "Balance",
          "Price"
        ]
      },
      {
        "lookup": "3b0a",
        "name": "TradableStateUpdated",
        "docs": [
          "Aseet's tradable state has been updated."
        ],
        "args": [
          "U32",
          "U8"
        ],
        "args_name": [
          "asset_id",
          "state"
        ],
        "args_type_name": [
          "AssetId",
          "Tradability"
        ]
      },
      {
        "lookup": "3b0b",
        "name": "AssetRefunded",
        "docs": [
          "Amount has been refunded for asset which has not been accepted to add to omnipool."
        ],
        "args": [
          "U32",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "asset_id",
          "amount",
          "recipient"
        ],
        "args_type_name": [
          "AssetId",
          "Balance",
          "AccountId"
        ]
      },
      {
        "lookup": "3b0c",
        "name": "AssetWeightCapUpdated",
        "docs": [
          "Asset's weight cap has been updated."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "asset_id",
          "cap"
        ],
        "args_type_name": [
          "AssetId",
          "Permill"
        ]
      }
    ],
    "events_value": {
      "type": 78
    },
    "constants": [
      {
        "name": "HdxAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset ID"
        ]
      },
      {
        "name": "HubAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "01000000",
        "docs": [
          " Hub Asset ID"
        ]
      },
      {
        "name": "MinWithdrawalFee",
        "type": "U32",
        "type_value": 81,
        "constants_value": "64000000",
        "docs": [
          " Minimum withdrawal fee"
        ]
      },
      {
        "name": "MinimumTradingLimit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "e8030000000000000000000000000000",
        "docs": [
          " Minimum trading limit"
        ]
      },
      {
        "name": "MinimumPoolLiquidity",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40420f00000000000000000000000000",
        "docs": [
          " Minimum pool liquidity which can be added"
        ]
      },
      {
        "name": "MaxInRatio",
        "type": "U128",
        "type_value": 6,
        "constants_value": "03000000000000000000000000000000",
        "docs": [
          " Max fraction of asset reserve to sell in single transaction"
        ]
      },
      {
        "name": "MaxOutRatio",
        "type": "U128",
        "type_value": 6,
        "constants_value": "03000000000000000000000000000000",
        "docs": [
          " Max fraction of asset reserve to buy in single transaction"
        ]
      },
      {
        "name": "NFTCollectionId",
        "type": "U128",
        "type_value": 6,
        "constants_value": "39050000000000000000000000000000",
        "docs": [
          " Non fungible class id"
        ]
      }
    ],
    "errors": [
      {
        "name": "InsufficientBalance",
        "doc": [
          "Balance too low"
        ]
      },
      {
        "name": "AssetAlreadyAdded",
        "doc": [
          "Asset is already in omnipool"
        ]
      },
      {
        "name": "AssetNotFound",
        "doc": [
          "Asset is not in omnipool"
        ]
      },
      {
        "name": "NoStableAssetInPool",
        "doc": [
          "No stable asset in the pool"
        ]
      },
      {
        "name": "NoNativeAssetInPool",
        "doc": [
          "No native asset in the pool yet."
        ]
      },
      {
        "name": "MissingBalance",
        "doc": [
          "Adding token as protocol ( root ), token balance has not been updated prior to add token."
        ]
      },
      {
        "name": "InvalidInitialAssetPrice",
        "doc": [
          "Invalid initial asset price. Price must be non-zero."
        ]
      },
      {
        "name": "BuyLimitNotReached",
        "doc": [
          "Minimum limit has not been reached during trade."
        ]
      },
      {
        "name": "SellLimitExceeded",
        "doc": [
          "Maximum limit has been exceeded during trade."
        ]
      },
      {
        "name": "PositionNotFound",
        "doc": [
          "Position has not been found."
        ]
      },
      {
        "name": "InsufficientShares",
        "doc": [
          "Insufficient shares in position"
        ]
      },
      {
        "name": "NotAllowed",
        "doc": [
          "Asset is not allowed to be bought or sold"
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "Signed account is not owner of position instance."
        ]
      },
      {
        "name": "AssetWeightCapExceeded",
        "doc": [
          "Asset weight cap has been exceeded."
        ]
      },
      {
        "name": "AssetNotRegistered",
        "doc": [
          "Asset is not registered in asset registry"
        ]
      },
      {
        "name": "InsufficientLiquidity",
        "doc": [
          "Provided liquidity is below minimum allowed limit"
        ]
      },
      {
        "name": "InsufficientTradingAmount",
        "doc": [
          "Traded amount is below minimum allowed limit"
        ]
      },
      {
        "name": "SameAssetTradeNotAllowed",
        "doc": [
          "Sell or buy with same asset ids is not allowed."
        ]
      },
      {
        "name": "HubAssetUpdateError",
        "doc": [
          "LRNA update after trade results in positive value."
        ]
      },
      {
        "name": "PositiveImbalance",
        "doc": [
          "Imbalance results in positive value."
        ]
      },
      {
        "name": "InvalidSharesAmount",
        "doc": [
          "Amount of shares provided cannot be 0."
        ]
      },
      {
        "name": "InvalidHubAssetTradableState",
        "doc": [
          "HJb Asset's trabable is only allowed to be SELL or BUY."
        ]
      },
      {
        "name": "AssetRefundNotAllowed",
        "doc": [
          "Asset is not allowed to be refunded."
        ]
      },
      {
        "name": "MaxOutRatioExceeded",
        "doc": [
          "Max fraction of asset reserve to buy has been exceeded."
        ]
      },
      {
        "name": "MaxInRatioExceeded",
        "doc": [
          "Max fraction of asset reserve to sell has been exceeded."
        ]
      },
      {
        "name": "PriceDifferenceTooHigh",
        "doc": [
          "Max allowed price difference has been exceeded."
        ]
      },
      {
        "name": "InvalidOraclePrice",
        "doc": [
          "Invalid oracle price - division by zero."
        ]
      },
      {
        "name": "InvalidWithdrawalFee",
        "doc": [
          "Failed to calculate withdrawal fee."
        ]
      },
      {
        "name": "FeeOverdraft",
        "doc": [
          "More than allowed amount of fee has been transferred."
        ]
      },
      {
        "name": "SharesRemaining",
        "doc": [
          "Token cannot be removed from Omnipool due to some shares are remaining owned by other users."
        ]
      },
      {
        "name": "AssetNotFrozen",
        "doc": [
          "Token cannot be removed from Omnipool because asset is not frozen."
        ]
      },
      {
        "name": "StableAssetCannotBeRemoved",
        "doc": [
          "Configured stable asset cannot be removed from Omnipool."
        ]
      }
    ],
    "errors_value": {
      "type": 474
    },
    "index": 59
  },
  {
    "name": "TransactionPause",
    "prefix": "TransactionPause",
    "storage": [
      {
        "name": "PausedTransactions",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "Tuple:Vec<U8>Vec<U8>"
            ],
            "value": "NULL",
            "keys_id": 475,
            "value_id": 35
          }
        },
        "fallback": "0x00",
        "docs": [
          " The paused transaction map",
          "",
          " map (PalletNameBytes, FunctionNameBytes) => Option<()>"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3c00",
        "name": "pause_transaction",
        "docs": null,
        "args": [
          {
            "name": "pallet_name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "function_name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "3c01",
        "name": "unpause_transaction",
        "docs": null,
        "args": [
          {
            "name": "pallet_name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "function_name",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 293
    },
    "events": [
      {
        "lookup": "3c00",
        "name": "TransactionPaused",
        "docs": [
          "Paused transaction"
        ],
        "args": [
          "Vec<U8>",
          "Vec<U8>"
        ],
        "args_name": [
          "pallet_name_bytes",
          "function_name_bytes"
        ],
        "args_type_name": [
          "Bytes",
          "Bytes"
        ]
      },
      {
        "lookup": "3c01",
        "name": "TransactionUnpaused",
        "docs": [
          "Unpaused transaction"
        ],
        "args": [
          "Vec<U8>",
          "Vec<U8>"
        ],
        "args_name": [
          "pallet_name_bytes",
          "function_name_bytes"
        ],
        "args_type_name": [
          "Bytes",
          "Bytes"
        ]
      }
    ],
    "events_value": {
      "type": 82
    },
    "errors": [
      {
        "name": "CannotPause",
        "doc": [
          "can not pause"
        ]
      },
      {
        "name": "InvalidCharacter",
        "doc": [
          "invalid character encoding"
        ]
      },
      {
        "name": "NameTooLong",
        "doc": [
          "pallet name or function name is too long"
        ]
      }
    ],
    "errors_value": {
      "type": 477
    },
    "index": 60
  },
  {
    "name": "Duster",
    "prefix": "Duster",
    "storage": [
      {
        "name": "AccountBlacklist",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "NULL",
            "keys_id": 0,
            "value_id": 35
          }
        },
        "fallback": "0x00",
        "docs": [
          " Accounts excluded from dusting."
        ]
      },
      {
        "name": "RewardAccount",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "AccountId",
          "PlainTypeValue": 0
        },
        "fallback": "0x00",
        "docs": [
          " Account to take reward from."
        ]
      },
      {
        "name": "DustAccount",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "AccountId",
          "PlainTypeValue": 0
        },
        "fallback": "0x00",
        "docs": [
          " Account to send dust to."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3d00",
        "name": "dust_account",
        "docs": [
          "Dust specified account.",
          "IF account balance is < min. existential deposit of given currency, and account is allowed to",
          "be dusted, the remaining balance is transferred to selected account (usually treasury).",
          "",
          "Caller is rewarded with chosen reward in native currency."
        ],
        "args": [
          {
            "name": "account",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          }
        ]
      },
      {
        "lookup": "3d01",
        "name": "add_nondustable_account",
        "docs": [
          "Add account to list of non-dustable account. Account whihc are excluded from udsting.",
          "If such account should be dusted - `AccountBlacklisted` error is returned.",
          "Only root can perform this action."
        ],
        "args": [
          {
            "name": "account",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      },
      {
        "lookup": "3d02",
        "name": "remove_nondustable_account",
        "docs": [
          "Remove account from list of non-dustable accounts. That means account can be dusted again."
        ],
        "args": [
          {
            "name": "account",
            "type": "AccountId",
            "type_name": "AccountId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 294
    },
    "events": [
      {
        "lookup": "3d00",
        "name": "Dusted",
        "docs": [
          "Account dusted."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "3d01",
        "name": "Added",
        "docs": [
          "Account added to non-dustable list."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "who"
        ],
        "args_type_name": [
          "AccountId"
        ]
      },
      {
        "lookup": "3d02",
        "name": "Removed",
        "docs": [
          "Account removed from non-dustable list."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "who"
        ],
        "args_type_name": [
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 83
    },
    "constants": [
      {
        "name": "Reward",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00000000000000000000000000000000",
        "docs": [
          " Reward amount"
        ]
      },
      {
        "name": "NativeCurrencyId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset Id"
        ]
      }
    ],
    "errors": [
      {
        "name": "AccountBlacklisted",
        "doc": [
          "Account is excluded from dusting."
        ]
      },
      {
        "name": "AccountNotBlacklisted",
        "doc": [
          "Account is not present in the non-dustable list."
        ]
      },
      {
        "name": "ZeroBalance",
        "doc": [
          "The balance is zero."
        ]
      },
      {
        "name": "BalanceSufficient",
        "doc": [
          "The balance is sufficient to keep account open."
        ]
      },
      {
        "name": "DustAccountNotSet",
        "doc": [
          "Dust account is not set."
        ]
      },
      {
        "name": "ReserveAccountNotSet",
        "doc": [
          "Reserve account is not set."
        ]
      }
    ],
    "errors_value": {
      "type": 478
    },
    "index": 61
  },
  {
    "name": "OmnipoolWarehouseLM",
    "prefix": "OmnipoolWarehouseLM",
    "storage": [
      {
        "name": "FarmSequencer",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Id sequencer for `GlobalFarm` and `YieldFarm`."
        ]
      },
      {
        "name": "DepositSequencer",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": null
      },
      {
        "name": "GlobalFarm",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_liquidity_mining:types:GlobalFarmData",
            "keys_id": 4,
            "value_id": 479
          }
        },
        "fallback": "0x00",
        "docs": null
      },
      {
        "name": "YieldFarm",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32",
              "U32"
            ],
            "value": "pallet_liquidity_mining:types:YieldFarmData",
            "keys_id": 481,
            "value_id": 482
          }
        },
        "fallback": "0x00",
        "docs": [
          " Yield farm details."
        ]
      },
      {
        "name": "Deposit",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "pallet_liquidity_mining:types:DepositData",
            "keys_id": 6,
            "value_id": 483
          }
        },
        "fallback": "0x00",
        "docs": [
          " Deposit details."
        ]
      },
      {
        "name": "ActiveYieldFarm",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "U32",
            "keys_id": 91,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Active(farms able to receive LP shares deposits) yield farms."
        ]
      }
    ],
    "calls_value": {
      "type": 295
    },
    "events": [
      {
        "lookup": "3e00",
        "name": "GlobalFarmAccRPZUpdated",
        "docs": [
          "Global farm accumulated reward per share was updated."
        ],
        "args": [
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "accumulated_rpz",
          "total_shares_z"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "FixedU128",
          "Balance"
        ]
      },
      {
        "lookup": "3e01",
        "name": "YieldFarmAccRPVSUpdated",
        "docs": [
          "Yield farm accumulated reward per valued share was updated."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "accumulated_rpvs",
          "total_valued_shares"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "FixedU128",
          "Balance"
        ]
      },
      {
        "lookup": "3e02",
        "name": "AllRewardsDistributed",
        "docs": [
          "Global farm has no more rewards to distribute in the moment."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "global_farm_id"
        ],
        "args_type_name": [
          "GlobalFarmId"
        ]
      }
    ],
    "events_value": {
      "type": 84
    },
    "constants": [
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 220,
        "constants_value": "4f6d6e6957684c4d",
        "docs": [
          " Pallet id."
        ]
      },
      {
        "name": "MinTotalFarmRewards",
        "type": "U128",
        "type_value": 6,
        "constants_value": "00407a10f35a00000000000000000000",
        "docs": [
          " Minimum total rewards to distribute from global farm during liquidity mining."
        ]
      },
      {
        "name": "MinPlannedYieldingPeriods",
        "type": "U32",
        "type_value": 4,
        "constants_value": "68380000",
        "docs": [
          " Minimum number of periods to run liquidity mining program."
        ]
      },
      {
        "name": "MaxFarmEntriesPerDeposit",
        "type": "U32",
        "type_value": 4,
        "constants_value": "05000000",
        "docs": [
          " Maximum number of yield farms same LP shares can be re/deposited into. This value always",
          " MUST BE >= 1.         "
        ]
      },
      {
        "name": "MaxYieldFarmsPerGlobalFarm",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " Max number of yield farms can exist in global farm. This includes all farms in the",
          " storage(active, stopped, terminated)."
        ]
      }
    ],
    "errors": [
      {
        "name": "GlobalFarmNotFound",
        "doc": [
          "Global farm does not exist."
        ]
      },
      {
        "name": "YieldFarmNotFound",
        "doc": [
          "Yield farm does not exist."
        ]
      },
      {
        "name": "DoubleClaimInPeriod",
        "doc": [
          "Multiple claims in the same period is not allowed."
        ]
      },
      {
        "name": "LiquidityMiningCanceled",
        "doc": [
          "Liquidity mining is canceled."
        ]
      },
      {
        "name": "LiquidityMiningIsActive",
        "doc": [
          "Liquidity mining is not canceled."
        ]
      },
      {
        "name": "LiquidityMiningIsNotStopped",
        "doc": [
          "Liquidity mining is in `active` or `terminated` state and action cannot be completed."
        ]
      },
      {
        "name": "InvalidDepositAmount",
        "doc": [
          "LP shares amount is not valid."
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "Account is not allowed to perform action."
        ]
      },
      {
        "name": "InvalidMultiplier",
        "doc": [
          "Yield farm multiplier can't be 0."
        ]
      },
      {
        "name": "YieldFarmAlreadyExists",
        "doc": [
          "Yield farm with given `amm_pool_id` already exists in global farm."
        ]
      },
      {
        "name": "InvalidInitialRewardPercentage",
        "doc": [
          "Loyalty curve's initial reward percentage is not valid. Valid range is: [0, 1)."
        ]
      },
      {
        "name": "GlobalFarmIsNotEmpty",
        "doc": [
          "One or more yield farms exist in global farm."
        ]
      },
      {
        "name": "MissingIncentivizedAsset",
        "doc": [
          "Farm's `incentivized_asset` is missing in provided asset pair."
        ]
      },
      {
        "name": "InsufficientRewardCurrencyBalance",
        "doc": [
          "Reward currency balance is not sufficient."
        ]
      },
      {
        "name": "InvalidBlocksPerPeriod",
        "doc": [
          "Blocks per period can't be 0."
        ]
      },
      {
        "name": "InvalidYieldPerPeriod",
        "doc": [
          "Yield per period can't be 0."
        ]
      },
      {
        "name": "InvalidTotalRewards",
        "doc": [
          "Total rewards is less than `MinTotalFarmRewards`."
        ]
      },
      {
        "name": "InvalidPlannedYieldingPeriods",
        "doc": [
          "Planned yielding periods is less than `MinPlannedYieldingPeriods`."
        ]
      },
      {
        "name": "MaxEntriesPerDeposit",
        "doc": [
          "Maximum number of locks reached for deposit."
        ]
      },
      {
        "name": "DoubleLock",
        "doc": [
          "Trying to lock LP shares into already locked yield farm."
        ]
      },
      {
        "name": "YieldFarmEntryNotFound",
        "doc": [
          "Yield farm entry doesn't exist for given deposit."
        ]
      },
      {
        "name": "GlobalFarmIsFull",
        "doc": [
          "Max number of yield farms in global farm was reached. Global farm can't accept new",
          "yield farms until some yield farm is not removed from storage."
        ]
      },
      {
        "name": "InvalidMinDeposit",
        "doc": [
          "Invalid min. deposit was set for global farm."
        ]
      },
      {
        "name": "InvalidPriceAdjustment",
        "doc": [
          "Price adjustment multiplier can't be 0."
        ]
      },
      {
        "name": "ErrorGetAccountId",
        "doc": [
          "Account creation from id failed."
        ]
      },
      {
        "name": "IncorrectValuedShares",
        "doc": [
          "Value of deposited shares amount in reward currency is bellow min. limit."
        ]
      },
      {
        "name": "RewardCurrencyNotRegistered",
        "doc": [
          "`reward_currency` is not registered in asset registry."
        ]
      },
      {
        "name": "IncentivizedAssetNotRegistered",
        "doc": [
          "`incentivized_asset` is not registered in asset registry."
        ]
      },
      {
        "name": "InconsistentState",
        "doc": [
          "Action cannot be completed because unexpected error has occurred. This should be reported",
          "to protocol maintainers."
        ],
        "fields": [
          {
            "type": "pallet_liquidity_mining:pallet:InconsistentStateError",
            "type_name": "InconsistentStateError",
            "doc": null
          }
        ]
      }
    ],
    "errors_value": {
      "type": 487
    },
    "index": 62
  },
  {
    "name": "OmnipoolLiquidityMining",
    "prefix": "OmnipoolLiquidityMining",
    "storage": [
      {
        "name": "OmniPositionId",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "U128",
            "keys_id": 6,
            "value_id": 6
          }
        },
        "fallback": "0x00",
        "docs": [
          " Map of omnipool position's ids to LM's deposit ids."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "3f00",
        "name": "create_global_farm",
        "docs": [
          "Create a new liquidity mining program with provided parameters.",
          "",
          "`owner` account has to have at least `total_rewards` balance. These funds will be",
          "transferred from `owner` to farm account.",
          "",
          "The dispatch origin for this call must be `T::CreateOrigin`.",
          "!!!WARN: `T::CreateOrigin` has power over funds of `owner`'s account and it should be",
          "configured to trusted origin e.g Sudo or Governance.",
          "",
          "Parameters:",
          "- `origin`: account allowed to create new liquidity mining program(root, governance).",
          "- `total_rewards`: total rewards planned to distribute. These rewards will be",
          "distributed between all yield farms in the global farm.",
          "- `planned_yielding_periods`: planned number of periods to distribute `total_rewards`.",
          "WARN: THIS IS NOT HARD DEADLINE. Not all rewards have to be distributed in",
          "`planned_yielding_periods`. Rewards are distributed based on the situation in the yield",
          "farms and can be distributed in a longer, though never in a shorter, time frame.",
          "- `blocks_per_period`:  number of blocks in a single period. Min. number of blocks per",
          "period is 1.",
          "- `reward_currency`: payoff currency of rewards.",
          "- `owner`: liq. mining farm owner. This account will be able to manage created",
          "liquidity mining program.",
          "- `yield_per_period`: percentage return on `reward_currency` of all farms.",
          "- `min_deposit`: minimum amount of LP shares to be deposited into the liquidity mining by each user.",
          "- `lrna_price_adjustment`: price adjustment between `[LRNA]` and `reward_currency`.",
          "",
          "Emits `GlobalFarmCreated` when successful.",
          ""
        ],
        "args": [
          {
            "name": "total_rewards",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "planned_yielding_periods",
            "type": "U32",
            "type_name": "PeriodOf"
          },
          {
            "name": "blocks_per_period",
            "type": "U32",
            "type_name": "BlockNumberFor"
          },
          {
            "name": "reward_currency",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "owner",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "yield_per_period",
            "type": "U64",
            "type_name": "Perquintill"
          },
          {
            "name": "min_deposit",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "lrna_price_adjustment",
            "type": "U128",
            "type_name": "FixedU128"
          }
        ]
      },
      {
        "lookup": "3f02",
        "name": "terminate_global_farm",
        "docs": [
          "Terminate existing liq. mining program.",
          "",
          "Only farm owner can perform this action.",
          "",
          "WARN: To successfully terminate a global farm, farm have to be empty",
          "(all yield farms in the global farm must be terminated).",
          "",
          "Parameters:",
          "- `origin`: global farm's owner.",
          "- `global_farm_id`: id of global farm to be terminated.",
          "",
          "Emits `GlobalFarmTerminated` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          }
        ]
      },
      {
        "lookup": "3f03",
        "name": "create_yield_farm",
        "docs": [
          "Create yield farm for given `asset_id` in the omnipool.",
          " ",
          "Only farm owner can perform this action.",
          "",
          "Asset with `asset_id` has to be registered in the omnipool.",
          "At most one `active` yield farm can exist in one global farm for the same `asset_id`.",
          "",
          "Parameters:",
          "- `origin`: global farm's owner.",
          "- `global_farm_id`: global farm id to which a yield farm will be added.",
          "- `asset_id`: id of a asset in the omnipool. Yield farm will be created",
          "for this asset and user will be able to lock LP shares into this yield farm immediately.",
          "- `multiplier`: yield farm's multiplier.",
          "- `loyalty_curve`: curve to calculate loyalty multiplier to distribute rewards to users",
          "with time incentive. `None` means no loyalty multiplier.",
          "",
          "Emits `YieldFarmCreated` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "multiplier",
            "type": "U128",
            "type_name": "FarmMultiplier"
          },
          {
            "name": "loyalty_curve",
            "type": "option<pallet_liquidity_mining:types:LoyaltyCurve>",
            "type_name": "Option<LoyaltyCurve>"
          }
        ]
      },
      {
        "lookup": "3f04",
        "name": "update_yield_farm",
        "docs": [
          "Update yield farm's multiplier.",
          " ",
          "Only farm owner can perform this action.",
          "",
          "Parameters:",
          "- `origin`: global farm's owner.",
          "- `global_farm_id`: global farm id in which yield farm will be updated.",
          "- `asset_id`: id of the asset identifying yield farm in the global farm.",
          "- `multiplier`: new yield farm's multiplier.",
          "",
          "Emits `YieldFarmUpdated` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "multiplier",
            "type": "U128",
            "type_name": "FarmMultiplier"
          }
        ]
      },
      {
        "lookup": "3f05",
        "name": "stop_yield_farm",
        "docs": [
          "Stop liquidity miming for specific yield farm.",
          "",
          "This function claims rewards from `GlobalFarm` last time and stop yield farm",
          "incentivization from a `GlobalFarm`. Users will be able to only withdraw",
          "shares(with claiming) after calling this function.",
          "`deposit_shares()` is not allowed on stopped yield farm.",
          " ",
          "Only farm owner can perform this action.",
          "",
          "Parameters:",
          "- `origin`: global farm's owner.",
          "- `global_farm_id`: farm id in which yield farm will be canceled.",
          "- `asset_id`: id of the asset identifying yield farm in the global farm.",
          "",
          "Emits `YieldFarmStopped` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          }
        ]
      },
      {
        "lookup": "3f06",
        "name": "resume_yield_farm",
        "docs": [
          "Resume incentivization of the asset represented by yield farm.",
          "",
          "This function resume incentivization of the asset from the `GlobalFarm` and",
          "restore full functionality or the yield farm. Users will be able to deposit,",
          "claim and withdraw again.",
          "",
          "WARN: Yield farm(and users) is NOT rewarded for time it was stopped.",
          "",
          "Only farm owner can perform this action.",
          "",
          "Parameters:",
          "- `origin`: global farm's owner.",
          "- `global_farm_id`: global farm id in which yield farm will be resumed.",
          "- `yield_farm_id`: id of the yield farm to be resumed.",
          "- `asset_id`: id of the asset identifying yield farm in the global farm.",
          "- `multiplier`: yield farm multiplier.",
          "",
          "Emits `YieldFarmResumed` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "multiplier",
            "type": "U128",
            "type_name": "FarmMultiplier"
          }
        ]
      },
      {
        "lookup": "3f07",
        "name": "terminate_yield_farm",
        "docs": [
          "Terminate yield farm.",
          "",
          "This function marks a yield farm as ready to be removed from storage when it's empty. Users will",
          "be able to only withdraw shares(without claiming rewards from yield farm). Unpaid rewards",
          "will be transferred back to global farm and it will be used to distribute to other yield farms.",
          "",
          "Yield farm must be stopped before it can be terminated.",
          "",
          "Only global farm's owner can perform this action. Yield farm stays in the storage until it's",
          "empty(all farm entries are withdrawn). Last withdrawn from yield farm trigger removing from",
          "the storage.",
          "",
          "Parameters:",
          "- `origin`: global farm's owner.",
          "- `global_farm_id`: global farm id in which yield farm should be terminated.",
          "- `yield_farm_id`: id of yield farm to be terminated.",
          "- `asset_id`: id of the asset identifying yield farm.",
          "",
          "Emits `YieldFarmTerminated` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          }
        ]
      },
      {
        "lookup": "3f08",
        "name": "deposit_shares",
        "docs": [
          "Deposit omnipool position(LP shares) to a liquidity mining.",
          "",
          "This function transfers omnipool position from `origin` to pallet's account and mint NFT for",
          "`origin` account. Minted NFT represents deposit in the liquidity mining. User can",
          "deposit omnipool position as a whole(all the LP shares in the position).",
          "",
          "Parameters:",
          "- `origin`: owner of the omnipool position to deposit into the liquidity mining.",
          "- `global_farm_id`: id of global farm to which user wants to deposit LP shares.",
          "- `yield_farm_id`: id of yield farm to deposit to.",
          "- `position_id`: id of the omnipool position to be deposited into the liquidity mining.",
          "",
          "Emits `SharesDeposited` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          },
          {
            "name": "position_id",
            "type": "U128",
            "type_name": "PositionItemId"
          }
        ]
      },
      {
        "lookup": "3f09",
        "name": "redeposit_shares",
        "docs": [
          "Redeposit LP shares in the already locked omnipool position.",
          "",
          "This function create yield farm entry for existing deposit. Amount of redeposited LP",
          "shares is same as amount shares which are already deposited in the deposit.",
          "",
          "This function DOESN'T create new deposit(NFT).",
          "",
          "Parameters:",
          "- `origin`: owner of the deposit to redeposit.",
          "- `global_farm_id`: id of the global farm to which user wants to redeposit LP shares.",
          "- `yield_farm_id`: id of the yield farm to redeposit to.",
          "- `deposit_id`: identifier of the deposit to redeposit.",
          "",
          "Emits `SharesRedeposited` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "global_farm_id",
            "type": "U32",
            "type_name": "GlobalFarmId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          },
          {
            "name": "deposit_id",
            "type": "U128",
            "type_name": "DepositId"
          }
        ]
      },
      {
        "lookup": "3f0a",
        "name": "claim_rewards",
        "docs": [
          "Claim rewards from liquidity mining program for deposit represented by the `deposit_id`.",
          "",
          "This function calculate user rewards from liquidity mining and transfer rewards to `origin`",
          "account. Claiming multiple time the same period is not allowed.",
          "",
          "Parameters:",
          "- `origin`: owner of deposit.",
          "- `deposit_id`: id of the deposit to claim rewards for.",
          "- `yield_farm_id`: id of the yield farm to claim rewards from.",
          "",
          "Emits `RewardClaimed` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "deposit_id",
            "type": "U128",
            "type_name": "DepositId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          }
        ]
      },
      {
        "lookup": "3f0b",
        "name": "withdraw_shares",
        "docs": [
          "This function claim rewards and withdraw LP shares from yield farm. Omnipool position",
          "is transferred to origin only if this is last withdraw in the deposit and deposit is",
          "destroyed. This function claim rewards only if yield farm is not terminated and user",
          "didn't already claim rewards in current period.",
          "",
          "Unclaimable rewards represents rewards which user won't be able to claim because of",
          "exiting early and these rewards will be transferred back to global farm for future",
          "redistribution.",
          "",
          "Parameters:",
          "- `origin`: owner of deposit.",
          "- `deposit_id`: id of the deposit to claim rewards for.",
          "- `yield_farm_id`: id of the yield farm to claim rewards from.",
          "",
          "Emits:",
          "* `RewardClaimed` event if claimed rewards is > 0",
          "* `SharesWithdrawn` event when successful",
          "* `DepositDestroyed` event when this was last withdraw from the deposit and deposit was",
          "destroyed.",
          ""
        ],
        "args": [
          {
            "name": "deposit_id",
            "type": "U128",
            "type_name": "DepositId"
          },
          {
            "name": "yield_farm_id",
            "type": "U32",
            "type_name": "YieldFarmId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 296
    },
    "events": [
      {
        "lookup": "3f00",
        "name": "GlobalFarmCreated",
        "docs": [
          "New global farm was created."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "U32",
          "U64",
          "U32",
          "U32",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "id",
          "owner",
          "total_rewards",
          "reward_currency",
          "yield_per_period",
          "planned_yielding_periods",
          "blocks_per_period",
          "max_reward_per_period",
          "min_deposit",
          "lrna_price_adjustment"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "AccountId",
          "Balance",
          "AssetId",
          "Perquintill",
          "PeriodOf",
          "BlockNumberFor",
          "Balance",
          "Balance",
          "FixedU128"
        ]
      },
      {
        "lookup": "3f01",
        "name": "GlobalFarmTerminated",
        "docs": [
          "Global farm was terminated."
        ],
        "args": [
          "U32",
          "AccountId",
          "U32",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "who",
          "reward_currency",
          "undistributed_rewards"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "AccountId",
          "AssetId",
          "Balance"
        ]
      },
      {
        "lookup": "3f02",
        "name": "YieldFarmCreated",
        "docs": [
          "New yield farm was added to the farm."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "U128",
          "option<pallet_liquidity_mining:types:LoyaltyCurve>"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "asset_id",
          "multiplier",
          "loyalty_curve"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AssetId",
          "FarmMultiplier",
          "Option<LoyaltyCurve>"
        ]
      },
      {
        "lookup": "3f03",
        "name": "YieldFarmUpdated",
        "docs": [
          "Yield farm multiplier was updated."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "asset_id",
          "who",
          "multiplier"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AssetId",
          "AccountId",
          "FarmMultiplier"
        ]
      },
      {
        "lookup": "3f04",
        "name": "YieldFarmStopped",
        "docs": [
          "Yield farm for `asset_id` was stopped."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3f05",
        "name": "YieldFarmResumed",
        "docs": [
          "Yield farm for `asset_id` was resumed."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "asset_id",
          "who",
          "multiplier"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AssetId",
          "AccountId",
          "FarmMultiplier"
        ]
      },
      {
        "lookup": "3f06",
        "name": "YieldFarmTerminated",
        "docs": [
          "Yield farm was terminated from the global farm."
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "asset_id",
          "who"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "3f07",
        "name": "SharesDeposited",
        "docs": [
          "New LP shares(LP position) were deposited."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "deposit_id",
          "asset_id",
          "who",
          "shares_amount",
          "position_id"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "DepositId",
          "AssetId",
          "AccountId",
          "Balance",
          "PositionItemId"
        ]
      },
      {
        "lookup": "3f08",
        "name": "SharesRedeposited",
        "docs": [
          "Already locked LP shares were redeposited to another yield farm."
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "deposit_id",
          "asset_id",
          "who",
          "shares_amount",
          "position_id"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "DepositId",
          "AssetId",
          "AccountId",
          "Balance",
          "PositionItemId"
        ]
      },
      {
        "lookup": "3f09",
        "name": "RewardClaimed",
        "docs": [
          "Rewards were claimed."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "U128",
          "U32",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "who",
          "claimed",
          "reward_currency",
          "deposit_id"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AccountId",
          "Balance",
          "AssetId",
          "DepositId"
        ]
      },
      {
        "lookup": "3f0a",
        "name": "SharesWithdrawn",
        "docs": [
          "LP shares were withdrawn."
        ],
        "args": [
          "U32",
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "global_farm_id",
          "yield_farm_id",
          "who",
          "amount",
          "deposit_id"
        ],
        "args_type_name": [
          "GlobalFarmId",
          "YieldFarmId",
          "AccountId",
          "Balance",
          "DepositId"
        ]
      },
      {
        "lookup": "3f0b",
        "name": "DepositDestroyed",
        "docs": [
          "All LP shares were unlocked and NFT representing deposit was destroyed."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "deposit_id"
        ],
        "args_type_name": [
          "AccountId",
          "DepositId"
        ]
      }
    ],
    "events_value": {
      "type": 85
    },
    "constants": [
      {
        "name": "NFTCollectionId",
        "type": "U128",
        "type_value": 6,
        "constants_value": "180a0000000000000000000000000000",
        "docs": [
          " NFT collection id for liquidity mining's deposit nfts."
        ]
      },
      {
        "name": "OracleSource",
        "type": "[U8; 8]",
        "type_value": 109,
        "constants_value": "6f6d6e69706f6f6c",
        "docs": [
          " Identifier of oracle data soruce"
        ]
      },
      {
        "name": "OraclePeriod",
        "type": "hydradx_traits:oracle:OraclePeriod",
        "type_value": 489,
        "constants_value": "02",
        "docs": [
          " Oracle's price aggregation period."
        ]
      }
    ],
    "errors": [
      {
        "name": "AssetNotFound",
        "doc": [
          "Asset is not in the omnipool."
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "Signed account is not owner of the deposit."
        ]
      },
      {
        "name": "ZeroClaimedRewards",
        "doc": [
          "Rewards to claim are 0."
        ]
      },
      {
        "name": "InconsistentState",
        "doc": [
          "Action cannot be completed because unexpected error has occurred. This should be reported",
          "to protocol maintainers."
        ],
        "fields": [
          {
            "type": "pallet_omnipool_liquidity_mining:pallet:InconsistentStateError",
            "type_name": "InconsistentStateError",
            "doc": null
          }
        ]
      },
      {
        "name": "OracleNotAvailable",
        "doc": [
          "Oracle could not be found for requested assets."
        ]
      },
      {
        "name": "PriceAdjustmentNotAvailable",
        "doc": [
          "Oracle providing `price_adjustment` could not be found for requested assets."
        ]
      }
    ],
    "errors_value": {
      "type": 490
    },
    "index": 63
  },
  {
    "name": "OTC",
    "prefix": "OTC",
    "storage": [
      {
        "name": "NextOrderId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " ID sequencer for Orders"
        ]
      },
      {
        "name": "Orders",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_otc:Order",
            "keys_id": 4,
            "value_id": 492
          }
        },
        "fallback": "0x00",
        "docs": null
      }
    ],
    "calls": [
      {
        "lookup": "4000",
        "name": "place_order",
        "docs": [
          "Create a new OTC order",
          " ",
          "Parameters:",
          "- `asset_in`: Asset which is being bought",
          "- `asset_out`: Asset which is being sold",
          "- `amount_in`: Amount that the order is seeking to buy",
          "- `amount_out`: Amount that the order is selling",
          "- `partially_fillable`: Flag indicating whether users can fill the order partially",
          "",
          "Validations:",
          "- asset_in must be registered",
          "- amount_in must be higher than the existential deposit of asset_in multiplied by",
          "  ExistentialDepositMultiplier",
          "- amount_out must be higher than the existential deposit of asset_out multiplied by",
          "  ExistentialDepositMultiplier",
          "",
          "Events:",
          "- `Placed` event when successful."
        ],
        "args": [
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_in",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount_out",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "partially_fillable",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "4001",
        "name": "partial_fill_order",
        "docs": [
          "Fill an OTC order (partially)",
          " ",
          "Parameters:",
          "- `order_id`: ID of the order",
          "- `amount_in`: Amount with which the order is being filled",
          "",
          "Validations:",
          "- order must be partially_fillable",
          "- after the partial_fill, the remaining order.amount_in must be higher than the existential deposit",
          "  of asset_in multiplied by ExistentialDepositMultiplier",
          "- after the partial_fill, the remaining order.amount_out must be higher than the existential deposit",
          "  of asset_out multiplied by ExistentialDepositMultiplier",
          "",
          "Events:",
          "`PartiallyFilled` event when successful."
        ],
        "args": [
          {
            "name": "order_id",
            "type": "U32",
            "type_name": "OrderId"
          },
          {
            "name": "amount_in",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4002",
        "name": "fill_order",
        "docs": [
          "Fill an OTC order (completely)",
          " ",
          "Parameters:",
          "- `order_id`: ID of the order",
          "",
          "Events:",
          "`Filled` event when successful."
        ],
        "args": [
          {
            "name": "order_id",
            "type": "U32",
            "type_name": "OrderId"
          }
        ]
      },
      {
        "lookup": "4003",
        "name": "cancel_order",
        "docs": [
          "Cancel an open OTC order",
          " ",
          "Parameters:",
          "- `order_id`: ID of the order",
          "- `asset`: Asset which is being filled",
          "- `amount`: Amount which is being filled",
          "",
          "Validations:",
          "- caller is order owner",
          "",
          "Emits `Cancelled` event when successful."
        ],
        "args": [
          {
            "name": "order_id",
            "type": "U32",
            "type_name": "OrderId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 297
    },
    "events": [
      {
        "lookup": "4000",
        "name": "Cancelled",
        "docs": [
          "An Order has been cancelled"
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "order_id"
        ],
        "args_type_name": [
          "OrderId"
        ]
      },
      {
        "lookup": "4001",
        "name": "Filled",
        "docs": [
          "An Order has been completely filled"
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "order_id",
          "who",
          "amount_in",
          "amount_out"
        ],
        "args_type_name": [
          "OrderId",
          "AccountId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4002",
        "name": "PartiallyFilled",
        "docs": [
          "An Order has been partially filled"
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "order_id",
          "who",
          "amount_in",
          "amount_out"
        ],
        "args_type_name": [
          "OrderId",
          "AccountId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4003",
        "name": "Placed",
        "docs": [
          "An Order has been placed"
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "U128",
          "U128",
          "Bool"
        ],
        "args_name": [
          "order_id",
          "asset_in",
          "asset_out",
          "amount_in",
          "amount_out",
          "partially_fillable"
        ],
        "args_type_name": [
          "OrderId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "bool"
        ]
      }
    ],
    "events_value": {
      "type": 89
    },
    "constants": [
      {
        "name": "ExistentialDepositMultiplier",
        "type": "U8",
        "type_value": 2,
        "constants_value": "05",
        "docs": null
      }
    ],
    "errors": [
      {
        "name": "AssetNotRegistered",
        "doc": [
          "Asset does not exist in registry"
        ]
      },
      {
        "name": "OrderNotFound",
        "doc": [
          "Order cannot be found"
        ]
      },
      {
        "name": "OrderIdOutOfBound",
        "doc": [
          "Size of order ID exceeds the bound"
        ]
      },
      {
        "name": "OrderNotPartiallyFillable",
        "doc": [
          "Cannot partially fill an order which is not partially fillable"
        ]
      },
      {
        "name": "OrderAmountTooSmall",
        "doc": [
          "Order amount_in and amount_out must at all times be greater than the existential deposit",
          "for the asset multiplied by the ExistentialDepositMultiplier.",
          "A fill order may not leave behind amounts smaller than this."
        ]
      },
      {
        "name": "MathError",
        "doc": [
          "Error with math calculations"
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "The caller does not have permission to complete the action"
        ]
      },
      {
        "name": "InsufficientReservedAmount",
        "doc": [
          "Reserved amount not sufficient."
        ]
      }
    ],
    "errors_value": {
      "type": 493
    },
    "index": 64
  },
  {
    "name": "CircuitBreaker",
    "prefix": "CircuitBreaker",
    "storage": [
      {
        "name": "TradeVolumeLimitPerAsset",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Tuple:U32U32",
            "keys_id": 4,
            "value_id": 91
          }
        },
        "fallback": "0x8813000010270000",
        "docs": [
          " Trade volume limits of assets set by set_trade_volume_limit.",
          " If not set, returns the default limit."
        ]
      },
      {
        "name": "AllowedTradeVolumeLimitPerAsset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_circuit_breaker:TradeVolumeLimit",
            "keys_id": 4,
            "value_id": 494
          }
        },
        "fallback": "0x00",
        "docs": [
          " Trade volumes per asset"
        ]
      },
      {
        "name": "LiquidityAddLimitPerAsset",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "option<Tuple:U32U32>",
            "keys_id": 4,
            "value_id": 92
          }
        },
        "fallback": "0x01f401000010270000",
        "docs": [
          " Liquidity limits of assets for adding liquidity.",
          " If not set, returns the default limit."
        ]
      },
      {
        "name": "AllowedAddLiquidityAmountPerAsset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_circuit_breaker:LiquidityLimit",
            "keys_id": 4,
            "value_id": 495
          }
        },
        "fallback": "0x00",
        "docs": [
          " Add liquidity volumes per asset"
        ]
      },
      {
        "name": "LiquidityRemoveLimitPerAsset",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "option<Tuple:U32U32>",
            "keys_id": 4,
            "value_id": 92
          }
        },
        "fallback": "0x01f401000010270000",
        "docs": [
          " Liquidity limits of assets for removing liquidity.",
          " If not set, returns the default limit."
        ]
      },
      {
        "name": "AllowedRemoveLiquidityAmountPerAsset",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_circuit_breaker:LiquidityLimit",
            "keys_id": 4,
            "value_id": 495
          }
        },
        "fallback": "0x00",
        "docs": [
          " Remove liquidity volumes per asset"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4100",
        "name": "set_trade_volume_limit",
        "docs": [
          "Set trade volume limit for an asset.",
          "",
          "Parameters:",
          "- `origin`: The dispatch origin for this call. Must be `TechnicalOrigin`",
          "- `asset_id`: The identifier of an asset",
          "- `trade_volume_limit`: New trade volume limit represented as a percentage",
          "",
          "Emits `TradeVolumeLimitChanged` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "trade_volume_limit",
            "type": "Tuple:U32U32",
            "type_name": "(u32, u32)"
          }
        ]
      },
      {
        "lookup": "4101",
        "name": "set_add_liquidity_limit",
        "docs": [
          "Set add liquidity limit for an asset.",
          "",
          "Parameters:",
          "- `origin`: The dispatch origin for this call. Must be `TechnicalOrigin`",
          "- `asset_id`: The identifier of an asset",
          "- `liquidity_limit`: Optional add liquidity limit represented as a percentage",
          "",
          "Emits `AddLiquidityLimitChanged` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "liquidity_limit",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<(u32, u32)>"
          }
        ]
      },
      {
        "lookup": "4102",
        "name": "set_remove_liquidity_limit",
        "docs": [
          "Set remove liquidity limit for an asset.",
          "",
          "Parameters:",
          "- `origin`: The dispatch origin for this call. Must be `TechnicalOrigin`",
          "- `asset_id`: The identifier of an asset",
          "- `liquidity_limit`: Optional remove liquidity limit represented as a percentage",
          "",
          "Emits `RemoveLiquidityLimitChanged` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "liquidity_limit",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<(u32, u32)>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 298
    },
    "events": [
      {
        "lookup": "4100",
        "name": "TradeVolumeLimitChanged",
        "docs": [
          "Trade volume limit of an asset was changed."
        ],
        "args": [
          "U32",
          "Tuple:U32U32"
        ],
        "args_name": [
          "asset_id",
          "trade_volume_limit"
        ],
        "args_type_name": [
          "AssetId",
          "(u32, u32)"
        ]
      },
      {
        "lookup": "4101",
        "name": "AddLiquidityLimitChanged",
        "docs": [
          "Add liquidity limit of an asset was changed."
        ],
        "args": [
          "U32",
          "option<Tuple:U32U32>"
        ],
        "args_name": [
          "asset_id",
          "liquidity_limit"
        ],
        "args_type_name": [
          "AssetId",
          "Option<(u32, u32)>"
        ]
      },
      {
        "lookup": "4102",
        "name": "RemoveLiquidityLimitChanged",
        "docs": [
          "Remove liquidity limit of an asset was changed."
        ],
        "args": [
          "U32",
          "option<Tuple:U32U32>"
        ],
        "args_name": [
          "asset_id",
          "liquidity_limit"
        ],
        "args_type_name": [
          "AssetId",
          "Option<(u32, u32)>"
        ]
      }
    ],
    "events_value": {
      "type": 90
    },
    "constants": [
      {
        "name": "DefaultMaxNetTradeVolumeLimitPerBlock",
        "type": "Tuple:U32U32",
        "type_value": 91,
        "constants_value": "8813000010270000",
        "docs": [
          " The maximum percentage of a pool's liquidity that can be traded in a block.",
          " Represented as a non-zero fraction (nominator, denominator) with the max value being 10_000."
        ]
      },
      {
        "name": "DefaultMaxAddLiquidityLimitPerBlock",
        "type": "option<Tuple:U32U32>",
        "type_value": 92,
        "constants_value": "01f401000010270000",
        "docs": [
          " The maximum percentage of a pool's liquidity that can be added in a block.",
          " Represented as an optional non-zero fraction (nominator, denominator) with the max value being 10_000.",
          " If set to None, the limits are not enforced."
        ]
      },
      {
        "name": "DefaultMaxRemoveLiquidityLimitPerBlock",
        "type": "option<Tuple:U32U32>",
        "type_value": 92,
        "constants_value": "01f401000010270000",
        "docs": [
          " The maximum percentage of a pool's liquidity that can be removed in a block.",
          " Represented as an optional non-zero fraction (nominator, denominator) with the max value being 10_000.",
          " If set to None, the limits are not enforced."
        ]
      }
    ],
    "errors": [
      {
        "name": "InvalidLimitValue",
        "doc": [
          "Invalid value for a limit. Limit must be non-zero."
        ]
      },
      {
        "name": "LiquidityLimitNotStoredForAsset",
        "doc": [
          "Allowed liquidity limit is not stored for asset"
        ]
      },
      {
        "name": "TokenOutflowLimitReached",
        "doc": [
          "Token trade outflow per block has been reached"
        ]
      },
      {
        "name": "TokenInfluxLimitReached",
        "doc": [
          "Token trade influx per block has been reached"
        ]
      },
      {
        "name": "MaxLiquidityLimitPerBlockReached",
        "doc": [
          "Maximum pool's liquidity limit per block has been reached"
        ]
      },
      {
        "name": "NotAllowed",
        "doc": [
          "Asset is not allowed to have a limit"
        ]
      }
    ],
    "errors_value": {
      "type": 496
    },
    "index": 65
  },
  {
    "name": "Router",
    "prefix": "Router",
    "storage": [
      {
        "name": "Routes",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "hydradx_traits:router:AssetPair"
            ],
            "value": "Vec<hydradx_traits:router:Trade>",
            "keys_id": 303,
            "value_id": 351
          }
        },
        "fallback": "0x00",
        "docs": [
          " Storing routes for asset pairs"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4300",
        "name": "sell",
        "docs": [
          "Executes a sell with a series of trades specified in the route.",
          "The price for each trade is determined by the corresponding AMM.",
          "",
          "- `origin`: The executor of the trade",
          "- `asset_in`: The identifier of the asset to sell",
          "- `asset_out`: The identifier of the asset to receive",
          "- `amount_in`: The amount of `asset_in` to sell",
          "- `min_amount_out`: The minimum amount of `asset_out` to receive.",
          "- `route`: Series of [`Trade<AssetId>`] to be executed. A [`Trade<AssetId>`] specifies the asset pair (`asset_in`, `asset_out`) and the AMM (`pool`) in which the trade is executed.",
          "\t\t   If not specified, than the on-chain route is used.",
          "\t\t   If no on-chain is present, then omnipool route is used as default",
          "",
          "Emits `RouteExecuted` when successful."
        ],
        "args": [
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_in",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "min_amount_out",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "route",
            "type": "Vec<hydradx_traits:router:Trade>",
            "type_name": "Vec<Trade<AssetId>>"
          }
        ]
      },
      {
        "lookup": "4301",
        "name": "buy",
        "docs": [
          "Executes a buy with a series of trades specified in the route.",
          "The price for each trade is determined by the corresponding AMM.",
          "",
          "- `origin`: The executor of the trade",
          "- `asset_in`: The identifier of the asset to be swapped to buy `asset_out`",
          "- `asset_out`: The identifier of the asset to buy",
          "- `amount_out`: The amount of `asset_out` to buy",
          "- `max_amount_in`: The max amount of `asset_in` to spend on the buy.",
          "- `route`: Series of [`Trade<AssetId>`] to be executed. A [`Trade<AssetId>`] specifies the asset pair (`asset_in`, `asset_out`) and the AMM (`pool`) in which the trade is executed.",
          "\t\t   If not specified, than the on-chain route is used.",
          "\t\t   If no on-chain is present, then omnipool route is used as default",
          "",
          "Emits `RouteExecuted` when successful."
        ],
        "args": [
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_out",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "max_amount_in",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "route",
            "type": "Vec<hydradx_traits:router:Trade>",
            "type_name": "Vec<Trade<AssetId>>"
          }
        ]
      },
      {
        "lookup": "4302",
        "name": "set_route",
        "docs": [
          "Sets the on-chain route for a given asset pair.",
          "",
          "The new route is validated by being executed in a dry-run mode",
          "",
          "If there is no route explicitly set for an asset pair, then we use the omnipool route as default.",
          "",
          "When a new route is set, we compare it to the existing (or default) route.",
          "The comparison happens by calculating sell amount_outs for the routes, but also for the inversed routes.",
          "",
          "The route is stored in an ordered manner, based on the oder of the ids in the asset pair.",
          "",
          "If the route is set successfully, then the fee is payed back.",
          "",
          "- `origin`: The origin of the route setter",
          "- `asset_pair`: The identifier of the asset-pair for which the route is set",
          "- `new_route`: Series of [`Trade<AssetId>`] to be executed. A [`Trade<AssetId>`] specifies the asset pair (`asset_in`, `asset_out`) and the AMM (`pool`) in which the trade is executed.",
          "",
          "Emits `RouteUpdated` when successful.",
          "",
          "Fails with `RouteUpdateIsNotSuccessful` error when failed to set the route",
          ""
        ],
        "args": [
          {
            "name": "asset_pair",
            "type": "hydradx_traits:router:AssetPair",
            "type_name": "AssetPair<AssetId>"
          },
          {
            "name": "new_route",
            "type": "Vec<hydradx_traits:router:Trade>",
            "type_name": "Vec<Trade<AssetId>>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 299
    },
    "events": [
      {
        "lookup": "4300",
        "name": "RouteExecuted",
        "docs": [
          "The route with trades has been successfully executed"
        ],
        "args": [
          "U32",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "asset_in",
          "asset_out",
          "amount_in",
          "amount_out"
        ],
        "args_type_name": [
          "AssetId",
          "AssetId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4301",
        "name": "RouteUpdated",
        "docs": [
          "The route with trades has been successfully executed"
        ],
        "args": [
          "Vec<U32>"
        ],
        "args_name": [
          "asset_ids"
        ],
        "args_type_name": [
          "Vec<AssetId>"
        ]
      }
    ],
    "events_value": {
      "type": 93
    },
    "constants": [
      {
        "name": "NativeAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset Id"
        ]
      }
    ],
    "errors": [
      {
        "name": "TradingLimitReached",
        "doc": [
          "The trading limit has been reached"
        ]
      },
      {
        "name": "MaxTradesExceeded",
        "doc": [
          "The the max number of trades limit is reached"
        ]
      },
      {
        "name": "PoolNotSupported",
        "doc": [
          "The AMM pool is not supported for executing trades"
        ]
      },
      {
        "name": "RouteHasNoTrades",
        "doc": [
          "Route has not trades to be executed"
        ]
      },
      {
        "name": "InsufficientBalance",
        "doc": [
          "The user has not enough balance to execute the trade"
        ]
      },
      {
        "name": "InvalidRouteExecution",
        "doc": [
          "The route execution failed in the underlying AMM"
        ]
      },
      {
        "name": "RouteCalculationFailed",
        "doc": [
          "The calculation of route trade amounts failed in the underlying AMM"
        ]
      },
      {
        "name": "InvalidRoute",
        "doc": [
          "The route is invalid"
        ]
      },
      {
        "name": "RouteUpdateIsNotSuccessful",
        "doc": [
          "The route update was not successful"
        ]
      }
    ],
    "errors_value": {
      "type": 497
    },
    "index": 67
  },
  {
    "name": "DynamicFees",
    "prefix": "DynamicFees",
    "storage": [
      {
        "name": "AssetFee",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_dynamic_fees:types:FeeEntry",
            "keys_id": 4,
            "value_id": 498
          }
        },
        "fallback": "0x00",
        "docs": [
          " Stores last calculated fee of an asset and block number in which it was changed..",
          " Stored as (Asset fee, Protocol fee, Block number)"
        ]
      }
    ],
    "calls_value": {
      "type": 304
    },
    "events_value": {
      "type": 95
    },
    "constants": [
      {
        "name": "AssetFeeParameters",
        "type": "pallet_dynamic_fees:types:FeeParams",
        "type_value": 499,
        "constants_value": "c4090000a00f0000005039278c0400000000000000000000000064a7b3b6e00d0000000000000000",
        "docs": null
      },
      {
        "name": "ProtocolFeeParameters",
        "type": "pallet_dynamic_fees:types:FeeParams",
        "type_value": 499,
        "constants_value": "f4010000e8030000005039278c0400000000000000000000000064a7b3b6e00d0000000000000000",
        "docs": null
      }
    ],
    "errors": null,
    "errors_value": {
      "type": 500
    },
    "index": 68
  },
  {
    "name": "Staking",
    "prefix": "Staking",
    "storage": [
      {
        "name": "Staking",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_staking:types:StakingData",
          "PlainTypeValue": 501
        },
        "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " Global staking state."
        ]
      },
      {
        "name": "Positions",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "pallet_staking:types:Position",
            "keys_id": 6,
            "value_id": 502
          }
        },
        "fallback": "0x00",
        "docs": [
          " User's position state."
        ]
      },
      {
        "name": "NextPositionId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Position ids sequencer."
        ]
      },
      {
        "name": "PositionVotes",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U128"
            ],
            "value": "Vec<Tuple:U32pallet_staking:types:Vote>",
            "keys_id": 6,
            "value_id": 503
          }
        },
        "fallback": "0x00",
        "docs": [
          " List of position votes."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4500",
        "name": "initialize_staking",
        "docs": [
          "Staking pallet initialization. This call will reserved `pot`'s balance to prevent",
          "account dusting and start collecting fees from trades as rewards.",
          "",
          "0x60706f7460e2809973206163636f756e742068617320746f206861766520612062616c616e63652077686963682077696c6c20626520726573657276656420746f2070726576656e74206163636f756e742064757374696e672e",
          "",
          "Emits `StakingInitialized` event when successful.",
          ""
        ],
        "args": null
      },
      {
        "lookup": "4501",
        "name": "stake",
        "docs": [
          "Stake `amount` into a new staking position.",
          "",
          "`stake` locks specified `amount` into staking and creates new NFT representing staking",
          "position.",
          "Users can stake `NativeAssetId` balance which is not vested or already staked.",
          "",
          "Staking pallet must be initialized otherwise extrinsic will fail with error.",
          "",
          "Parameters:",
          "- `amount`: Amount of native asset to be staked. `amount` can't be vested or already",
          "staked",
          "",
          "Emits `PositionCreated` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4502",
        "name": "increase_stake",
        "docs": [
          "Extrinsic to increase staked amount of existing staking position by specified `amount`.",
          "",
          "`increase_stake` increases staked amount of position specified by `postion_id` by the",
          "`amount` specified by the user.",
          "Staking position must exist and `origin` has to be the owner of the position.",
          "Users can stake tokens which are not vested or already staked.",
          "Position's params e.g points are updated to offset stake increase and rewards",
          "accumulated until this point are paid and locked to the user.",
          "",
          "Parameters:",
          "- `position_id`: The identifier of the position which stake will be increased.",
          "- `amount`: Amount of native asset to be added to staked amount. `amount` can't be vested or",
          "already staked",
          "",
          "Emits `StakeAdded` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "position_id",
            "type": "U128",
            "type_name": "PositionItemId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4503",
        "name": "claim",
        "docs": [
          "Claim rewards accumulated for specific staking position.",
          "",
          "Function calculates amount of rewards to pay for specified staking position based on",
          "the amount of points position accumulated. Function also unlocks all the rewards locked",
          "from `increase_stake` based on the amount of the points.",
          "",
          "This action is penalized by removing all the points and returning allocated unpaid rewards",
          "for redistribution.",
          "",
          "Parameters:",
          "- `position_id`: The identifier of the position to claim rewards for.",
          "",
          "Emits `RewardsClaimed` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "position_id",
            "type": "U128",
            "type_name": "PositionItemId"
          }
        ]
      },
      {
        "lookup": "4504",
        "name": "unstake",
        "docs": [
          "Function pays rewards, unlocks all the staked assets and destroys staking position",
          "specified by `position_id`.",
          "",
          "Function calculates and pays latest rewards, unlocks all the locked rewards and staked",
          "tokens for staking position and burns NFT representing staking position.",
          "Unpaid allocated rewards are returned to the Staking for redistribution.",
          "",
          "Parameters:",
          "- `position_id`: The identifier of the position to be destroyed.",
          "",
          "Emits `RewardsClaimed` and `Unstaked` events when successful.",
          ""
        ],
        "args": [
          {
            "name": "position_id",
            "type": "U128",
            "type_name": "PositionItemId"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 305
    },
    "events": [
      {
        "lookup": "4500",
        "name": "PositionCreated",
        "docs": [
          "New staking position was created and NFT was minted."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "position_id",
          "stake"
        ],
        "args_type_name": [
          "AccountId",
          "PositionItemId",
          "Balance"
        ]
      },
      {
        "lookup": "4501",
        "name": "StakeAdded",
        "docs": [
          "Staked amount for existing position was increased."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128",
          "U128",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "position_id",
          "stake",
          "total_stake",
          "locked_rewards",
          "slashed_points",
          "payable_percentage"
        ],
        "args_type_name": [
          "AccountId",
          "PositionItemId",
          "Balance",
          "Balance",
          "Balance",
          "Point",
          "FixedU128"
        ]
      },
      {
        "lookup": "4502",
        "name": "RewardsClaimed",
        "docs": [
          "Rewards were claimed."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128",
          "U128",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "position_id",
          "paid_rewards",
          "unlocked_rewards",
          "slashed_points",
          "slashed_unpaid_rewards",
          "payable_percentage"
        ],
        "args_type_name": [
          "AccountId",
          "PositionItemId",
          "Balance",
          "Balance",
          "Point",
          "Balance",
          "FixedU128"
        ]
      },
      {
        "lookup": "4503",
        "name": "Unstaked",
        "docs": [
          "Staked amount was withdrawn and NFT was burned."
        ],
        "args": [
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "position_id",
          "unlocked_stake"
        ],
        "args_type_name": [
          "AccountId",
          "PositionItemId",
          "Balance"
        ]
      },
      {
        "lookup": "4504",
        "name": "StakingInitialized",
        "docs": [
          "Staking was initialized."
        ],
        "args": [
          "U128"
        ],
        "args_name": [
          "non_dustable_balance"
        ],
        "args_type_name": [
          "Balance"
        ]
      },
      {
        "lookup": "4505",
        "name": "AccumulatedRpsUpdated",
        "docs": [
          "Staking's `accumulated_reward_per_stake` was updated."
        ],
        "args": [
          "U128",
          "U128"
        ],
        "args_name": [
          "accumulated_rps",
          "total_stake"
        ],
        "args_type_name": [
          "FixedU128",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 96
    },
    "constants": [
      {
        "name": "PeriodLength",
        "type": "U32",
        "type_value": 4,
        "constants_value": "201c0000",
        "docs": [
          " Staking period length in blocks."
        ]
      },
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 220,
        "constants_value": "7374616b696e6723",
        "docs": [
          " Pallet id."
        ]
      },
      {
        "name": "NativeAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset ID."
        ]
      },
      {
        "name": "MinStake",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0080c6a47e8d03000000000000000000",
        "docs": [
          " Min amount user must stake."
        ]
      },
      {
        "name": "TimePointsWeight",
        "type": "U32",
        "type_value": 81,
        "constants_value": "40420f00",
        "docs": [
          " Weight of the time points in total points calculations."
        ]
      },
      {
        "name": "ActionPointsWeight",
        "type": "U32",
        "type_value": 509,
        "constants_value": "00c2eb0b",
        "docs": [
          " Weight of the action points in total points calculations."
        ]
      },
      {
        "name": "TimePointsPerPeriod",
        "type": "U8",
        "type_value": 2,
        "constants_value": "01",
        "docs": [
          " Number of time points users receive for each period."
        ]
      },
      {
        "name": "UnclaimablePeriods",
        "type": "U128",
        "type_value": 6,
        "constants_value": "01000000000000000000000000000000",
        "docs": [
          " Number of periods user can't claim rewards for. User can exit but won't receive any rewards.",
          " If he stay longer than `UnclaimablePeriods` he will receive rewards also for these periods."
        ]
      },
      {
        "name": "CurrentStakeWeight",
        "type": "U8",
        "type_value": 2,
        "constants_value": "02",
        "docs": [
          " Weight of the actual stake in slash points calculation. Bigger the value lower the calculated slash points."
        ]
      },
      {
        "name": "MaxVotes",
        "type": "U32",
        "type_value": 4,
        "constants_value": "64000000",
        "docs": [
          " Max amount of votes the user can have at any time."
        ]
      },
      {
        "name": "NFTCollectionId",
        "type": "U128",
        "type_value": 6,
        "constants_value": "ae080000000000000000000000000000",
        "docs": [
          " NFT collection id."
        ]
      }
    ],
    "errors": [
      {
        "name": "InsufficientBalance",
        "doc": [
          "Balance is too low."
        ]
      },
      {
        "name": "InsufficientStake",
        "doc": [
          "Staked amount is too low."
        ]
      },
      {
        "name": "PositionNotFound",
        "doc": [
          "Staking position has not been found."
        ]
      },
      {
        "name": "MaxVotesReached",
        "doc": [
          "Maximum amount of votes were reached for staking position."
        ]
      },
      {
        "name": "NotInitialized",
        "doc": [
          "Staking is not initialized."
        ]
      },
      {
        "name": "AlreadyInitialized",
        "doc": [
          "Staking is already initialized."
        ]
      },
      {
        "name": "Arithmetic",
        "doc": [
          "Arithmetic error."
        ]
      },
      {
        "name": "MissingPotBalance",
        "doc": [
          "Pot's balance is zero."
        ]
      },
      {
        "name": "PositionAlreadyExists",
        "doc": [
          "Account's position already exists."
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "Signer is not an owner of the staking position."
        ]
      },
      {
        "name": "RemoveVoteNotAllowed",
        "doc": [
          "Remove vote is not allowed when referendum is finished and staking position exists."
        ]
      },
      {
        "name": "InconsistentState",
        "doc": [
          "Action cannot be completed because unexpected error has occurred. This should be reported",
          "to protocol maintainers."
        ],
        "fields": [
          {
            "type": "pallet_staking:pallet:InconsistentStateError",
            "type_name": "InconsistentStateError",
            "doc": null
          }
        ]
      }
    ],
    "errors_value": {
      "type": 510
    },
    "index": 69
  },
  {
    "name": "Stableswap",
    "prefix": "Stableswap",
    "storage": [
      {
        "name": "Pools",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_stableswap:types:PoolInfo",
            "keys_id": 4,
            "value_id": 512
          }
        },
        "fallback": "0x00",
        "docs": [
          " Existing pools"
        ]
      },
      {
        "name": "AssetTradability",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "U8",
            "keys_id": 91,
            "value_id": 101
          }
        },
        "fallback": "0x0f",
        "docs": [
          " Tradability state of pool assets."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4600",
        "name": "create_pool",
        "docs": [
          "Create a stableswap pool with given list of asset",
          "",
          "All assets must be correctly registered in `T::AssetRegistry`.",
          "Note that this does not seed the pool with liquidity. Use `add_liquidity` to provide",
          "initial liquidity.",
          "",
          "Parameters:",
          "- `origin`: Must be T::AuthorityOrigin",
          "- `share_asset`: Preregistered share asset identifier",
          "- `assets`: List of Asset ids",
          "- `amplification`: Pool amplification",
          "- `fee`: fee to be applied on trade and liquidity operations",
          "",
          "Emits `PoolCreated` event if successful."
        ],
        "args": [
          {
            "name": "share_asset",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "assets",
            "type": "Vec<U32>",
            "type_name": "Vec<AssetId>"
          },
          {
            "name": "amplification",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "fee",
            "type": "U32",
            "type_name": "Permill"
          }
        ]
      },
      {
        "lookup": "4601",
        "name": "update_pool_fee",
        "docs": [
          "Update pool's fees.",
          "",
          "Updates pool's trade fee and/or withdraw fee.",
          "",
          "if pool does not exist, `PoolNotFound` is returned.",
          "",
          "Parameters:",
          "- `origin`: Must be T::AuthorityOrigin",
          "- `pool_id`: pool to update",
          "- `fee`: new pool fee",
          "",
          "Emits `FeeUpdated` event if successful."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "fee",
            "type": "U32",
            "type_name": "Permill"
          }
        ]
      },
      {
        "lookup": "4602",
        "name": "update_amplification",
        "docs": [
          "Update pool's amplification.",
          "",
          "Parameters:",
          "- `origin`: Must be T::AuthorityOrigin",
          "- `pool_id`: pool to update",
          "- `future_amplification`: new desired pool amplification",
          "- `future_block`: future block number when the amplification is updated",
          "",
          "Emits `AmplificationUpdated` event if successful."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "final_amplification",
            "type": "U16",
            "type_name": "u16"
          },
          {
            "name": "start_block",
            "type": "U32",
            "type_name": "BlockNumber"
          },
          {
            "name": "end_block",
            "type": "U32",
            "type_name": "BlockNumber"
          }
        ]
      },
      {
        "lookup": "4603",
        "name": "add_liquidity",
        "docs": [
          "Add liquidity to selected pool.",
          "",
          "First call of `add_liquidity` adds \"initial liquidity\" of all assets.",
          "",
          "If there is liquidity already in the pool, LP can provide liquidity of any number of pool assets.",
          "",
          "LP must have sufficient amount of each assets.",
          "",
          "Origin is given corresponding amount of shares.",
          "",
          "Parameters:",
          "- `origin`: liquidity provider",
          "- `pool_id`: Pool Id",
          "- `assets`: asset id and liquidity amount provided",
          "",
          "Emits `LiquidityAdded` event when successful."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "assets",
            "type": "Vec<pallet_stableswap:types:AssetAmount>",
            "type_name": "Vec<AssetAmount<AssetId>>"
          }
        ]
      },
      {
        "lookup": "4604",
        "name": "add_liquidity_shares",
        "docs": [
          "Add liquidity to selected pool given exact amount of shares to receive.",
          "",
          "Parameters:",
          "- `origin`: liquidity provider",
          "- `pool_id`: Pool Id",
          "- `shares`: amount of shares to receive",
          "- `asset_id`: asset id of an asset to provide as liquidity",
          "- `max_asset_amount`: slippage limit. Max amount of asset.",
          "",
          "Emits `LiquidityAdded` event when successful."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "shares",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "max_asset_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4605",
        "name": "remove_liquidity_one_asset",
        "docs": [
          "Remove liquidity from selected pool.",
          "",
          "Withdraws liquidity of selected asset from a pool.",
          "",
          "Share amount is burn and LP receives corresponding amount of chosen asset.",
          "",
          "Withdraw fee is applied to the asset amount.",
          "",
          "Parameters:",
          "- `origin`: liquidity provider",
          "- `pool_id`: Pool Id",
          "- `asset_id`: id of asset to receive",
          "- 'share_amount': amount of shares to withdraw",
          "- 'min_amount_out': minimum amount to receive",
          "",
          "Emits `LiquidityRemoved` event when successful."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "share_amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "min_amount_out",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4606",
        "name": "withdraw_asset_amount",
        "docs": [
          "Remove liquidity from selected pool by specifying exact amount of asset to receive.",
          "",
          "Parameters:",
          "- `origin`: liquidity provider",
          "- `pool_id`: Pool Id",
          "- `asset_id`: id of asset to receive",
          "- 'amount': amount of asset to receive",
          "- 'max_share_amount': Slippage limit. Max amount of shares to burn.",
          "",
          "Emits `LiquidityRemoved` event when successful."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "max_share_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4607",
        "name": "sell",
        "docs": [
          "Execute a swap of `asset_in` for `asset_out` by specifying how much to put in.",
          "",
          "Parameters:",
          "- `origin`: origin of the caller",
          "- `pool_id`: Id of a pool",
          "- `asset_in`: ID of asset sold to the pool",
          "- `asset_out`: ID of asset bought from the pool",
          "- `amount_in`: Amount of asset to be sold to the pool",
          "- `min_buy_amount`: Minimum amount required to receive",
          "",
          "Emits `SellExecuted` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_in",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "min_buy_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4608",
        "name": "buy",
        "docs": [
          "Execute a swap of `asset_in` for `asset_out` by specifying how much to get out.",
          "",
          "Parameters:",
          "- `origin`:",
          "- `pool_id`: Id of a pool",
          "- `asset_out`: ID of asset bought from the pool",
          "- `asset_in`: ID of asset sold to the pool",
          "- `amount_out`: Amount of asset to receive from the pool",
          "- `max_sell_amount`: Maximum amount allowed to be sold",
          "",
          "Emits `BuyExecuted` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_out",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "max_sell_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4609",
        "name": "set_asset_tradable_state",
        "docs": null,
        "args": [
          {
            "name": "pool_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "state",
            "type": "U8",
            "type_name": "Tradability"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 306
    },
    "events": [
      {
        "lookup": "4600",
        "name": "PoolCreated",
        "docs": [
          "A pool was created."
        ],
        "args": [
          "U32",
          "Vec<U32>",
          "U16",
          "U32"
        ],
        "args_name": [
          "pool_id",
          "assets",
          "amplification",
          "fee"
        ],
        "args_type_name": [
          "AssetId",
          "Vec<AssetId>",
          "NonZeroU16",
          "Permill"
        ]
      },
      {
        "lookup": "4601",
        "name": "FeeUpdated",
        "docs": [
          "Pool parameters has been updated."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "pool_id",
          "fee"
        ],
        "args_type_name": [
          "AssetId",
          "Permill"
        ]
      },
      {
        "lookup": "4602",
        "name": "LiquidityAdded",
        "docs": [
          "Liquidity of an asset was added to a pool."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "Vec<pallet_stableswap:types:AssetAmount>"
        ],
        "args_name": [
          "pool_id",
          "who",
          "shares",
          "assets"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance",
          "Vec<AssetAmount<AssetId>>"
        ]
      },
      {
        "lookup": "4603",
        "name": "LiquidityRemoved",
        "docs": [
          "Liquidity removed."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "Vec<pallet_stableswap:types:AssetAmount>",
          "U128"
        ],
        "args_name": [
          "pool_id",
          "who",
          "shares",
          "amounts",
          "fee"
        ],
        "args_type_name": [
          "AssetId",
          "AccountId",
          "Balance",
          "Vec<AssetAmount<AssetId>>",
          "Balance"
        ]
      },
      {
        "lookup": "4604",
        "name": "SellExecuted",
        "docs": [
          "Sell trade executed. Trade fee paid in asset leaving the pool (already subtracted from amount_out)."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U32",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "pool_id",
          "asset_in",
          "asset_out",
          "amount_in",
          "amount_out",
          "fee"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4605",
        "name": "BuyExecuted",
        "docs": [
          "Buy trade executed. Trade fee paid in asset entering the pool (already included in amount_in)."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U32",
          "U128",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "pool_id",
          "asset_in",
          "asset_out",
          "amount_in",
          "amount_out",
          "fee"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4606",
        "name": "TradableStateUpdated",
        "docs": [
          "Aseet's tradable state has been updated."
        ],
        "args": [
          "U32",
          "U32",
          "U8"
        ],
        "args_name": [
          "pool_id",
          "asset_id",
          "state"
        ],
        "args_type_name": [
          "AssetId",
          "AssetId",
          "Tradability"
        ]
      },
      {
        "lookup": "4607",
        "name": "AmplificationChanging",
        "docs": [
          "AAmplification of a pool has been scheduled to change."
        ],
        "args": [
          "U32",
          "U16",
          "U16",
          "U32",
          "U32"
        ],
        "args_name": [
          "pool_id",
          "current_amplification",
          "final_amplification",
          "start_block",
          "end_block"
        ],
        "args_type_name": [
          "AssetId",
          "NonZeroU16",
          "NonZeroU16",
          "BlockNumber",
          "BlockNumber"
        ]
      }
    ],
    "events_value": {
      "type": 97
    },
    "constants": [
      {
        "name": "MinPoolLiquidity",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40420f00000000000000000000000000",
        "docs": [
          " Minimum pool liquidity"
        ]
      },
      {
        "name": "MinTradingLimit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "e8030000000000000000000000000000",
        "docs": [
          " Minimum trading amount"
        ]
      },
      {
        "name": "AmplificationRange",
        "type": "RangeInclusive",
        "type_value": 514,
        "constants_value": "02001027",
        "docs": [
          " Amplification inclusive range. Pool's amp can be selected from the range only."
        ]
      }
    ],
    "errors": [
      {
        "name": "IncorrectAssets",
        "doc": [
          "Creating a pool with same assets or less than 2 assets is not allowed."
        ]
      },
      {
        "name": "MaxAssetsExceeded",
        "doc": [
          "Maximum number of assets has been exceeded."
        ]
      },
      {
        "name": "PoolNotFound",
        "doc": [
          "A pool with given assets does not exist."
        ]
      },
      {
        "name": "PoolExists",
        "doc": [
          "A pool with given assets already exists."
        ]
      },
      {
        "name": "AssetNotInPool",
        "doc": [
          "Asset is not in the pool."
        ]
      },
      {
        "name": "AssetInPool",
        "doc": [
          "Asset is already in the pool."
        ]
      },
      {
        "name": "ShareAssetNotRegistered",
        "doc": [
          "Share asset is not registered in Registry."
        ]
      },
      {
        "name": "ShareAssetInPoolAssets",
        "doc": [
          "Share asset is amount assets when creating a pool."
        ]
      },
      {
        "name": "AssetNotRegistered",
        "doc": [
          "One or more assets are not registered in AssetRegistry"
        ]
      },
      {
        "name": "InvalidAssetAmount",
        "doc": [
          "Invalid asset amount provided. Amount must be greater than zero."
        ]
      },
      {
        "name": "InsufficientBalance",
        "doc": [
          "Balance of an asset is not sufficient to perform a trade."
        ]
      },
      {
        "name": "InsufficientShares",
        "doc": [
          "Balance of a share asset is not sufficient to withdraw liquidity."
        ]
      },
      {
        "name": "InsufficientLiquidity",
        "doc": [
          "Liquidity has not reached the required minimum."
        ]
      },
      {
        "name": "InsufficientLiquidityRemaining",
        "doc": [
          "Insufficient liquidity left in the pool after withdrawal."
        ]
      },
      {
        "name": "InsufficientTradingAmount",
        "doc": [
          "Amount is less than the minimum trading amount configured."
        ]
      },
      {
        "name": "BuyLimitNotReached",
        "doc": [
          "Minimum limit has not been reached during trade."
        ]
      },
      {
        "name": "SellLimitExceeded",
        "doc": [
          "Maximum limit has been exceeded during trade."
        ]
      },
      {
        "name": "InvalidInitialLiquidity",
        "doc": [
          "Initial liquidity of asset must be > 0."
        ]
      },
      {
        "name": "BalanceTooLow",
        "doc": [
          "Account balance is too low."
        ]
      },
      {
        "name": "InvalidAmplification",
        "doc": [
          "Amplification is outside configured range."
        ]
      },
      {
        "name": "InsufficientShareBalance",
        "doc": [
          "Remaining balance of share asset is below asset's existential deposit."
        ]
      },
      {
        "name": "NotAllowed",
        "doc": [
          "Not allowed to perform an operation on given asset."
        ]
      },
      {
        "name": "PastBlock",
        "doc": [
          "Future block number is in the past."
        ]
      },
      {
        "name": "SameAmplification",
        "doc": [
          "New amplification is equal to the previous value."
        ]
      },
      {
        "name": "MinimumAmountNotReached",
        "doc": [
          "Desired amount not reached."
        ]
      },
      {
        "name": "SlippageLimit",
        "doc": [
          "Slippage"
        ]
      },
      {
        "name": "UnknownDecimals",
        "doc": [
          "Failed to retrieve asset decimals."
        ]
      }
    ],
    "errors_value": {
      "type": 515
    },
    "index": 70
  },
  {
    "name": "Bonds",
    "prefix": "Bonds",
    "storage": [
      {
        "name": "BondIds",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "Tuple:U32U64"
            ],
            "value": "U32",
            "keys_id": 516,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Registered bond ids.",
          " Maps (underlying asset ID, maturity) -> bond ID"
        ]
      },
      {
        "name": "Bonds",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Tuple:U32U64",
            "keys_id": 4,
            "value_id": 516
          }
        },
        "fallback": "0x00",
        "docs": [
          " Registered bonds.",
          " Maps bond ID -> (underlying asset ID, maturity)"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4700",
        "name": "issue",
        "docs": [
          "Issue new fungible bonds.",
          "New asset id is registered and assigned to the bonds.",
          "The number of bonds the issuer receives is 1:1 to the `amount` of the underlying asset",
          "minus the protocol fee.",
          "The bond asset is registered with the empty string for the asset name,",
          "and with the same existential deposit as of the underlying asset.",
          "Bonds can be redeemed for the underlying asset once mature.",
          "Protocol fee is applied to the amount, and transferred to `T::FeeReceiver`.",
          "When issuing new bonds with the underlying asset and maturity that matches existing bonds,",
          "new amount of these existing bonds is issued, instead of registering new bonds.",
          "It's possible to issue new bonds for bonds that are already mature.",
          "",
          "Parameters:",
          "- `origin`: issuer of new bonds, needs to be `T::IssueOrigin`",
          "- `asset_id`: underlying asset id",
          "- `amount`: the amount of the underlying asset",
          "- `maturity`: Unix time in milliseconds, when the bonds will be mature.",
          "",
          "Emits `BondTokenCreated` event when successful and new bonds were registered.",
          "Emits `BondsIssued` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "asset_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "maturity",
            "type": "U64",
            "type_name": "Moment"
          }
        ]
      },
      {
        "lookup": "4701",
        "name": "redeem",
        "docs": [
          "Redeem bonds for the underlying asset.",
          "The amount of the underlying asset the `origin` receives is 1:1 to the `amount` of the bonds.",
          "Anyone who holds the bonds is able to redeem them.",
          "Bonds can be both partially or fully redeemed.",
          "",
          "Parameters:",
          "- `origin`: account id",
          "- `asset_id`: bond asset id",
          "- `amount`: the amount of the bonds to redeem for the underlying asset",
          "",
          "Emits `BondsRedeemed` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "bond_id",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 307
    },
    "events": [
      {
        "lookup": "4700",
        "name": "TokenCreated",
        "docs": [
          "A bond asset was registered"
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U64"
        ],
        "args_name": [
          "issuer",
          "asset_id",
          "bond_id",
          "maturity"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Moment"
        ]
      },
      {
        "lookup": "4701",
        "name": "Issued",
        "docs": [
          "New bond were issued"
        ],
        "args": [
          "AccountId",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "issuer",
          "bond_id",
          "amount",
          "fee"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4702",
        "name": "Redeemed",
        "docs": [
          "Bonds were redeemed"
        ],
        "args": [
          "AccountId",
          "U32",
          "U128"
        ],
        "args_name": [
          "who",
          "bond_id",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 102
    },
    "constants": [
      {
        "name": "PalletId",
        "type": "[U8; 8]",
        "type_value": 220,
        "constants_value": "706c74626f6e6473",
        "docs": [
          " The pallet id, used for deriving its sovereign account ID."
        ]
      },
      {
        "name": "ProtocolFee",
        "type": "U32",
        "type_value": 81,
        "constants_value": "204e0000",
        "docs": [
          " Protocol fee."
        ]
      },
      {
        "name": "FeeReceiver",
        "type": "AccountId",
        "type_value": 0,
        "constants_value": "6d6f646c70792f74727372790000000000000000000000000000000000000000",
        "docs": [
          " Protocol fee receiver."
        ]
      }
    ],
    "errors": [
      {
        "name": "NotRegistered",
        "doc": [
          "Bond not registered"
        ]
      },
      {
        "name": "NotMature",
        "doc": [
          "Bond is not mature"
        ]
      },
      {
        "name": "InvalidMaturity",
        "doc": [
          "Maturity not long enough"
        ]
      },
      {
        "name": "DisallowedAsset",
        "doc": [
          "Asset type not allowed for underlying asset"
        ]
      }
    ],
    "errors_value": {
      "type": 517
    },
    "index": 71
  },
  {
    "name": "LBP",
    "prefix": "LBP",
    "storage": [
      {
        "name": "PoolData",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "pallet_lbp:Pool",
            "keys_id": 0,
            "value_id": 104
          }
        },
        "fallback": "0x00",
        "docs": [
          " Details of a pool."
        ]
      },
      {
        "name": "FeeCollectorWithAsset",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "Bool",
            "keys_id": 518,
            "value_id": 46
          }
        },
        "fallback": "0x00",
        "docs": [
          " Storage used for tracking existing fee collectors",
          " Not more than one fee collector per asset possible"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4900",
        "name": "create_pool",
        "docs": [
          "Create a new liquidity bootstrapping pool for given asset pair.",
          "",
          "For any asset pair, only one pool can exist at a time.",
          "",
          "The dispatch origin for this call must be `T::CreatePoolOrigin`.",
          "The pool is created with initial liquidity provided by the `pool_owner` who must have",
          "sufficient funds free.",
          "",
          "The pool starts uninitialized and update_pool call should be called once created to set the start block.",
          "",
          "This function should be dispatched from governing entity `T::CreatePoolOrigin`",
          "",
          "Parameters:",
          "- `pool_owner`: the future owner of the new pool.",
          "- `asset_a`: { asset_id, amount } Asset ID and initial liquidity amount.",
          "- `asset_b`: { asset_id, amount } Asset ID and initial liquidity amount.",
          "- `initial_weight`: Initial weight of the asset_a. 1_000_000 corresponding to 1% and 100_000_000 to 100%",
          "this should be higher than final weight",
          "- `final_weight`: Final weight of the asset_a. 1_000_000 corresponding to 1% and 100_000_000 to 100%",
          "this should be lower than initial weight",
          "- `weight_curve`: The weight function used to update the LBP weights. Currently,",
          "there is only one weight function implemented, the linear function.",
          "- `fee`: The trading fee charged on every trade distributed to `fee_collector`.",
          "- `fee_collector`: The account to which trading fees will be transferred.",
          "- `repay_target`: The amount of tokens to repay to separate fee_collector account. Until this amount is",
          "reached, fee will be increased to 20% and taken from the pool",
          "",
          "Emits `PoolCreated` event when successful.",
          "",
          "BEWARE: We are taking the fee from the accumulated asset. If the accumulated asset is sold to the pool,",
          "the fee cost is transferred to the pool. If its bought from the pool the buyer bears the cost.",
          "This increases the price of the sold asset on every trade. Make sure to only run this with",
          "previously illiquid assets."
        ],
        "args": [
          {
            "name": "pool_owner",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "asset_a",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_a_amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "asset_b",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_b_amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "initial_weight",
            "type": "U32",
            "type_name": "LBPWeight"
          },
          {
            "name": "final_weight",
            "type": "U32",
            "type_name": "LBPWeight"
          },
          {
            "name": "weight_curve",
            "type": "pallet_lbp:WeightCurveType",
            "type_name": "WeightCurveType"
          },
          {
            "name": "fee",
            "type": "Tuple:U32U32",
            "type_name": "(u32, u32)"
          },
          {
            "name": "fee_collector",
            "type": "AccountId",
            "type_name": "AccountId"
          },
          {
            "name": "repay_target",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4901",
        "name": "update_pool_data",
        "docs": [
          "Update pool data of a pool.",
          "",
          "The dispatch origin for this call must be signed by the pool owner.",
          "",
          "The pool can be updated only if the sale has not already started.",
          "",
          "At least one of the following optional parameters has to be specified.",
          "",
          "Parameters:",
          "- `pool_id`: The identifier of the pool to be updated.",
          "- `start`: The new starting time of the sale. This parameter is optional.",
          "- `end`: The new ending time of the sale. This parameter is optional.",
          "- `initial_weight`: The new initial weight. This parameter is optional.",
          "- `final_weight`: The new final weight. This parameter is optional.",
          "- `fee`: The new trading fee charged on every trade. This parameter is optional.",
          "- `fee_collector`: The new receiver of trading fees. This parameter is optional.",
          "",
          "Emits `PoolUpdated` event when successful."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "AccountId",
            "type_name": "PoolId"
          },
          {
            "name": "pool_owner",
            "type": "option<AccountId>",
            "type_name": "Option<AccountId>"
          },
          {
            "name": "start",
            "type": "option<U32>",
            "type_name": "Option<BlockNumber>"
          },
          {
            "name": "end",
            "type": "option<U32>",
            "type_name": "Option<BlockNumber>"
          },
          {
            "name": "initial_weight",
            "type": "option<U32>",
            "type_name": "Option<LBPWeight>"
          },
          {
            "name": "final_weight",
            "type": "option<U32>",
            "type_name": "Option<LBPWeight>"
          },
          {
            "name": "fee",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<(u32, u32)>"
          },
          {
            "name": "fee_collector",
            "type": "option<AccountId>",
            "type_name": "Option<AccountId>"
          },
          {
            "name": "repay_target",
            "type": "option<U128>",
            "type_name": "Option<Balance>"
          }
        ]
      },
      {
        "lookup": "4902",
        "name": "add_liquidity",
        "docs": [
          "Add liquidity to a pool.",
          "",
          "Assets to add has to match the pool assets. At least one amount has to be non-zero.",
          "",
          "The dispatch origin for this call must be signed by the pool owner.",
          "",
          "Parameters:",
          "- `pool_id`: The identifier of the pool",
          "- `amount_a`: The identifier of the asset and the amount to add.",
          "- `amount_b`: The identifier of the second asset and the amount to add.",
          "",
          "Emits `LiquidityAdded` event when successful."
        ],
        "args": [
          {
            "name": "amount_a",
            "type": "Tuple:U32U128",
            "type_name": "(AssetId, BalanceOf)"
          },
          {
            "name": "amount_b",
            "type": "Tuple:U32U128",
            "type_name": "(AssetId, BalanceOf)"
          }
        ]
      },
      {
        "lookup": "4903",
        "name": "remove_liquidity",
        "docs": [
          "Transfer all the liquidity from a pool back to the pool owner and destroy the pool.",
          "The pool data are also removed from the storage.",
          "",
          "The pool can't be destroyed during the sale.",
          "",
          "The dispatch origin for this call must be signed by the pool owner.",
          "",
          "Parameters:",
          "- `amount_a`: The identifier of the asset and the amount to add.",
          "",
          "Emits 'LiquidityRemoved' when successful."
        ],
        "args": [
          {
            "name": "pool_id",
            "type": "AccountId",
            "type_name": "PoolId"
          }
        ]
      },
      {
        "lookup": "4904",
        "name": "sell",
        "docs": [
          "Trade `asset_in` for `asset_out`.",
          "",
          "Executes a swap of `asset_in` for `asset_out`. Price is determined by the pool and is",
          "affected by the amount and proportion of the pool assets and the weights.",
          "",
          "Trading `fee` is distributed to the `fee_collector`.",
          "",
          "Parameters:",
          "- `asset_in`: The identifier of the asset being transferred from the account to the pool.",
          "- `asset_out`: The identifier of the asset being transferred from the pool to the account.",
          "- `amount`: The amount of `asset_in`",
          "- `max_limit`: minimum amount of `asset_out` / amount of asset_out to be obtained from the pool in exchange for `asset_in`.",
          "",
          "Emits `SellExecuted` when successful."
        ],
        "args": [
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "BalanceOf"
          },
          {
            "name": "max_limit",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "4905",
        "name": "buy",
        "docs": [
          "Trade `asset_in` for `asset_out`.",
          "",
          "Executes a swap of `asset_in` for `asset_out`. Price is determined by the pool and is",
          "affected by the amount and the proportion of the pool assets and the weights.",
          "",
          "Trading `fee` is distributed to the `fee_collector`.",
          "",
          "Parameters:",
          "- `asset_in`: The identifier of the asset being transferred from the account to the pool.",
          "- `asset_out`: The identifier of the asset being transferred from the pool to the account.",
          "- `amount`: The amount of `asset_out`.",
          "- `max_limit`: maximum amount of `asset_in` to be sold in exchange for `asset_out`.",
          "",
          "Emits `BuyExecuted` when successful."
        ],
        "args": [
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "BalanceOf"
          },
          {
            "name": "max_limit",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 308
    },
    "events": [
      {
        "lookup": "4900",
        "name": "PoolCreated",
        "docs": [
          "Pool was created by the `CreatePool` origin."
        ],
        "args": [
          "AccountId",
          "pallet_lbp:Pool"
        ],
        "args_name": [
          "pool",
          "data"
        ],
        "args_type_name": [
          "PoolId",
          "Pool<AccountId, BlockNumber>"
        ]
      },
      {
        "lookup": "4901",
        "name": "PoolUpdated",
        "docs": [
          "Pool data were updated."
        ],
        "args": [
          "AccountId",
          "pallet_lbp:Pool"
        ],
        "args_name": [
          "pool",
          "data"
        ],
        "args_type_name": [
          "PoolId",
          "Pool<AccountId, BlockNumber>"
        ]
      },
      {
        "lookup": "4902",
        "name": "LiquidityAdded",
        "docs": [
          "New liquidity was provided to the pool."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_a",
          "asset_b",
          "amount_a",
          "amount_b"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "BalanceOf",
          "BalanceOf"
        ]
      },
      {
        "lookup": "4903",
        "name": "LiquidityRemoved",
        "docs": [
          "Liquidity was removed from the pool and the pool was destroyed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_a",
          "asset_b",
          "amount_a",
          "amount_b"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "BalanceOf",
          "BalanceOf"
        ]
      },
      {
        "lookup": "4904",
        "name": "SellExecuted",
        "docs": [
          "Sale executed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128",
          "U32",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_in",
          "asset_out",
          "amount",
          "sale_price",
          "fee_asset",
          "fee_amount"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "BalanceOf",
          "BalanceOf",
          "AssetId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "4905",
        "name": "BuyExecuted",
        "docs": [
          "Purchase executed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128",
          "U32",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_out",
          "asset_in",
          "amount",
          "buy_price",
          "fee_asset",
          "fee_amount"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "BalanceOf",
          "BalanceOf",
          "AssetId",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 103
    },
    "constants": [
      {
        "name": "MinTradingLimit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "e8030000000000000000000000000000",
        "docs": [
          " Minimum trading limit, sole purpose of this is to keep the math working"
        ]
      },
      {
        "name": "MinPoolLiquidity",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40420f00000000000000000000000000",
        "docs": [
          " Minimum pool liquidity, sole purpose of this is to keep the math working"
        ]
      },
      {
        "name": "MaxInRatio",
        "type": "U128",
        "type_value": 6,
        "constants_value": "03000000000000000000000000000000",
        "docs": [
          " Max fraction of pool to sell in single transaction"
        ]
      },
      {
        "name": "MaxOutRatio",
        "type": "U128",
        "type_value": 6,
        "constants_value": "03000000000000000000000000000000",
        "docs": [
          " Max fraction of pool to buy in single transaction"
        ]
      },
      {
        "name": "repay_fee",
        "type": "Tuple:U32U32",
        "type_value": 91,
        "constants_value": "020000000a000000",
        "docs": null
      }
    ],
    "errors": [
      {
        "name": "CannotCreatePoolWithSameAssets",
        "doc": [
          "Pool assets can not be the same"
        ]
      },
      {
        "name": "NotOwner",
        "doc": [
          "Account is not a pool owner"
        ]
      },
      {
        "name": "SaleStarted",
        "doc": [
          "Sale already started"
        ]
      },
      {
        "name": "SaleNotEnded",
        "doc": [
          "Sale is still in progress"
        ]
      },
      {
        "name": "SaleIsNotRunning",
        "doc": [
          "Sale is not running"
        ]
      },
      {
        "name": "MaxSaleDurationExceeded",
        "doc": [
          "Sale duration is too long"
        ]
      },
      {
        "name": "CannotAddZeroLiquidity",
        "doc": [
          "Liquidity being added should not be zero"
        ]
      },
      {
        "name": "InsufficientAssetBalance",
        "doc": [
          "Asset balance too low"
        ]
      },
      {
        "name": "PoolNotFound",
        "doc": [
          "Pool does not exist"
        ]
      },
      {
        "name": "PoolAlreadyExists",
        "doc": [
          "Pool has been already created"
        ]
      },
      {
        "name": "InvalidBlockRange",
        "doc": [
          "Invalid block range"
        ]
      },
      {
        "name": "WeightCalculationError",
        "doc": [
          "Calculation error"
        ]
      },
      {
        "name": "InvalidWeight",
        "doc": [
          "Weight set is out of range"
        ]
      },
      {
        "name": "ZeroAmount",
        "doc": [
          "Can not perform a trade with zero amount"
        ]
      },
      {
        "name": "MaxInRatioExceeded",
        "doc": [
          "Trade amount is too high"
        ]
      },
      {
        "name": "MaxOutRatioExceeded",
        "doc": [
          "Trade amount is too high"
        ]
      },
      {
        "name": "FeeAmountInvalid",
        "doc": [
          "Invalid fee amount"
        ]
      },
      {
        "name": "TradingLimitReached",
        "doc": [
          "Trading limit reached"
        ]
      },
      {
        "name": "Overflow",
        "doc": [
          "An unexpected integer overflow occurred"
        ]
      },
      {
        "name": "NothingToUpdate",
        "doc": [
          "Nothing to update"
        ]
      },
      {
        "name": "InsufficientLiquidity",
        "doc": [
          "Liquidity has not reached the required minimum."
        ]
      },
      {
        "name": "InsufficientTradingAmount",
        "doc": [
          "Amount is less than minimum trading limit."
        ]
      },
      {
        "name": "FeeCollectorWithAssetAlreadyUsed",
        "doc": [
          "Not more than one fee collector per asset id"
        ]
      }
    ],
    "errors_value": {
      "type": 519
    },
    "index": 73
  },
  {
    "name": "XYK",
    "prefix": "XYK",
    "storage": [
      {
        "name": "ShareToken",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U32",
            "keys_id": 0,
            "value_id": 4
          }
        },
        "fallback": "0x00000000",
        "docs": [
          " Asset id storage for shared pool tokens"
        ]
      },
      {
        "name": "TotalLiquidity",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U128",
            "keys_id": 0,
            "value_id": 6
          }
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Total liquidity in a pool."
        ]
      },
      {
        "name": "PoolAssets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Tuple:U32U32",
            "keys_id": 0,
            "value_id": 91
          }
        },
        "fallback": "0x00",
        "docs": [
          " Asset pair in a pool."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4a00",
        "name": "create_pool",
        "docs": [
          "Create new pool for given asset pair.",
          "",
          "Registers new pool for given asset pair (`asset a` and `asset b`) in asset registry.",
          "Asset registry creates new id or returns previously created one if such pool existed before.",
          "",
          "Pool is created with initial liquidity provided by `origin`.",
          "Shares are issued with specified initial price and represents proportion of asset in the pool.",
          "",
          "Emits `PoolCreated` event when successful."
        ],
        "args": [
          {
            "name": "asset_a",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_a",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "asset_b",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_b",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4a01",
        "name": "add_liquidity",
        "docs": [
          "Add liquidity to previously created asset pair pool.",
          "",
          "Shares are issued with current price.",
          "",
          "Emits `LiquidityAdded` event when successful."
        ],
        "args": [
          {
            "name": "asset_a",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_b",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount_a",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "amount_b_max_limit",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4a02",
        "name": "remove_liquidity",
        "docs": [
          "Remove liquidity from specific liquidity pool in the form of burning shares.",
          "",
          "If liquidity in the pool reaches 0, it is destroyed.",
          "",
          "Emits 'LiquidityRemoved' when successful.",
          "Emits 'PoolDestroyed' when pool is destroyed."
        ],
        "args": [
          {
            "name": "asset_a",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_b",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "liquidity_amount",
            "type": "U128",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4a03",
        "name": "sell",
        "docs": [
          "Trade asset in for asset out.",
          "",
          "Executes a swap of `asset_in` for `asset_out`. Price is determined by the liquidity pool.",
          "",
          "`max_limit` - minimum amount of `asset_out` / amount of asset_out to be obtained from the pool in exchange for `asset_in`.",
          "",
          "Emits `SellExecuted` when successful."
        ],
        "args": [
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "max_limit",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "discount",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "4a04",
        "name": "buy",
        "docs": [
          "Trade asset in for asset out.",
          "",
          "Executes a swap of `asset_in` for `asset_out`. Price is determined by the liquidity pool.",
          "",
          "`max_limit` - maximum amount of `asset_in` to be sold in exchange for `asset_out`.",
          "",
          "Emits `BuyExecuted` when successful."
        ],
        "args": [
          {
            "name": "asset_out",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "asset_in",
            "type": "U32",
            "type_name": "AssetId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "max_limit",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "discount",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 310
    },
    "events": [
      {
        "lookup": "4a00",
        "name": "LiquidityAdded",
        "docs": [
          "New liquidity was provided to the pool."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_a",
          "asset_b",
          "amount_a",
          "amount_b"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4a01",
        "name": "LiquidityRemoved",
        "docs": [
          "Liquidity was removed from the pool."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128"
        ],
        "args_name": [
          "who",
          "asset_a",
          "asset_b",
          "shares"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance"
        ]
      },
      {
        "lookup": "4a02",
        "name": "PoolCreated",
        "docs": [
          "Pool was created."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "who",
          "asset_a",
          "asset_b",
          "initial_shares_amount",
          "share_token",
          "pool"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance",
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "4a03",
        "name": "PoolDestroyed",
        "docs": [
          "Pool was destroyed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "who",
          "asset_a",
          "asset_b",
          "share_token",
          "pool"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "AssetId",
          "AccountId"
        ]
      },
      {
        "lookup": "4a04",
        "name": "SellExecuted",
        "docs": [
          "Asset sale executed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128",
          "U32",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "who",
          "asset_in",
          "asset_out",
          "amount",
          "sale_price",
          "fee_asset",
          "fee_amount",
          "pool"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "AssetId",
          "Balance",
          "AccountId"
        ]
      },
      {
        "lookup": "4a05",
        "name": "BuyExecuted",
        "docs": [
          "Asset purchase executed."
        ],
        "args": [
          "AccountId",
          "U32",
          "U32",
          "U128",
          "U128",
          "U32",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "who",
          "asset_out",
          "asset_in",
          "amount",
          "buy_price",
          "fee_asset",
          "fee_amount",
          "pool"
        ],
        "args_type_name": [
          "AccountId",
          "AssetId",
          "AssetId",
          "Balance",
          "Balance",
          "AssetId",
          "Balance",
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 107
    },
    "constants": [
      {
        "name": "NativeAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset Id"
        ]
      },
      {
        "name": "GetExchangeFee",
        "type": "Tuple:U32U32",
        "type_value": 91,
        "constants_value": "03000000e8030000",
        "docs": [
          " Trading fee rate"
        ]
      },
      {
        "name": "MinTradingLimit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "e8030000000000000000000000000000",
        "docs": [
          " Minimum trading limit"
        ]
      },
      {
        "name": "MinPoolLiquidity",
        "type": "U128",
        "type_value": 6,
        "constants_value": "40420f00000000000000000000000000",
        "docs": [
          " Minimum pool liquidity"
        ]
      },
      {
        "name": "MaxInRatio",
        "type": "U128",
        "type_value": 6,
        "constants_value": "03000000000000000000000000000000",
        "docs": [
          " Max fraction of pool to sell in single transaction"
        ]
      },
      {
        "name": "MaxOutRatio",
        "type": "U128",
        "type_value": 6,
        "constants_value": "03000000000000000000000000000000",
        "docs": [
          " Max fraction of pool to buy in single transaction"
        ]
      },
      {
        "name": "OracleSource",
        "type": "[U8; 8]",
        "type_value": 109,
        "constants_value": "687964726178796b",
        "docs": [
          " Oracle source identifier for this pallet."
        ]
      }
    ],
    "errors": [
      {
        "name": "CannotCreatePoolWithSameAssets",
        "doc": [
          "It is not allowed to create a pool between same assets."
        ]
      },
      {
        "name": "InsufficientLiquidity",
        "doc": [
          "Liquidity has not reached the required minimum."
        ]
      },
      {
        "name": "InsufficientTradingAmount",
        "doc": [
          "Amount is less than min trading limit."
        ]
      },
      {
        "name": "ZeroLiquidity",
        "doc": [
          "Liquidity is zero."
        ]
      },
      {
        "name": "ZeroInitialPrice",
        "doc": [
          "It is not allowed to create a pool with zero initial price.",
          "Not used, kept for backward compatibility"
        ]
      },
      {
        "name": "CreatePoolAssetAmountInvalid",
        "doc": [
          "Overflow",
          "Not used, kept for backward compatibility"
        ]
      },
      {
        "name": "InvalidMintedLiquidity",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "InvalidLiquidityAmount",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "AssetAmountExceededLimit",
        "doc": [
          "Asset amount has exceeded given limit."
        ]
      },
      {
        "name": "AssetAmountNotReachedLimit",
        "doc": [
          "Asset amount has not reached given limit."
        ]
      },
      {
        "name": "InsufficientAssetBalance",
        "doc": [
          "Asset balance is not sufficient."
        ]
      },
      {
        "name": "InsufficientPoolAssetBalance",
        "doc": [
          "Not enough asset liquidity in the pool."
        ]
      },
      {
        "name": "InsufficientNativeCurrencyBalance",
        "doc": [
          "Not enough core asset liquidity in the pool."
        ]
      },
      {
        "name": "TokenPoolNotFound",
        "doc": [
          "Liquidity pool for given assets does not exist."
        ]
      },
      {
        "name": "TokenPoolAlreadyExists",
        "doc": [
          "Liquidity pool for given assets already exists."
        ]
      },
      {
        "name": "AddAssetAmountInvalid",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "RemoveAssetAmountInvalid",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "SellAssetAmountInvalid",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "BuyAssetAmountInvalid",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "FeeAmountInvalid",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "CannotApplyDiscount",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "MaxOutRatioExceeded",
        "doc": [
          "Max fraction of pool to buy in single transaction has been exceeded."
        ]
      },
      {
        "name": "MaxInRatioExceeded",
        "doc": [
          "Max fraction of pool to sell in single transaction has been exceeded."
        ]
      },
      {
        "name": "Overflow",
        "doc": [
          "Overflow"
        ]
      },
      {
        "name": "CannotCreatePool",
        "doc": [
          "Pool cannot be created due to outside factors."
        ]
      }
    ],
    "errors_value": {
      "type": 520
    },
    "index": 74
  },
  {
    "name": "Tokens",
    "prefix": "Tokens",
    "storage": [
      {
        "name": "TotalIssuance",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U128",
            "keys_id": 4,
            "value_id": 6
          }
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The total issuance of a token type."
        ]
      },
      {
        "name": "Locks",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "Vec<orml_tokens:BalanceLock>",
            "keys_id": 518,
            "value_id": 521
          }
        },
        "fallback": "0x00",
        "docs": [
          " Any liquidity locks of a token type under an account.",
          " NOTE: Should only be accessed when setting, changing and freeing a lock."
        ]
      },
      {
        "name": "Accounts",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "orml_tokens:AccountData",
            "keys_id": 518,
            "value_id": 524
          }
        },
        "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The balance of a token type under an account.",
          "",
          " NOTE: If the total is ever zero, decrease account ref account.",
          "",
          " NOTE: This is only used in the case that this module is used to store",
          " balances."
        ]
      },
      {
        "name": "Reserves",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "Vec<orml_tokens:ReserveData>",
            "keys_id": 518,
            "value_id": 525
          }
        },
        "fallback": "0x00",
        "docs": [
          " Named reserves on some account balances."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4d00",
        "name": "transfer",
        "docs": [
          "Transfer some liquid free balance to another account.",
          "",
          "`transfer` will set the `FreeBalance` of the sender and receiver.",
          "It will decrease the total issuance of the system by the",
          "`TransferFee`. If the sender's account is below the existential",
          "deposit as a result of the transfer, the account will be reaped.",
          "",
          "The dispatch origin for this call must be `Signed` by the",
          "transactor.",
          "",
          "- `dest`: The recipient of the transfer.",
          "- `currency_id`: currency type.",
          "- `amount`: free balance amount to tranfer."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4d01",
        "name": "transfer_all",
        "docs": [
          "Transfer all remaining balance to the given account.",
          "",
          "NOTE: This function only attempts to transfer _transferable_",
          "balances. This means that any locked, reserved, or existential",
          "deposits (when `keep_alive` is `true`), will not be transferred by",
          "this function. To ensure that this function results in a killed",
          "account, you might need to prepare the account by removing any",
          "reference counters, storage deposits, etc...",
          "",
          "The dispatch origin for this call must be `Signed` by the",
          "transactor.",
          "",
          "- `dest`: The recipient of the transfer.",
          "- `currency_id`: currency type.",
          "- `keep_alive`: A boolean to determine if the `transfer_all`",
          "  operation should send all of the funds the account has, causing",
          "  the sender account to be killed (false), or transfer everything",
          "  except at least the existential deposit, which will guarantee to",
          "  keep the sender account alive (true)."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "keep_alive",
            "type": "Bool",
            "type_name": "bool"
          }
        ]
      },
      {
        "lookup": "4d02",
        "name": "transfer_keep_alive",
        "docs": [
          "Same as the [`transfer`] call, but with a check that the transfer",
          "will not kill the origin account.",
          "",
          "99% of the time you want [`transfer`] instead.",
          "",
          "The dispatch origin for this call must be `Signed` by the",
          "transactor.",
          "",
          "- `dest`: The recipient of the transfer.",
          "- `currency_id`: currency type.",
          "- `amount`: free balance amount to tranfer."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4d03",
        "name": "force_transfer",
        "docs": [
          "Exactly as `transfer`, except the origin must be root and the source",
          "account may be specified.",
          "",
          "The dispatch origin for this call must be _Root_.",
          "",
          "- `source`: The sender of the transfer.",
          "- `dest`: The recipient of the transfer.",
          "- `currency_id`: currency type.",
          "- `amount`: free balance amount to tranfer."
        ],
        "args": [
          {
            "name": "source",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      },
      {
        "lookup": "4d04",
        "name": "set_balance",
        "docs": [
          "Set the balances of a given account.",
          "",
          "This will alter `FreeBalance` and `ReservedBalance` in storage. it",
          "will also decrease the total issuance of the system",
          "(`TotalIssuance`). If the new free or reserved balance is below the",
          "existential deposit, it will reap the `AccountInfo`.",
          "",
          "The dispatch origin for this call is `root`."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "new_free",
            "type": "compact<U128>",
            "type_name": "Balance"
          },
          {
            "name": "new_reserved",
            "type": "compact<U128>",
            "type_name": "Balance"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 311
    },
    "events": [
      {
        "lookup": "4d00",
        "name": "Endowed",
        "docs": [
          "An account was created with some free balance."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d01",
        "name": "DustLost",
        "docs": [
          "An account was removed whose balance was non-zero but below",
          "ExistentialDeposit, resulting in an outright loss."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d02",
        "name": "Transfer",
        "docs": [
          "Transfer succeeded."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d03",
        "name": "Reserved",
        "docs": [
          "Some balance was reserved (moved from free to reserved)."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d04",
        "name": "Unreserved",
        "docs": [
          "Some balance was unreserved (moved from reserved to free)."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d05",
        "name": "ReserveRepatriated",
        "docs": [
          "Some reserved balance was repatriated (moved from reserved to",
          "another account)."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128",
          "frame_support:traits:tokens:misc:BalanceStatus"
        ],
        "args_name": [
          "currency_id",
          "from",
          "to",
          "amount",
          "status"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "AccountId",
          "Balance",
          "BalanceStatus"
        ]
      },
      {
        "lookup": "4d06",
        "name": "BalanceSet",
        "docs": [
          "A balance was set by root."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "free",
          "reserved"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4d07",
        "name": "TotalIssuanceSet",
        "docs": [
          "The total issuance of an currency has been set"
        ],
        "args": [
          "U32",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "Balance"
        ]
      },
      {
        "lookup": "4d08",
        "name": "Withdrawn",
        "docs": [
          "Some balances were withdrawn (e.g. pay for transaction fee)"
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d09",
        "name": "Slashed",
        "docs": [
          "Some balances were slashed (e.g. due to mis-behavior)"
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "free_amount",
          "reserved_amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4d0a",
        "name": "Deposited",
        "docs": [
          "Deposited some balance into an account"
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d0b",
        "name": "LockSet",
        "docs": [
          "Some funds are locked"
        ],
        "args": [
          "[U8; 8]",
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "lock_id",
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "LockIdentifier",
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d0c",
        "name": "LockRemoved",
        "docs": [
          "Some locked funds were unlocked"
        ],
        "args": [
          "[U8; 8]",
          "U32",
          "AccountId"
        ],
        "args_name": [
          "lock_id",
          "currency_id",
          "who"
        ],
        "args_type_name": [
          "LockIdentifier",
          "CurrencyId",
          "AccountId"
        ]
      },
      {
        "lookup": "4d0d",
        "name": "Locked",
        "docs": [
          "Some free balance was locked."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      },
      {
        "lookup": "4d0e",
        "name": "Unlocked",
        "docs": [
          "Some locked balance was freed."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyId",
          "AccountId",
          "Balance"
        ]
      }
    ],
    "events_value": {
      "type": 108
    },
    "constants": [
      {
        "name": "MaxLocks",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": null
      },
      {
        "name": "MaxReserves",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of named reserves that can exist on an account."
        ]
      }
    ],
    "errors": [
      {
        "name": "BalanceTooLow",
        "doc": [
          "The balance is too low"
        ]
      },
      {
        "name": "AmountIntoBalanceFailed",
        "doc": [
          "Cannot convert Amount into Balance type"
        ]
      },
      {
        "name": "LiquidityRestrictions",
        "doc": [
          "Failed because liquidity restrictions due to locking"
        ]
      },
      {
        "name": "MaxLocksExceeded",
        "doc": [
          "Failed because the maximum locks was exceeded"
        ]
      },
      {
        "name": "KeepAlive",
        "doc": [
          "Transfer/payment would kill account"
        ]
      },
      {
        "name": "ExistentialDeposit",
        "doc": [
          "Value too low to create account due to existential deposit"
        ]
      },
      {
        "name": "DeadAccount",
        "doc": [
          "Beneficiary account must pre-exist"
        ]
      },
      {
        "name": "TooManyReserves",
        "doc": null
      }
    ],
    "errors_value": {
      "type": 528
    },
    "index": 77
  },
  {
    "name": "Currencies",
    "prefix": "",
    "storage": null,
    "calls": [
      {
        "lookup": "4f00",
        "name": "transfer",
        "docs": [
          "Transfer some balance to another account under `currency_id`.",
          "",
          "The dispatch origin for this call must be `Signed` by the",
          "transactor."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyIdOf"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "4f01",
        "name": "transfer_native_currency",
        "docs": [
          "Transfer some native currency to another account.",
          "",
          "The dispatch origin for this call must be `Signed` by the",
          "transactor."
        ],
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "amount",
            "type": "compact<U128>",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "4f02",
        "name": "update_balance",
        "docs": [
          "update amount of account `who` under `currency_id`.",
          "",
          "The dispatch origin of this call must be _Root_."
        ],
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyIdOf"
          },
          {
            "name": "amount",
            "type": "I128",
            "type_name": "AmountOf"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 312
    },
    "events": [
      {
        "lookup": "4f00",
        "name": "Transferred",
        "docs": [
          "Currency transfer success."
        ],
        "args": [
          "U32",
          "AccountId",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "from",
          "to",
          "amount"
        ],
        "args_type_name": [
          "CurrencyIdOf",
          "AccountId",
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "4f01",
        "name": "BalanceUpdated",
        "docs": [
          "Update balance success."
        ],
        "args": [
          "U32",
          "AccountId",
          "I128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyIdOf",
          "AccountId",
          "AmountOf"
        ]
      },
      {
        "lookup": "4f02",
        "name": "Deposited",
        "docs": [
          "Deposit success."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyIdOf",
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "4f03",
        "name": "Withdrawn",
        "docs": [
          "Withdraw success."
        ],
        "args": [
          "U32",
          "AccountId",
          "U128"
        ],
        "args_name": [
          "currency_id",
          "who",
          "amount"
        ],
        "args_type_name": [
          "CurrencyIdOf",
          "AccountId",
          "BalanceOf"
        ]
      }
    ],
    "events_value": {
      "type": 110
    },
    "constants": [
      {
        "name": "GetNativeCurrencyId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": null
      }
    ],
    "errors": [
      {
        "name": "AmountIntoBalanceFailed",
        "doc": [
          "Unable to convert the Amount type into Balance."
        ]
      },
      {
        "name": "BalanceTooLow",
        "doc": [
          "Balance is too low."
        ]
      },
      {
        "name": "DepositFailed",
        "doc": [
          "Deposit result is not expected"
        ]
      }
    ],
    "errors_value": {
      "type": 529
    },
    "index": 79
  },
  {
    "name": "Vesting",
    "prefix": "Vesting",
    "storage": [
      {
        "name": "VestingSchedules",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<orml_vesting:VestingSchedule>",
            "keys_id": 0,
            "value_id": 530
          }
        },
        "fallback": "0x00",
        "docs": [
          " Vesting schedules of an account.",
          "",
          " VestingSchedules: map AccountId => Vec<VestingSchedule>"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "5100",
        "name": "claim",
        "docs": null,
        "args": null
      },
      {
        "lookup": "5101",
        "name": "vested_transfer",
        "docs": null,
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "schedule",
            "type": "orml_vesting:VestingSchedule",
            "type_name": "VestingScheduleOf"
          }
        ]
      },
      {
        "lookup": "5102",
        "name": "update_vesting_schedules",
        "docs": null,
        "args": [
          {
            "name": "who",
            "type": "AccountId",
            "type_name": "Address"
          },
          {
            "name": "vesting_schedules",
            "type": "Vec<orml_vesting:VestingSchedule>",
            "type_name": "Vec<VestingScheduleOf>"
          }
        ]
      },
      {
        "lookup": "5103",
        "name": "claim_for",
        "docs": null,
        "args": [
          {
            "name": "dest",
            "type": "AccountId",
            "type_name": "Address"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 313
    },
    "events": [
      {
        "lookup": "5100",
        "name": "VestingScheduleAdded",
        "docs": [
          "Added new vesting schedule."
        ],
        "args": [
          "AccountId",
          "AccountId",
          "orml_vesting:VestingSchedule"
        ],
        "args_name": [
          "from",
          "to",
          "vesting_schedule"
        ],
        "args_type_name": [
          "AccountId",
          "AccountId",
          "VestingScheduleOf"
        ]
      },
      {
        "lookup": "5101",
        "name": "Claimed",
        "docs": [
          "Claimed vesting."
        ],
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "who",
          "amount"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "5102",
        "name": "VestingSchedulesUpdated",
        "docs": [
          "Updated vesting schedules."
        ],
        "args": [
          "AccountId"
        ],
        "args_name": [
          "who"
        ],
        "args_type_name": [
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 112
    },
    "constants": [
      {
        "name": "MinVestedTransfer",
        "type": "U128",
        "type_value": 6,
        "constants_value": "64000000000000000000000000000000",
        "docs": [
          " The minimum amount transferred to call `vested_transfer`."
        ]
      }
    ],
    "errors": [
      {
        "name": "ZeroVestingPeriod",
        "doc": [
          "Vesting period is zero"
        ]
      },
      {
        "name": "ZeroVestingPeriodCount",
        "doc": [
          "Number of vests is zero"
        ]
      },
      {
        "name": "InsufficientBalanceToLock",
        "doc": [
          "Insufficient amount of balance to lock"
        ]
      },
      {
        "name": "TooManyVestingSchedules",
        "doc": [
          "This account have too many vesting schedules"
        ]
      },
      {
        "name": "AmountLow",
        "doc": [
          "The vested transfer amount is too low"
        ]
      },
      {
        "name": "MaxVestingSchedulesExceeded",
        "doc": [
          "Failed because the maximum vesting schedules was exceeded"
        ]
      }
    ],
    "errors_value": {
      "type": 531
    },
    "index": 81
  },
  {
    "name": "EVM",
    "prefix": "EVM",
    "storage": [
      {
        "name": "AccountCodes",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H160"
            ],
            "value": "Vec<U8>",
            "keys_id": 116,
            "value_id": 12
          }
        },
        "fallback": "0x00",
        "docs": null
      },
      {
        "name": "AccountStorages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "H160",
              "H256"
            ],
            "value": "H256",
            "keys_id": 532,
            "value_id": 11
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": null
      }
    ],
    "calls": [
      {
        "lookup": "5a00",
        "name": "withdraw",
        "docs": [
          "Withdraw balance from EVM into currency/balances pallet."
        ],
        "args": [
          {
            "name": "address",
            "type": "H160",
            "type_name": "H160"
          },
          {
            "name": "value",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "5a01",
        "name": "call",
        "docs": [
          "Issue an EVM call operation. This is similar to a message call transaction in Ethereum."
        ],
        "args": [
          {
            "name": "source",
            "type": "H160",
            "type_name": "H160"
          },
          {
            "name": "target",
            "type": "H160",
            "type_name": "H160"
          },
          {
            "name": "input",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "value",
            "type": "U256",
            "type_name": "U256"
          },
          {
            "name": "gas_limit",
            "type": "U64",
            "type_name": "u64"
          },
          {
            "name": "max_fee_per_gas",
            "type": "U256",
            "type_name": "U256"
          },
          {
            "name": "max_priority_fee_per_gas",
            "type": "option<U256>",
            "type_name": "Option<U256>"
          },
          {
            "name": "nonce",
            "type": "option<U256>",
            "type_name": "Option<U256>"
          },
          {
            "name": "access_list",
            "type": "Vec<Tuple:H160Vec<H256>>",
            "type_name": "Vec<(H160, Vec<H256>)>"
          }
        ]
      },
      {
        "lookup": "5a02",
        "name": "create",
        "docs": [
          "Issue an EVM create operation. This is similar to a contract creation transaction in",
          "Ethereum."
        ],
        "args": [
          {
            "name": "source",
            "type": "H160",
            "type_name": "H160"
          },
          {
            "name": "init",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "value",
            "type": "U256",
            "type_name": "U256"
          },
          {
            "name": "gas_limit",
            "type": "U64",
            "type_name": "u64"
          },
          {
            "name": "max_fee_per_gas",
            "type": "U256",
            "type_name": "U256"
          },
          {
            "name": "max_priority_fee_per_gas",
            "type": "option<U256>",
            "type_name": "Option<U256>"
          },
          {
            "name": "nonce",
            "type": "option<U256>",
            "type_name": "Option<U256>"
          },
          {
            "name": "access_list",
            "type": "Vec<Tuple:H160Vec<H256>>",
            "type_name": "Vec<(H160, Vec<H256>)>"
          }
        ]
      },
      {
        "lookup": "5a03",
        "name": "create2",
        "docs": [
          "Issue an EVM create2 operation."
        ],
        "args": [
          {
            "name": "source",
            "type": "H160",
            "type_name": "H160"
          },
          {
            "name": "init",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          },
          {
            "name": "salt",
            "type": "H256",
            "type_name": "H256"
          },
          {
            "name": "value",
            "type": "U256",
            "type_name": "U256"
          },
          {
            "name": "gas_limit",
            "type": "U64",
            "type_name": "u64"
          },
          {
            "name": "max_fee_per_gas",
            "type": "U256",
            "type_name": "U256"
          },
          {
            "name": "max_priority_fee_per_gas",
            "type": "option<U256>",
            "type_name": "Option<U256>"
          },
          {
            "name": "nonce",
            "type": "option<U256>",
            "type_name": "Option<U256>"
          },
          {
            "name": "access_list",
            "type": "Vec<Tuple:H160Vec<H256>>",
            "type_name": "Vec<(H160, Vec<H256>)>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 315
    },
    "events": [
      {
        "lookup": "5a00",
        "name": "Log",
        "docs": [
          "Ethereum events from contracts."
        ],
        "args": [
          "ethereum:log:Log"
        ],
        "args_name": [
          "log"
        ],
        "args_type_name": [
          "Log"
        ]
      },
      {
        "lookup": "5a01",
        "name": "Created",
        "docs": [
          "A contract has been created at given address."
        ],
        "args": [
          "H160"
        ],
        "args_name": [
          "address"
        ],
        "args_type_name": [
          "H160"
        ]
      },
      {
        "lookup": "5a02",
        "name": "CreatedFailed",
        "docs": [
          "A contract was attempted to be created, but the execution failed."
        ],
        "args": [
          "H160"
        ],
        "args_name": [
          "address"
        ],
        "args_type_name": [
          "H160"
        ]
      },
      {
        "lookup": "5a03",
        "name": "Executed",
        "docs": [
          "A contract has been executed successfully with states applied."
        ],
        "args": [
          "H160"
        ],
        "args_name": [
          "address"
        ],
        "args_type_name": [
          "H160"
        ]
      },
      {
        "lookup": "5a04",
        "name": "ExecutedFailed",
        "docs": [
          "A contract has been executed with errors. States are reverted with only gas fees applied."
        ],
        "args": [
          "H160"
        ],
        "args_name": [
          "address"
        ],
        "args_type_name": [
          "H160"
        ]
      }
    ],
    "events_value": {
      "type": 114
    },
    "errors": [
      {
        "name": "BalanceLow",
        "doc": [
          "Not enough balance to perform action"
        ]
      },
      {
        "name": "FeeOverflow",
        "doc": [
          "Calculating total fee overflowed"
        ]
      },
      {
        "name": "PaymentOverflow",
        "doc": [
          "Calculating total payment overflowed"
        ]
      },
      {
        "name": "WithdrawFailed",
        "doc": [
          "Withdraw fee failed"
        ]
      },
      {
        "name": "GasPriceTooLow",
        "doc": [
          "Gas price is too low."
        ]
      },
      {
        "name": "InvalidNonce",
        "doc": [
          "Nonce is invalid"
        ]
      },
      {
        "name": "GasLimitTooLow",
        "doc": [
          "Gas limit is too low."
        ]
      },
      {
        "name": "GasLimitTooHigh",
        "doc": [
          "Gas limit is too high."
        ]
      },
      {
        "name": "Undefined",
        "doc": [
          "Undefined error."
        ]
      },
      {
        "name": "Reentrancy",
        "doc": [
          "EVM reentrancy"
        ]
      },
      {
        "name": "TransactionMustComeFromEOA",
        "doc": [
          "EIP-3607,"
        ]
      }
    ],
    "errors_value": {
      "type": 533
    },
    "index": 90
  },
  {
    "name": "EVMChainId",
    "prefix": "EVMChainId",
    "storage": [
      {
        "name": "ChainId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 10
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The EVM chain ID."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 91
  },
  {
    "name": "Ethereum",
    "prefix": "Ethereum",
    "storage": [
      {
        "name": "Pending",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:ethereum:transaction:TransactionV2fp_rpc:TransactionStatusethereum:receipt:ReceiptV3>",
          "PlainTypeValue": 534
        },
        "fallback": "0x00",
        "docs": [
          " Current building block's transactions and receipts."
        ]
      },
      {
        "name": "CurrentBlock",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "ethereum:block:Block",
          "PlainTypeValue": 543
        },
        "fallback": "0x00",
        "docs": [
          " The current Ethereum block."
        ]
      },
      {
        "name": "CurrentReceipts",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<ethereum:receipt:ReceiptV3>",
          "PlainTypeValue": 548
        },
        "fallback": "0x00",
        "docs": [
          " The current Ethereum receipts."
        ]
      },
      {
        "name": "CurrentTransactionStatuses",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<fp_rpc:TransactionStatus>",
          "PlainTypeValue": 549
        },
        "fallback": "0x00",
        "docs": [
          " The current transaction statuses."
        ]
      },
      {
        "name": "BlockHash",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U256"
            ],
            "value": "H256",
            "keys_id": 316,
            "value_id": 11
          }
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": null
      }
    ],
    "calls": [
      {
        "lookup": "5c00",
        "name": "transact",
        "docs": [
          "Transact an Ethereum transaction."
        ],
        "args": [
          {
            "name": "transaction",
            "type": "ethereum:transaction:TransactionV2",
            "type_name": "Transaction"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 321
    },
    "events": [
      {
        "lookup": "5c00",
        "name": "Executed",
        "docs": [
          "An ethereum transaction was successfully executed."
        ],
        "args": [
          "H160",
          "H160",
          "H256",
          "evm_core:error:ExitReason"
        ],
        "args_name": [
          "from",
          "to",
          "transaction_hash",
          "exit_reason"
        ],
        "args_type_name": [
          "H160",
          "H160",
          "H256",
          "ExitReason"
        ]
      }
    ],
    "events_value": {
      "type": 118
    },
    "errors": [
      {
        "name": "InvalidSignature",
        "doc": [
          "Signature is invalid."
        ]
      },
      {
        "name": "PreLogExists",
        "doc": [
          "Pre-log is present, therefore transact is not allowed."
        ]
      }
    ],
    "errors_value": {
      "type": 550
    },
    "index": 92
  },
  {
    "name": "ParachainSystem",
    "prefix": "ParachainSystem",
    "storage": [
      {
        "name": "PendingValidationCode",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 12
        },
        "fallback": "0x00",
        "docs": [
          " In case of a scheduled upgrade, this storage field contains the validation code to be applied.",
          "",
          " As soon as the relay chain gives us the go-ahead signal, we will overwrite the [`:code`][well_known_keys::CODE]",
          " which will result the next block process with the new validation code. This concludes the upgrade process.",
          "",
          " [well_known_keys::CODE]: sp_core::storage::well_known_keys::CODE"
        ]
      },
      {
        "name": "NewValidationCode",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 12
        },
        "fallback": "0x00",
        "docs": [
          " Validation code that is set by the parachain and is to be communicated to collator and",
          " consequently the relay-chain.",
          "",
          " This will be cleared in `on_initialize` of each new block if no other pallet already set",
          " the value."
        ]
      },
      {
        "name": "ValidationData",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "polkadot_primitives:v2:PersistedValidationData",
          "PlainTypeValue": 333
        },
        "fallback": "0x00",
        "docs": [
          " The [`PersistedValidationData`] set for this block.",
          " This value is expected to be set only once per block and it's never stored",
          " in the trie."
        ]
      },
      {
        "name": "DidSetValidationCode",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 46
        },
        "fallback": "0x00",
        "docs": [
          " Were the validation data set to notify the relay chain?"
        ]
      },
      {
        "name": "LastRelayChainBlockNumber",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The relay chain block number associated with the last parachain block."
        ]
      },
      {
        "name": "UpgradeRestrictionSignal",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "option<polkadot_primitives:v2:UpgradeRestriction>",
          "PlainTypeValue": 551
        },
        "fallback": "0x00",
        "docs": [
          " An option which indicates if the relay-chain restricts signalling a validation code upgrade.",
          " In other words, if this is `Some` and [`NewValidationCode`] is `Some` then the produced",
          " candidate will be invalid.",
          "",
          " This storage item is a mirror of the corresponding value for the current parachain from the",
          " relay-chain. This value is ephemeral which means it doesn't hit the storage. This value is",
          " set after the inherent."
        ]
      },
      {
        "name": "RelayStateProof",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 335
        },
        "fallback": "0x00",
        "docs": [
          " The state proof for the last relay parent block.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "RelevantMessagingState",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_parachain_system:relay_state_snapshot:MessagingStateSnapshot",
          "PlainTypeValue": 553
        },
        "fallback": "0x00",
        "docs": [
          " The snapshot of some state related to messaging relevant to the current parachain as per",
          " the relay parent.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "HostConfiguration",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "polkadot_primitives:v2:AbridgedHostConfiguration",
          "PlainTypeValue": 558
        },
        "fallback": "0x00",
        "docs": [
          " The parachain host configuration that was obtained from the relay parent.",
          "",
          " This field is meant to be updated each block with the validation data inherent. Therefore,",
          " before processing of the inherent, e.g. in `on_initialize` this data may be stale.",
          "",
          " This data is also absent from the genesis."
        ]
      },
      {
        "name": "LastDmqMqcHead",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 559
        },
        "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "docs": [
          " The last downward message queue chain head we have observed.",
          "",
          " This value is loaded before and saved after processing inbound downward messages carried",
          " by the system inherent."
        ]
      },
      {
        "name": "LastHrmpMqcHeads",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:U32H256>",
          "PlainTypeValue": 560
        },
        "fallback": "0x00",
        "docs": [
          " The message queue chain heads we have observed per each channel incoming channel.",
          "",
          " This value is loaded before and saved after processing inbound downward messages carried",
          " by the system inherent."
        ]
      },
      {
        "name": "ProcessedDownwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Number of downward messages processed in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "HrmpWatermark",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " HRMP watermark that was set in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "HrmpOutboundMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<polkadot_core_primitives:OutboundHrmpMessage>",
          "PlainTypeValue": 563
        },
        "fallback": "0x00",
        "docs": [
          " HRMP messages that were sent in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "UpwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 193
        },
        "fallback": "0x00",
        "docs": [
          " Upward messages that were sent in a block.",
          "",
          " This will be cleared in `on_initialize` of each new block."
        ]
      },
      {
        "name": "PendingUpwardMessages",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Vec<U8>>",
          "PlainTypeValue": 193
        },
        "fallback": "0x00",
        "docs": [
          " Upward messages that are still pending and not yet send to the relay chain."
        ]
      },
      {
        "name": "AnnouncedHrmpMessagesPerCandidate",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " The number of HRMP messages we observed in `on_initialize` and thus used that number for",
          " announcing the weight of `on_initialize` and `on_finalize`."
        ]
      },
      {
        "name": "ReservedXcmpWeightOverride",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "sp_weights:weight_v2:Weight",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " The weight we reserve at the beginning of the block for processing XCMP messages. This",
          " overrides the amount set in the Config trait."
        ]
      },
      {
        "name": "ReservedDmpWeightOverride",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "sp_weights:weight_v2:Weight",
          "PlainTypeValue": 8
        },
        "fallback": "0x00",
        "docs": [
          " The weight we reserve at the beginning of the block for processing DMP messages. This",
          " overrides the amount set in the Config trait."
        ]
      },
      {
        "name": "AuthorizedUpgrade",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "H256",
          "PlainTypeValue": 11
        },
        "fallback": "0x00",
        "docs": [
          " The next authorized upgrade, if there is one."
        ]
      },
      {
        "name": "CustomValidationHeadData",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U8>",
          "PlainTypeValue": 12
        },
        "fallback": "0x00",
        "docs": [
          " A custom head data that should be returned as result of `validate_block`.",
          "",
          " See [`Pallet::set_custom_validation_head_data`] for more information."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "6700",
        "name": "set_validation_data",
        "docs": [
          "Set the current validation data.",
          "",
          "This should be invoked exactly once per block. It will panic at the finalization",
          "phase if the call was not invoked.",
          "",
          "The dispatch origin for this call must be `Inherent`",
          "",
          "As a side effect, this function upgrades the current validation function",
          "if the appropriate time has come."
        ],
        "args": [
          {
            "name": "data",
            "type": "cumulus_primitives_parachain_inherent:ParachainInherentData",
            "type_name": "ParachainInherentData"
          }
        ]
      },
      {
        "lookup": "6701",
        "name": "sudo_send_upward_message",
        "docs": null,
        "args": [
          {
            "name": "message",
            "type": "Vec<U8>",
            "type_name": "UpwardMessage"
          }
        ]
      },
      {
        "lookup": "6702",
        "name": "authorize_upgrade",
        "docs": null,
        "args": [
          {
            "name": "code_hash",
            "type": "H256",
            "type_name": "Hash"
          }
        ]
      },
      {
        "lookup": "6703",
        "name": "enact_authorized_upgrade",
        "docs": null,
        "args": [
          {
            "name": "code",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 331
    },
    "events": [
      {
        "lookup": "6700",
        "name": "ValidationFunctionStored",
        "docs": [
          "The validation function has been scheduled to apply."
        ],
        "args": null
      },
      {
        "lookup": "6701",
        "name": "ValidationFunctionApplied",
        "docs": [
          "The validation function was applied as of the contained relay chain block number."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "relay_chain_block_num"
        ],
        "args_type_name": [
          "RelayChainBlockNumber"
        ]
      },
      {
        "lookup": "6702",
        "name": "ValidationFunctionDiscarded",
        "docs": [
          "The relay-chain aborted the upgrade process."
        ],
        "args": null
      },
      {
        "lookup": "6703",
        "name": "UpgradeAuthorized",
        "docs": [
          "An upgrade has been authorized."
        ],
        "args": [
          "H256"
        ],
        "args_name": [
          "code_hash"
        ],
        "args_type_name": [
          "Hash"
        ]
      },
      {
        "lookup": "6704",
        "name": "DownwardMessagesReceived",
        "docs": [
          "Some downward messages have been received and will be processed."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "count"
        ],
        "args_type_name": [
          "u32"
        ]
      },
      {
        "lookup": "6705",
        "name": "DownwardMessagesProcessed",
        "docs": [
          "Downward messages were processed using the given weight."
        ],
        "args": [
          "sp_weights:weight_v2:Weight",
          "H256"
        ],
        "args_name": [
          "weight_used",
          "dmq_head"
        ],
        "args_type_name": [
          "Weight",
          "relay_chain::Hash"
        ]
      },
      {
        "lookup": "6706",
        "name": "UpwardMessageSent",
        "docs": [
          "An upward message was sent to the relay chain."
        ],
        "args": [
          "option<[U8; 32]>"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "Option<XcmHash>"
        ]
      }
    ],
    "events_value": {
      "type": 127
    },
    "errors": [
      {
        "name": "OverlappingUpgrades",
        "doc": [
          "Attempt to upgrade validation function while existing upgrade pending"
        ]
      },
      {
        "name": "ProhibitedByPolkadot",
        "doc": [
          "Polkadot currently prohibits this parachain from upgrading its validation function"
        ]
      },
      {
        "name": "TooBig",
        "doc": [
          "The supplied validation function has compiled into a blob larger than Polkadot is",
          "willing to run"
        ]
      },
      {
        "name": "ValidationDataNotAvailable",
        "doc": [
          "The inherent which supplies the validation data did not run this block"
        ]
      },
      {
        "name": "HostConfigurationNotAvailable",
        "doc": [
          "The inherent which supplies the host configuration did not run this block"
        ]
      },
      {
        "name": "NotScheduled",
        "doc": [
          "No validation function upgrade is currently scheduled."
        ]
      },
      {
        "name": "NothingAuthorized",
        "doc": [
          "No code upgrade has been authorized."
        ]
      },
      {
        "name": "Unauthorized",
        "doc": [
          "The given code upgrade has not been authorized."
        ]
      }
    ],
    "errors_value": {
      "type": 565
    },
    "index": 103
  },
  {
    "name": "ParachainInfo",
    "prefix": "ParachainInfo",
    "storage": [
      {
        "name": "ParachainId",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 176
        },
        "fallback": "0x64000000",
        "docs": null
      }
    ],
    "calls_value": {
      "type": 344
    },
    "errors": null,
    "errors_value": null,
    "index": 105
  },
  {
    "name": "Scheduler",
    "prefix": "Scheduler",
    "storage": [
      {
        "name": "IncompleteSince",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": null
      },
      {
        "name": "Agenda",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<option<pallet_scheduler:Scheduled>>",
            "keys_id": 4,
            "value_id": 566
          }
        },
        "fallback": "0x00",
        "docs": [
          " Items to be executed, indexed by the block number that they should be executed on."
        ]
      },
      {
        "name": "Lookup",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "[U8; 32]"
            ],
            "value": "Tuple:U32U32",
            "keys_id": 1,
            "value_id": 91
          }
        },
        "fallback": "0x00",
        "docs": [
          " Lookup from a name to the block number and index of the task.",
          "",
          " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4",
          " identities."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "0500",
        "name": "schedule",
        "docs": [
          "Anonymously schedule a task."
        ],
        "args": [
          {
            "name": "when",
            "type": "U32",
            "type_name": "BlockNumber"
          },
          {
            "name": "maybe_periodic",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<schedule::Period<BlockNumber>>"
          },
          {
            "name": "priority",
            "type": "U8",
            "type_name": "schedule::Priority"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0501",
        "name": "cancel",
        "docs": [
          "Cancel an anonymously scheduled task."
        ],
        "args": [
          {
            "name": "when",
            "type": "U32",
            "type_name": "BlockNumber"
          },
          {
            "name": "index",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "0502",
        "name": "schedule_named",
        "docs": [
          "Schedule a named task."
        ],
        "args": [
          {
            "name": "id",
            "type": "[U8; 32]",
            "type_name": "TaskName"
          },
          {
            "name": "when",
            "type": "U32",
            "type_name": "BlockNumber"
          },
          {
            "name": "maybe_periodic",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<schedule::Period<BlockNumber>>"
          },
          {
            "name": "priority",
            "type": "U8",
            "type_name": "schedule::Priority"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0503",
        "name": "cancel_named",
        "docs": [
          "Cancel a named scheduled task."
        ],
        "args": [
          {
            "name": "id",
            "type": "[U8; 32]",
            "type_name": "TaskName"
          }
        ]
      },
      {
        "lookup": "0504",
        "name": "schedule_after",
        "docs": [
          "Anonymously schedule a task after a delay.",
          "",
          "# <weight>",
          "Same as [`schedule`].",
          "# </weight>"
        ],
        "args": [
          {
            "name": "after",
            "type": "U32",
            "type_name": "BlockNumber"
          },
          {
            "name": "maybe_periodic",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<schedule::Period<BlockNumber>>"
          },
          {
            "name": "priority",
            "type": "U8",
            "type_name": "schedule::Priority"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      },
      {
        "lookup": "0505",
        "name": "schedule_named_after",
        "docs": [
          "Schedule a named task after a delay.",
          "",
          "# <weight>",
          "Same as [`schedule_named`](Self::schedule_named).",
          "# </weight>"
        ],
        "args": [
          {
            "name": "id",
            "type": "[U8; 32]",
            "type_name": "TaskName"
          },
          {
            "name": "after",
            "type": "U32",
            "type_name": "BlockNumber"
          },
          {
            "name": "maybe_periodic",
            "type": "option<Tuple:U32U32>",
            "type_name": "Option<schedule::Period<BlockNumber>>"
          },
          {
            "name": "priority",
            "type": "U8",
            "type_name": "schedule::Priority"
          },
          {
            "name": "call",
            "type": "Call",
            "type_name": "Box<<T as Config>::RuntimeCall>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 345
    },
    "events": [
      {
        "lookup": "0500",
        "name": "Scheduled",
        "docs": [
          "Scheduled some task."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "when",
          "index"
        ],
        "args_type_name": [
          "BlockNumber",
          "u32"
        ]
      },
      {
        "lookup": "0501",
        "name": "Canceled",
        "docs": [
          "Canceled some task."
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "when",
          "index"
        ],
        "args_type_name": [
          "BlockNumber",
          "u32"
        ]
      },
      {
        "lookup": "0502",
        "name": "Dispatched",
        "docs": [
          "Dispatched some task."
        ],
        "args": [
          "Tuple:U32U32",
          "option<[U8; 32]>",
          "Result<NULL,sp_runtime:DispatchError>"
        ],
        "args_name": [
          "task",
          "id",
          "result"
        ],
        "args_type_name": [
          "TaskAddress<BlockNumber>",
          "Option<TaskName>",
          "DispatchResult"
        ]
      },
      {
        "lookup": "0503",
        "name": "CallUnavailable",
        "docs": [
          "The call for the provided hash was not found so the task has been aborted."
        ],
        "args": [
          "Tuple:U32U32",
          "option<[U8; 32]>"
        ],
        "args_name": [
          "task",
          "id"
        ],
        "args_type_name": [
          "TaskAddress<BlockNumber>",
          "Option<TaskName>"
        ]
      },
      {
        "lookup": "0504",
        "name": "PeriodicFailed",
        "docs": [
          "The given task was unable to be renewed since the agenda is full at that block."
        ],
        "args": [
          "Tuple:U32U32",
          "option<[U8; 32]>"
        ],
        "args_name": [
          "task",
          "id"
        ],
        "args_type_name": [
          "TaskAddress<BlockNumber>",
          "Option<TaskName>"
        ]
      },
      {
        "lookup": "0505",
        "name": "PermanentlyOverweight",
        "docs": [
          "The given task can never be executed since it is overweight."
        ],
        "args": [
          "Tuple:U32U32",
          "option<[U8; 32]>"
        ],
        "args_name": [
          "task",
          "id"
        ],
        "args_type_name": [
          "TaskAddress<BlockNumber>",
          "Option<TaskName>"
        ]
      }
    ],
    "events_value": {
      "type": 129
    },
    "constants": [
      {
        "name": "MaximumWeight",
        "type": "sp_weights:weight_v2:Weight",
        "type_value": 8,
        "constants_value": "0700a0db215d02000001",
        "docs": [
          " The maximum weight that may be scheduled per block for any dispatchables."
        ]
      },
      {
        "name": "MaxScheduledPerBlock",
        "type": "U32",
        "type_value": 4,
        "constants_value": "32000000",
        "docs": [
          " The maximum number of scheduled calls in the queue for a single block."
        ]
      }
    ],
    "errors": [
      {
        "name": "FailedToSchedule",
        "doc": [
          "Failed to schedule a call"
        ]
      },
      {
        "name": "NotFound",
        "doc": [
          "Cannot find the scheduled call."
        ]
      },
      {
        "name": "TargetBlockNumberInPast",
        "doc": [
          "Given target block number is in the past."
        ]
      },
      {
        "name": "RescheduleNoChange",
        "doc": [
          "Reschedule failed because it does not change scheduled time."
        ]
      },
      {
        "name": "Named",
        "doc": [
          "Attempt to use a non-named function on a named task."
        ]
      }
    ],
    "errors_value": {
      "type": 570
    },
    "index": 5
  },
  {
    "name": "DCA",
    "prefix": "DCA",
    "storage": [
      {
        "name": "ScheduleIdSequencer",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Id sequencer for schedules"
        ]
      },
      {
        "name": "Schedules",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "pallet_dca:types:Schedule",
            "keys_id": 4,
            "value_id": 347
          }
        },
        "fallback": "0x00",
        "docs": [
          " Storing schedule details"
        ]
      },
      {
        "name": "ScheduleOwnership",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId",
              "U32"
            ],
            "value": "NULL",
            "keys_id": 518,
            "value_id": 35
          }
        },
        "fallback": "0x00",
        "docs": [
          " Storing schedule ownership"
        ]
      },
      {
        "name": "RemainingAmounts",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U128",
            "keys_id": 4,
            "value_id": 6
          }
        },
        "fallback": "0x00",
        "docs": [
          " Keep tracking the remaining amounts to spend for DCA schedules"
        ]
      },
      {
        "name": "RetriesOnError",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U8",
            "keys_id": 4,
            "value_id": 2
          }
        },
        "fallback": "0x00",
        "docs": [
          " Keep tracking the retry on error flag for DCA schedules"
        ]
      },
      {
        "name": "ScheduleIdsPerBlock",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<U32>",
            "keys_id": 4,
            "value_id": 571
          }
        },
        "fallback": "0x00",
        "docs": [
          " Keep tracking of the schedule ids to be executed in the block"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "4200",
        "name": "schedule",
        "docs": [
          "Creates a new DCA (Dollar-Cost Averaging) schedule and plans the next execution",
          "for the specified block.",
          "",
          "If the block is not specified, the execution is planned for the next block.",
          "If the given block is full, the execution will be planned in the subsequent block.",
          "",
          "Once the schedule is created, the specified `total_amount` will be reserved for DCA.",
          "The reservation currency will be the `amount_in` currency of the order.",
          "",
          "Trades are executed as long as there is budget remaining",
          "from the initial `total_amount` allocation.",
          "",
          "If a trade fails due to slippage limit or price stability errors, it will be retried.",
          "If the number of retries reaches the maximum allowed,",
          "the schedule will be terminated permanently.",
          "In the case of a successful trade, the retry counter is reset.",
          "",
          "Parameters:",
          "- `origin`: schedule owner",
          "- `schedule`: schedule details",
          "- `start_execution_block`: start execution block for the schedule",
          "",
          "Emits `Scheduled` and `ExecutionPlanned` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "schedule",
            "type": "pallet_dca:types:Schedule",
            "type_name": "Schedule<AccountId, AssetId, BlockNumberFor>"
          },
          {
            "name": "start_execution_block",
            "type": "option<U32>",
            "type_name": "Option<BlockNumberFor>"
          }
        ]
      },
      {
        "lookup": "4201",
        "name": "terminate",
        "docs": [
          "Terminates a DCA schedule and remove it completely from the chain.",
          "",
          "This can be called by both schedule owner or the configured `T::TechnicalOrigin`",
          "",
          "Parameters:",
          "- `origin`: schedule owner",
          "- `schedule_id`: schedule id",
          "- `next_execution_block`: block number where the schedule is planned.",
          "",
          "Emits `Terminated` event when successful.",
          ""
        ],
        "args": [
          {
            "name": "schedule_id",
            "type": "U32",
            "type_name": "ScheduleId"
          },
          {
            "name": "next_execution_block",
            "type": "option<U32>",
            "type_name": "Option<BlockNumberFor>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 346
    },
    "events": [
      {
        "lookup": "4200",
        "name": "ExecutionStarted",
        "docs": [
          "The DCA execution is started"
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "id",
          "block"
        ],
        "args_type_name": [
          "ScheduleId",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "4201",
        "name": "Scheduled",
        "docs": [
          "The DCA is scheduled for next execution"
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "id",
          "who"
        ],
        "args_type_name": [
          "ScheduleId",
          "AccountId"
        ]
      },
      {
        "lookup": "4202",
        "name": "ExecutionPlanned",
        "docs": [
          "The DCA is planned for blocknumber"
        ],
        "args": [
          "U32",
          "AccountId",
          "U32"
        ],
        "args_name": [
          "id",
          "who",
          "block"
        ],
        "args_type_name": [
          "ScheduleId",
          "AccountId",
          "BlockNumberFor"
        ]
      },
      {
        "lookup": "4203",
        "name": "TradeExecuted",
        "docs": [
          "The DCA trade is successfully executed"
        ],
        "args": [
          "U32",
          "AccountId",
          "U128",
          "U128"
        ],
        "args_name": [
          "id",
          "who",
          "amount_in",
          "amount_out"
        ],
        "args_type_name": [
          "ScheduleId",
          "AccountId",
          "Balance",
          "Balance"
        ]
      },
      {
        "lookup": "4204",
        "name": "TradeFailed",
        "docs": [
          "The DCA trade execution is failed"
        ],
        "args": [
          "U32",
          "AccountId",
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "id",
          "who",
          "error"
        ],
        "args_type_name": [
          "ScheduleId",
          "AccountId",
          "DispatchError"
        ]
      },
      {
        "lookup": "4205",
        "name": "Terminated",
        "docs": [
          "The DCA is terminated and completely removed from the chain"
        ],
        "args": [
          "U32",
          "AccountId",
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "id",
          "who",
          "error"
        ],
        "args_type_name": [
          "ScheduleId",
          "AccountId",
          "DispatchError"
        ]
      },
      {
        "lookup": "4206",
        "name": "Completed",
        "docs": [
          "The DCA is completed and completely removed from the chain"
        ],
        "args": [
          "U32",
          "AccountId"
        ],
        "args_name": [
          "id",
          "who"
        ],
        "args_type_name": [
          "ScheduleId",
          "AccountId"
        ]
      },
      {
        "lookup": "4207",
        "name": "RandomnessGenerationFailed",
        "docs": [
          "Randomness generation failed possibly coming from missing data about relay chain"
        ],
        "args": [
          "U32",
          "sp_runtime:DispatchError"
        ],
        "args_name": [
          "block",
          "error"
        ],
        "args_type_name": [
          "BlockNumberFor",
          "DispatchError"
        ]
      }
    ],
    "events_value": {
      "type": 130
    },
    "constants": [
      {
        "name": "MaxPriceDifferenceBetweenBlocks",
        "type": "U32",
        "type_value": 81,
        "constants_value": "983a0000",
        "docs": [
          "Max price difference allowed between blocks"
        ]
      },
      {
        "name": "MaxSchedulePerBlock",
        "type": "U32",
        "type_value": 4,
        "constants_value": "14000000",
        "docs": [
          "The number of max schedules to be executed per block"
        ]
      },
      {
        "name": "MaxNumberOfRetriesOnError",
        "type": "U8",
        "type_value": 2,
        "constants_value": "03",
        "docs": [
          "The number of max retries in case of trade limit error"
        ]
      },
      {
        "name": "MinimumTradingLimit",
        "type": "U128",
        "type_value": 6,
        "constants_value": "e8030000000000000000000000000000",
        "docs": [
          " Minimum trading limit for a single trade"
        ]
      },
      {
        "name": "NativeAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset Id"
        ]
      },
      {
        "name": "MinBudgetInNativeCurrency",
        "type": "U128",
        "type_value": 6,
        "constants_value": "0080c6a47e8d03000000000000000000",
        "docs": [
          "Minimum budget to be able to schedule a DCA, specified in native currency"
        ]
      },
      {
        "name": "FeeReceiver",
        "type": "AccountId",
        "type_value": 0,
        "constants_value": "6d6f646c70792f74727372790000000000000000000000000000000000000000",
        "docs": [
          "The fee receiver for transaction fees"
        ]
      },
      {
        "name": "NamedReserveId",
        "type": "[U8; 8]",
        "type_value": 109,
        "constants_value": "6463616f72646572",
        "docs": [
          " Named reserve identifier to store named reserves for orders of each users"
        ]
      }
    ],
    "errors": [
      {
        "name": "ScheduleNotFound",
        "doc": [
          "Schedule not exist"
        ]
      },
      {
        "name": "MinTradeAmountNotReached",
        "doc": [
          "The min trade amount is not reached"
        ]
      },
      {
        "name": "Forbidden",
        "doc": [
          "Forbidden as the user is not the owner of the schedule"
        ]
      },
      {
        "name": "BlockNumberIsNotInFuture",
        "doc": [
          "The next execution block number is not in the future"
        ]
      },
      {
        "name": "PriceUnstable",
        "doc": [
          "Price is unstable as price change from oracle data is bigger than max allowed"
        ]
      },
      {
        "name": "CalculatingPriceError",
        "doc": [
          "Error occurred when calculating price"
        ]
      },
      {
        "name": "TotalAmountIsSmallerThanMinBudget",
        "doc": [
          "The total amount to be reserved is smaller than min budget"
        ]
      },
      {
        "name": "BudgetTooLow",
        "doc": [
          "The budget is too low for executing one DCA"
        ]
      },
      {
        "name": "NoFreeBlockFound",
        "doc": [
          "There is no free block found to plan DCA execution"
        ]
      },
      {
        "name": "ManuallyTerminated",
        "doc": [
          "The DCA schedule has been manually terminated"
        ]
      },
      {
        "name": "MaxRetryReached",
        "doc": [
          "Max number of retries reached for schedule"
        ]
      },
      {
        "name": "TradeLimitReached",
        "doc": [
          "Absolutely trade limit reached reached, leading to retry"
        ]
      },
      {
        "name": "SlippageLimitReached",
        "doc": [
          "Slippage limit calculated from oracle is reached, leading to retry"
        ]
      },
      {
        "name": "NoParentHashFound",
        "doc": [
          "No parent hash has been found from relay chain"
        ]
      },
      {
        "name": "InvalidState",
        "doc": [
          "Error that should not really happen only in case of invalid state of the schedule storage entries"
        ]
      }
    ],
    "errors_value": {
      "type": 572
    },
    "index": 66
  },
  {
    "name": "PolkadotXcm",
    "prefix": "PolkadotXcm",
    "storage": [
      {
        "name": "QueryCounter",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 10
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The latest available query index."
        ]
      },
      {
        "name": "Queries",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U64"
            ],
            "value": "pallet_xcm:pallet:QueryStatus",
            "keys_id": 10,
            "value_id": 573
          }
        },
        "fallback": "0x00",
        "docs": [
          " The ongoing queries."
        ]
      },
      {
        "name": "AssetTraps",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Identity"
            ],
            "key_vec": [
              "H256"
            ],
            "value": "U32",
            "keys_id": 11,
            "value_id": 4
          }
        },
        "fallback": "0x00000000",
        "docs": [
          " The existing asset traps.",
          "",
          " Key is the blake2 256 hash of (origin, versioned `MultiAssets`) pair. Value is the number of",
          " times this pair has been trapped (usually just 1 if it exists at all)."
        ]
      },
      {
        "name": "SafeXcmVersion",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00",
        "docs": [
          " Default version to encode XCM when latest version of destination is unknown. If `None`,",
          " then the destinations whose XCM version is unknown are considered unreachable."
        ]
      },
      {
        "name": "SupportedVersion",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "xcm:VersionedMultiLocation"
            ],
            "value": "U32",
            "keys_id": 578,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " The Latest versions that we know various locations support."
        ]
      },
      {
        "name": "VersionNotifiers",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "xcm:VersionedMultiLocation"
            ],
            "value": "U64",
            "keys_id": 578,
            "value_id": 10
          }
        },
        "fallback": "0x00",
        "docs": [
          " All locations that we have requested version notifications from."
        ]
      },
      {
        "name": "VersionNotifyTargets",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "xcm:VersionedMultiLocation"
            ],
            "value": "Tuple:U64sp_weights:weight_v2:WeightU32",
            "keys_id": 578,
            "value_id": 579
          }
        },
        "fallback": "0x00",
        "docs": [
          " The target locations that are subscribed to our version changes, as well as the most recent",
          " of our versions we informed them of."
        ]
      },
      {
        "name": "VersionDiscoveryQueue",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:xcm:VersionedMultiLocationU32>",
          "PlainTypeValue": 580
        },
        "fallback": "0x00",
        "docs": [
          " Destinations whose latest XCM version we would like to know. Duplicates not allowed, and",
          " the `u32` counter is the number of times that a send to the destination has been attempted,",
          " which is used as a prioritization."
        ]
      },
      {
        "name": "CurrentMigration",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "pallet_xcm:pallet:VersionMigrationStage",
          "PlainTypeValue": 583
        },
        "fallback": "0x00",
        "docs": [
          " The current migration's stage, if any."
        ]
      },
      {
        "name": "RemoteLockedFungibles",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32",
              "AccountId",
              "xcm:VersionedAssetId"
            ],
            "value": "pallet_xcm:pallet:RemoteLockedFungibleRecord",
            "keys_id": 585,
            "value_id": 587
          }
        },
        "fallback": "0x00",
        "docs": [
          " Fungible assets which we know are locked on a remote chain."
        ]
      },
      {
        "name": "LockedFungibles",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "Vec<Tuple:U128xcm:VersionedMultiLocation>",
            "keys_id": 0,
            "value_id": 588
          }
        },
        "fallback": "0x00",
        "docs": [
          " Fungible assets which we know are locked on this chain."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "6b00",
        "name": "send",
        "docs": null,
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "message",
            "type": "xcm:VersionedXcm@353",
            "type_name": "Box<VersionedXcm<()>>"
          }
        ]
      },
      {
        "lookup": "6b01",
        "name": "teleport_assets",
        "docs": [
          "Teleport some assets from the local chain to some destination chain.",
          "",
          "Fee payment on the destination side is made from the asset in the `assets` vector of",
          "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
          "with all fees taken as needed from the asset.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
          "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
          "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
          "  an `AccountId32` value.",
          "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
          "  `dest` side. May not be empty.",
          "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
          "  fees."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "6b02",
        "name": "reserve_transfer_assets",
        "docs": [
          "Transfer some assets from the local chain to the sovereign account of a destination",
          "chain and forward a notification XCM.",
          "",
          "Fee payment on the destination side is made from the asset in the `assets` vector of",
          "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
          "with all fees taken as needed from the asset.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
          "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
          "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
          "  an `AccountId32` value.",
          "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
          "  `dest` side.",
          "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
          "  fees."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "6b03",
        "name": "execute",
        "docs": [
          "Execute an XCM message from a local, signed, origin.",
          "",
          "An event is deposited indicating whether `msg` could be executed completely or only",
          "partially.",
          "",
          "No more than `max_weight` will be used in its attempted execution. If this is less than the",
          "maximum amount of weight that the message could take to be executed, then no execution",
          "attempt will be made.",
          "",
          "NOTE: A successful return to this does *not* imply that the `msg` was executed successfully",
          "to completion; only that *some* of it was executed."
        ],
        "args": [
          {
            "name": "message",
            "type": "xcm:VersionedXcm@365",
            "type_name": "Box<VersionedXcm<<T as SysConfig>::RuntimeCall>>"
          },
          {
            "name": "max_weight",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      },
      {
        "lookup": "6b04",
        "name": "force_xcm_version",
        "docs": [
          "Extoll that a particular destination can be communicated with through a particular",
          "version of XCM.",
          "",
          "- `origin`: Must be Root.",
          "- `location`: The destination that is being described.",
          "- `xcm_version`: The latest version of XCM that `location` supports."
        ],
        "args": [
          {
            "name": "location",
            "type": "xcm:v3:multilocation:MultiLocation",
            "type_name": "Box<MultiLocation>"
          },
          {
            "name": "xcm_version",
            "type": "U32",
            "type_name": "XcmVersion"
          }
        ]
      },
      {
        "lookup": "6b05",
        "name": "force_default_xcm_version",
        "docs": [
          "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
          "version a destination can accept is unknown).",
          "",
          "- `origin`: Must be Root.",
          "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
        ],
        "args": [
          {
            "name": "maybe_xcm_version",
            "type": "option<U32>",
            "type_name": "Option<XcmVersion>"
          }
        ]
      },
      {
        "lookup": "6b06",
        "name": "force_subscribe_version_notify",
        "docs": [
          "Ask a location to notify us regarding their XCM version and any changes to it.",
          "",
          "- `origin`: Must be Root.",
          "- `location`: The location to which we should subscribe for XCM version notifications."
        ],
        "args": [
          {
            "name": "location",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          }
        ]
      },
      {
        "lookup": "6b07",
        "name": "force_unsubscribe_version_notify",
        "docs": [
          "Require that a particular destination should no longer notify us regarding any XCM",
          "version changes.",
          "",
          "- `origin`: Must be Root.",
          "- `location`: The location to which we are currently subscribed for XCM version",
          "  notifications which we no longer desire."
        ],
        "args": [
          {
            "name": "location",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          }
        ]
      },
      {
        "lookup": "6b08",
        "name": "limited_reserve_transfer_assets",
        "docs": [
          "Transfer some assets from the local chain to the sovereign account of a destination",
          "chain and forward a notification XCM.",
          "",
          "Fee payment on the destination side is made from the asset in the `assets` vector of",
          "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
          "is needed than `weight_limit`, then the operation will fail and the assets send may be",
          "at risk.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
          "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
          "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
          "  an `AccountId32` value.",
          "- `assets`: The assets to be withdrawn. This should include the assets used to pay the fee on the",
          "  `dest` side.",
          "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
          "  fees.",
          "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "6b09",
        "name": "limited_teleport_assets",
        "docs": [
          "Teleport some assets from the local chain to some destination chain.",
          "",
          "Fee payment on the destination side is made from the asset in the `assets` vector of",
          "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
          "is needed than `weight_limit`, then the operation will fail and the assets send may be",
          "at risk.",
          "",
          "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
          "- `dest`: Destination context for the assets. Will typically be `X2(Parent, Parachain(..))` to send",
          "  from parachain to parachain, or `X1(Parachain(..))` to send from relay to parachain.",
          "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will generally be",
          "  an `AccountId32` value.",
          "- `assets`: The assets to be withdrawn. The first item should be the currency used to to pay the fee on the",
          "  `dest` side. May not be empty.",
          "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
          "  fees.",
          "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "beneficiary",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "assets",
            "type": "xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_asset_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 352
    },
    "events": [
      {
        "lookup": "6b00",
        "name": "Attempted",
        "docs": [
          "Execution of an XCM message was attempted.",
          "",
          "\\[ outcome \\]"
        ],
        "args": [
          "xcm:v3:traits:Outcome"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "xcm::latest::Outcome"
        ]
      },
      {
        "lookup": "6b01",
        "name": "Sent",
        "docs": [
          "A XCM message was sent.",
          "",
          "\\[ origin, destination, message \\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "xcm:v3:multilocation:MultiLocation",
          "Vec<xcm:v3:Instruction@136>"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "MultiLocation",
          "Xcm<()>"
        ]
      },
      {
        "lookup": "6b02",
        "name": "UnexpectedResponse",
        "docs": [
          "Query response received which does not match a registered query. This may be because a",
          "matching query was never registered, it may be because it is a duplicate response, or",
          "because the query timed out.",
          "",
          "\\[ origin location, id \\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "U64"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId"
        ]
      },
      {
        "lookup": "6b03",
        "name": "ResponseReady",
        "docs": [
          "Query response has been received and is ready for taking with `take_response`. There is",
          "no registered notification call.",
          "",
          "\\[ id, response \\]"
        ],
        "args": [
          "U64",
          "xcm:v3:Response"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "QueryId",
          "Response"
        ]
      },
      {
        "lookup": "6b04",
        "name": "Notified",
        "docs": [
          "Query response has been received and query is removed. The registered notification has",
          "been dispatched and executed successfully.",
          "",
          "\\[ id, pallet index, call index \\]"
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "6b05",
        "name": "NotifyOverweight",
        "docs": [
          "Query response has been received and query is removed. The registered notification could",
          "not be dispatched because the dispatch weight is greater than the maximum weight",
          "originally budgeted by this runtime for the query result.",
          "",
          "\\[ id, pallet index, call index, actual weight, max budgeted weight \\]"
        ],
        "args": [
          "U64",
          "U8",
          "U8",
          "sp_weights:weight_v2:Weight",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "",
          "",
          "",
          "",
          ""
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8",
          "Weight",
          "Weight"
        ]
      },
      {
        "lookup": "6b06",
        "name": "NotifyDispatchError",
        "docs": [
          "Query response has been received and query is removed. There was a general error with",
          "dispatching the notification call.",
          "",
          "\\[ id, pallet index, call index \\]"
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "6b07",
        "name": "NotifyDecodeFailed",
        "docs": [
          "Query response has been received and query is removed. The dispatch was unable to be",
          "decoded into a `Call`; this might be due to dispatch function having a signature which",
          "is not `(origin, QueryId, Response)`.",
          "",
          "\\[ id, pallet index, call index \\]"
        ],
        "args": [
          "U64",
          "U8",
          "U8"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "QueryId",
          "u8",
          "u8"
        ]
      },
      {
        "lookup": "6b08",
        "name": "InvalidResponder",
        "docs": [
          "Expected query response has been received but the origin location of the response does",
          "not match that expected. The query remains registered for a later, valid, response to",
          "be received and acted upon.",
          "",
          "\\[ origin location, id, expected location \\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "U64",
          "option<xcm:v3:multilocation:MultiLocation>"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId",
          "Option<MultiLocation>"
        ]
      },
      {
        "lookup": "6b09",
        "name": "InvalidResponderVersion",
        "docs": [
          "Expected query response has been received but the expected origin location placed in",
          "storage by this runtime previously cannot be decoded. The query remains registered.",
          "",
          "This is unexpected (since a location placed in storage in a previously executing",
          "runtime should be readable prior to query timeout) and dangerous since the possibly",
          "valid response will be dropped. Manual governance intervention is probably going to be",
          "needed.",
          "",
          "\\[ origin location, id \\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "U64"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId"
        ]
      },
      {
        "lookup": "6b0a",
        "name": "ResponseTaken",
        "docs": [
          "Received query response has been read and removed.",
          "",
          "\\[ id \\]"
        ],
        "args": [
          "U64"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "QueryId"
        ]
      },
      {
        "lookup": "6b0b",
        "name": "AssetsTrapped",
        "docs": [
          "Some assets have been placed in an asset trap.",
          "",
          "\\[ hash, origin, assets \\]"
        ],
        "args": [
          "H256",
          "xcm:v3:multilocation:MultiLocation",
          "xcm:VersionedMultiAssets"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "H256",
          "MultiLocation",
          "VersionedMultiAssets"
        ]
      },
      {
        "lookup": "6b0c",
        "name": "VersionChangeNotified",
        "docs": [
          "An XCM version change notification message has been attempted to be sent.",
          "",
          "The cost of sending it (borne by the chain) is included.",
          "",
          "\\[ destination, result, cost \\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "U32",
          "Vec<xcm:v3:multiasset:MultiAsset>"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "XcmVersion",
          "MultiAssets"
        ]
      },
      {
        "lookup": "6b0d",
        "name": "SupportedVersionChanged",
        "docs": [
          "The supported version of a location has been changed. This might be through an",
          "automatic notification or a manual intervention.",
          "",
          "\\[ location, XCM version \\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "U32"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "XcmVersion"
        ]
      },
      {
        "lookup": "6b0e",
        "name": "NotifyTargetSendFail",
        "docs": [
          "A given location which had a version change subscription was dropped owing to an error",
          "sending the notification to it.",
          "",
          "\\[ location, query ID, error \\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "U64",
          "xcm:v3:traits:Error"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId",
          "XcmError"
        ]
      },
      {
        "lookup": "6b0f",
        "name": "NotifyTargetMigrationFail",
        "docs": [
          "A given location which had a version change subscription was dropped owing to an error",
          "migrating the location to our new XCM format.",
          "",
          "\\[ location, query ID \\]"
        ],
        "args": [
          "xcm:VersionedMultiLocation",
          "U64"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "VersionedMultiLocation",
          "QueryId"
        ]
      },
      {
        "lookup": "6b10",
        "name": "InvalidQuerierVersion",
        "docs": [
          "Expected query response has been received but the expected querier location placed in",
          "storage by this runtime previously cannot be decoded. The query remains registered.",
          "",
          "This is unexpected (since a location placed in storage in a previously executing",
          "runtime should be readable prior to query timeout) and dangerous since the possibly",
          "valid response will be dropped. Manual governance intervention is probably going to be",
          "needed.",
          "",
          "\\[ origin location, id \\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "U64"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId"
        ]
      },
      {
        "lookup": "6b11",
        "name": "InvalidQuerier",
        "docs": [
          "Expected query response has been received but the querier location of the response does",
          "not match the expected. The query remains registered for a later, valid, response to",
          "be received and acted upon.",
          "",
          "\\[ origin location, id, expected querier, maybe actual querier \\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "U64",
          "xcm:v3:multilocation:MultiLocation",
          "option<xcm:v3:multilocation:MultiLocation>"
        ],
        "args_name": [
          "",
          "",
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "QueryId",
          "MultiLocation",
          "Option<MultiLocation>"
        ]
      },
      {
        "lookup": "6b12",
        "name": "VersionNotifyStarted",
        "docs": [
          "A remote has requested XCM version change notification from us and we have honored it.",
          "A version information message is sent to them and its cost is included.",
          "",
          "\\[ destination location, cost \\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "Vec<xcm:v3:multiasset:MultiAsset>"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "MultiAssets"
        ]
      },
      {
        "lookup": "6b13",
        "name": "VersionNotifyRequested",
        "docs": [
          "We have requested that a remote chain sends us XCM version change notifications.",
          "",
          "\\[ destination location, cost \\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "Vec<xcm:v3:multiasset:MultiAsset>"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "MultiAssets"
        ]
      },
      {
        "lookup": "6b14",
        "name": "VersionNotifyUnrequested",
        "docs": [
          "We have requested that a remote chain stops sending us XCM version change notifications.",
          "",
          "\\[ destination location, cost \\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "Vec<xcm:v3:multiasset:MultiAsset>"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "MultiAssets"
        ]
      },
      {
        "lookup": "6b15",
        "name": "FeesPaid",
        "docs": [
          "Fees were paid from a location for an operation (often for using `SendXcm`).",
          "",
          "\\[ paying location, fees \\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "Vec<xcm:v3:multiasset:MultiAsset>"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "MultiLocation",
          "MultiAssets"
        ]
      },
      {
        "lookup": "6b16",
        "name": "AssetsClaimed",
        "docs": [
          "Some assets have been claimed from an asset trap",
          "",
          "\\[ hash, origin, assets \\]"
        ],
        "args": [
          "H256",
          "xcm:v3:multilocation:MultiLocation",
          "xcm:VersionedMultiAssets"
        ],
        "args_name": [
          "",
          "",
          ""
        ],
        "args_type_name": [
          "H256",
          "MultiLocation",
          "VersionedMultiAssets"
        ]
      }
    ],
    "events_value": {
      "type": 131
    },
    "errors": [
      {
        "name": "Unreachable",
        "doc": [
          "The desired destination was unreachable, generally because there is a no way of routing",
          "to it."
        ]
      },
      {
        "name": "SendFailure",
        "doc": [
          "There was some other issue (i.e. not to do with routing) in sending the message. Perhaps",
          "a lack of space for buffering the message."
        ]
      },
      {
        "name": "Filtered",
        "doc": [
          "The message execution fails the filter."
        ]
      },
      {
        "name": "UnweighableMessage",
        "doc": [
          "The message's weight could not be determined."
        ]
      },
      {
        "name": "DestinationNotInvertible",
        "doc": [
          "The destination `MultiLocation` provided cannot be inverted."
        ]
      },
      {
        "name": "Empty",
        "doc": [
          "The assets to be sent are empty."
        ]
      },
      {
        "name": "CannotReanchor",
        "doc": [
          "Could not re-anchor the assets to declare the fees for the destination chain."
        ]
      },
      {
        "name": "TooManyAssets",
        "doc": [
          "Too many assets have been attempted for transfer."
        ]
      },
      {
        "name": "InvalidOrigin",
        "doc": [
          "Origin is invalid for sending."
        ]
      },
      {
        "name": "BadVersion",
        "doc": [
          "The version of the `Versioned` value used is not able to be interpreted."
        ]
      },
      {
        "name": "BadLocation",
        "doc": [
          "The given location could not be used (e.g. because it cannot be expressed in the",
          "desired version of XCM)."
        ]
      },
      {
        "name": "NoSubscription",
        "doc": [
          "The referenced subscription could not be found."
        ]
      },
      {
        "name": "AlreadySubscribed",
        "doc": [
          "The location is invalid since it already has a subscription from us."
        ]
      },
      {
        "name": "InvalidAsset",
        "doc": [
          "Invalid asset for the operation."
        ]
      },
      {
        "name": "LowBalance",
        "doc": [
          "The owner does not own (all) of the asset that they wish to do the operation on."
        ]
      },
      {
        "name": "TooManyLocks",
        "doc": [
          "The asset owner has too many locks on the asset."
        ]
      },
      {
        "name": "AccountNotSovereign",
        "doc": [
          "The given account is not an identifiable sovereign account for any location."
        ]
      },
      {
        "name": "FeesNotMet",
        "doc": [
          "The operation required fees to be paid which the initiator could not meet."
        ]
      },
      {
        "name": "LockNotFound",
        "doc": [
          "A remote lock with the corresponding data could not be found."
        ]
      },
      {
        "name": "InUse",
        "doc": [
          "The unlock operation cannot succeed because there are still users of the lock."
        ]
      }
    ],
    "errors_value": {
      "type": 591
    },
    "index": 107
  },
  {
    "name": "CumulusXcm",
    "prefix": "",
    "storage": null,
    "calls_value": {
      "type": 373
    },
    "events": [
      {
        "lookup": "6d00",
        "name": "InvalidFormat",
        "docs": [
          "Downward message is invalid XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "[u8; 32]"
        ]
      },
      {
        "lookup": "6d01",
        "name": "UnsupportedVersion",
        "docs": [
          "Downward message is unsupported version of XCM.",
          "\\[ id \\]"
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          ""
        ],
        "args_type_name": [
          "[u8; 32]"
        ]
      },
      {
        "lookup": "6d02",
        "name": "ExecutedDownward",
        "docs": [
          "Downward message executed with the given outcome.",
          "\\[ id, outcome \\]"
        ],
        "args": [
          "[U8; 32]",
          "xcm:v3:traits:Outcome"
        ],
        "args_name": [
          "",
          ""
        ],
        "args_type_name": [
          "[u8; 32]",
          "Outcome"
        ]
      }
    ],
    "events_value": {
      "type": 174
    },
    "errors": null,
    "errors_value": {
      "type": 592
    },
    "index": 109
  },
  {
    "name": "XcmpQueue",
    "prefix": "XcmpQueue",
    "storage": [
      {
        "name": "InboundXcmpStatus",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<cumulus_pallet_xcmp_queue:InboundChannelDetails>",
          "PlainTypeValue": 593
        },
        "fallback": "0x00",
        "docs": [
          " Status of the inbound XCMP channels."
        ]
      },
      {
        "name": "InboundXcmpMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "U32",
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 599,
            "value_id": 12
          }
        },
        "fallback": "0x00",
        "docs": [
          " Inbound aggregate XCMP messages. It can only be one per ParaId/block."
        ]
      },
      {
        "name": "DeferredXcmMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<cumulus_pallet_xcmp_queue:DeferredMessage>",
            "keys_id": 176,
            "value_id": 600
          }
        },
        "fallback": "0x00",
        "docs": [
          " Inbound aggregate XCMP messages. It can only be one per ParaId."
        ]
      },
      {
        "name": "OutboundXcmpStatus",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<cumulus_pallet_xcmp_queue:OutboundChannelDetails>",
          "PlainTypeValue": 603
        },
        "fallback": "0x00",
        "docs": [
          " The non-empty XCMP channels in order of becoming non-empty, and the index of the first",
          " and last outbound message. If the two indices are equal, then it indicates an empty",
          " queue and there must be a non-`Ok` `OutboundStatus`. We assume queues grow no greater",
          " than 65535 items. Queue indices for normal messages begin at one; zero is reserved in",
          " case of the need to send a high-priority signal message this block.",
          " The bool is true if there is a signal message waiting to be sent."
        ]
      },
      {
        "name": "OutboundXcmpMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "U32",
              "U16"
            ],
            "value": "Vec<U8>",
            "keys_id": 606,
            "value_id": 12
          }
        },
        "fallback": "0x00",
        "docs": [
          " The messages outbound in a given XCMP channel."
        ]
      },
      {
        "name": "SignalMessages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<U8>",
            "keys_id": 176,
            "value_id": 12
          }
        },
        "fallback": "0x00",
        "docs": [
          " Any signal messages waiting to be sent."
        ]
      },
      {
        "name": "QueueConfig",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_xcmp_queue:QueueConfigData",
          "PlainTypeValue": 607
        },
        "fallback": "0x020000000500000001000000821a06000008000700c817a80402000400",
        "docs": [
          " The configuration which controls the dynamics of the outbound queue."
        ]
      },
      {
        "name": "Overweight",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U64"
            ],
            "value": "Tuple:U32U32Vec<U8>",
            "keys_id": 10,
            "value_id": 608
          }
        },
        "fallback": "0x00",
        "docs": [
          " The messages that exceeded max individual message weight budget.",
          "",
          " These message stay in this storage map until they are manually dispatched via",
          " `service_overweight`."
        ]
      },
      {
        "name": "CounterForOverweight",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          "Counter for the related counted storage map"
        ]
      },
      {
        "name": "OverweightCount",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 10
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The number of overweight messages ever recorded in `Overweight`. Also doubles as the next",
          " available free overweight index."
        ]
      },
      {
        "name": "QueueSuspended",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 46
        },
        "fallback": "0x00",
        "docs": [
          " Whether or not the XCMP queue is suspended from executing incoming XCMs or not."
        ]
      }
    ],
    "events": [
      {
        "lookup": "6f00",
        "name": "Success",
        "docs": [
          "Some XCM was executed ok."
        ],
        "args": [
          "option<[U8; 32]>",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "message_hash",
          "weight"
        ],
        "args_type_name": [
          "Option<XcmHash>",
          "Weight"
        ]
      },
      {
        "lookup": "6f01",
        "name": "Fail",
        "docs": [
          "Some XCM failed."
        ],
        "args": [
          "option<[U8; 32]>",
          "xcm:v3:traits:Error",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "message_hash",
          "error",
          "weight"
        ],
        "args_type_name": [
          "Option<XcmHash>",
          "XcmError",
          "Weight"
        ]
      },
      {
        "lookup": "6f02",
        "name": "BadVersion",
        "docs": [
          "Bad XCM version used."
        ],
        "args": [
          "option<[U8; 32]>"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "Option<XcmHash>"
        ]
      },
      {
        "lookup": "6f03",
        "name": "BadFormat",
        "docs": [
          "Bad XCM format used."
        ],
        "args": [
          "option<[U8; 32]>"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "Option<XcmHash>"
        ]
      },
      {
        "lookup": "6f04",
        "name": "XcmpMessageSent",
        "docs": [
          "An HRMP message was sent to a sibling parachain."
        ],
        "args": [
          "option<[U8; 32]>"
        ],
        "args_name": [
          "message_hash"
        ],
        "args_type_name": [
          "Option<XcmHash>"
        ]
      },
      {
        "lookup": "6f05",
        "name": "OverweightEnqueued",
        "docs": [
          "An XCM exceeded the individual message weight budget."
        ],
        "args": [
          "U32",
          "U32",
          "U64",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "sender",
          "sent_at",
          "index",
          "required"
        ],
        "args_type_name": [
          "ParaId",
          "RelayBlockNumber",
          "OverweightIndex",
          "Weight"
        ]
      },
      {
        "lookup": "6f06",
        "name": "OverweightServiced",
        "docs": [
          "An XCM from the overweight queue was executed with the given actual weight used."
        ],
        "args": [
          "U64",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "index",
          "used"
        ],
        "args_type_name": [
          "OverweightIndex",
          "Weight"
        ]
      },
      {
        "lookup": "6f07",
        "name": "XcmDeferred",
        "docs": [
          "Some XCM was deferred for later execution"
        ],
        "args": [
          "U32",
          "U32",
          "U32",
          "option<[U8; 32]>"
        ],
        "args_name": [
          "sender",
          "sent_at",
          "deferred_to",
          "message_hash"
        ],
        "args_type_name": [
          "ParaId",
          "RelayBlockNumber",
          "RelayBlockNumber",
          "Option<XcmHash>"
        ]
      },
      {
        "lookup": "6f08",
        "name": "XcmDeferredQueueFull",
        "docs": null,
        "args": null
      }
    ],
    "events_value": {
      "type": 175
    },
    "errors": [
      {
        "name": "FailedToSend",
        "doc": [
          "Failed to send XCM message."
        ]
      },
      {
        "name": "BadXcmOrigin",
        "doc": [
          "Bad XCM origin."
        ]
      },
      {
        "name": "BadXcm",
        "doc": [
          "Bad XCM data."
        ]
      },
      {
        "name": "BadOverweightIndex",
        "doc": [
          "Bad overweight index."
        ]
      },
      {
        "name": "WeightOverLimit",
        "doc": [
          "Provided weight is possibly not enough to execute the message."
        ]
      }
    ],
    "errors_value": {
      "type": 609
    },
    "index": 111
  },
  {
    "name": "DmpQueue",
    "prefix": "DmpQueue",
    "storage": [
      {
        "name": "Configuration",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "sp_weights:weight_v2:Weight",
          "PlainTypeValue": 610
        },
        "fallback": "0x0700e40b540202000400",
        "docs": [
          " The configuration."
        ]
      },
      {
        "name": "PageIndex",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "cumulus_pallet_dmp_queue:PageIndexData",
          "PlainTypeValue": 611
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " The page index."
        ]
      },
      {
        "name": "Pages",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "Vec<Tuple:U32Vec<U8>>",
            "keys_id": 4,
            "value_id": 612
          }
        },
        "fallback": "0x00",
        "docs": [
          " The queue pages."
        ]
      },
      {
        "name": "Overweight",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "U64"
            ],
            "value": "Tuple:U32Vec<U8>",
            "keys_id": 10,
            "value_id": 613
          }
        },
        "fallback": "0x00",
        "docs": [
          " The overweight messages."
        ]
      },
      {
        "name": "CounterForOverweight",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          "Counter for the related counted storage map"
        ]
      }
    ],
    "calls": [
      {
        "lookup": "7100",
        "name": "service_overweight",
        "docs": [
          "Service a single overweight message."
        ],
        "args": [
          {
            "name": "index",
            "type": "U64",
            "type_name": "OverweightIndex"
          },
          {
            "name": "weight_limit",
            "type": "sp_weights:weight_v2:Weight",
            "type_name": "Weight"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 374
    },
    "events": [
      {
        "lookup": "7100",
        "name": "InvalidFormat",
        "docs": [
          "Downward message is invalid XCM."
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          "message_id"
        ],
        "args_type_name": [
          "MessageId"
        ]
      },
      {
        "lookup": "7101",
        "name": "UnsupportedVersion",
        "docs": [
          "Downward message is unsupported version of XCM."
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          "message_id"
        ],
        "args_type_name": [
          "MessageId"
        ]
      },
      {
        "lookup": "7102",
        "name": "ExecutedDownward",
        "docs": [
          "Downward message executed with the given outcome."
        ],
        "args": [
          "[U8; 32]",
          "xcm:v3:traits:Outcome"
        ],
        "args_name": [
          "message_id",
          "outcome"
        ],
        "args_type_name": [
          "MessageId",
          "Outcome"
        ]
      },
      {
        "lookup": "7103",
        "name": "WeightExhausted",
        "docs": [
          "The weight limit for handling downward messages was reached."
        ],
        "args": [
          "[U8; 32]",
          "sp_weights:weight_v2:Weight",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "message_id",
          "remaining_weight",
          "required_weight"
        ],
        "args_type_name": [
          "MessageId",
          "Weight",
          "Weight"
        ]
      },
      {
        "lookup": "7104",
        "name": "OverweightEnqueued",
        "docs": [
          "Downward message is overweight and was placed in the overweight queue."
        ],
        "args": [
          "[U8; 32]",
          "U64",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "message_id",
          "overweight_index",
          "required_weight"
        ],
        "args_type_name": [
          "MessageId",
          "OverweightIndex",
          "Weight"
        ]
      },
      {
        "lookup": "7105",
        "name": "OverweightServiced",
        "docs": [
          "Downward message from the overweight queue was executed."
        ],
        "args": [
          "U64",
          "sp_weights:weight_v2:Weight"
        ],
        "args_name": [
          "overweight_index",
          "weight_used"
        ],
        "args_type_name": [
          "OverweightIndex",
          "Weight"
        ]
      },
      {
        "lookup": "7106",
        "name": "MaxMessagesExhausted",
        "docs": [
          "The maximum number of downward messages was."
        ],
        "args": [
          "[U8; 32]"
        ],
        "args_name": [
          "message_id"
        ],
        "args_type_name": [
          "MessageId"
        ]
      }
    ],
    "events_value": {
      "type": 177
    },
    "errors": [
      {
        "name": "Unknown",
        "doc": [
          "The message index given is unknown."
        ]
      },
      {
        "name": "OverLimit",
        "doc": [
          "The amount of weight given is possibly not enough for executing the message."
        ]
      }
    ],
    "errors_value": {
      "type": 614
    },
    "index": 113
  },
  {
    "name": "OrmlXcm",
    "prefix": "",
    "storage": null,
    "calls": [
      {
        "lookup": "8700",
        "name": "send_as_sovereign",
        "docs": [
          "Send an XCM message as parachain sovereign."
        ],
        "args": [
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "message",
            "type": "xcm:VersionedXcm@353",
            "type_name": "Box<VersionedXcm<()>>"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 375
    },
    "events": [
      {
        "lookup": "8700",
        "name": "Sent",
        "docs": [
          "XCM message sent. \\[to, message\\]"
        ],
        "args": [
          "xcm:v3:multilocation:MultiLocation",
          "Vec<xcm:v3:Instruction@136>"
        ],
        "args_name": [
          "to",
          "message"
        ],
        "args_type_name": [
          "MultiLocation",
          "Xcm<()>"
        ]
      }
    ],
    "events_value": {
      "type": 178
    },
    "errors": [
      {
        "name": "Unreachable",
        "doc": [
          "The message and destination combination was not recognized as being",
          "reachable."
        ]
      },
      {
        "name": "SendFailure",
        "doc": [
          "The message and destination was recognized as being reachable but",
          "the operation could not be completed."
        ]
      },
      {
        "name": "BadVersion",
        "doc": [
          "The version of the `Versioned` value used is not able to be",
          "interpreted."
        ]
      }
    ],
    "errors_value": {
      "type": 615
    },
    "index": 135
  },
  {
    "name": "XTokens",
    "prefix": "",
    "storage": null,
    "calls": [
      {
        "lookup": "8900",
        "name": "transfer",
        "docs": [
          "Transfer native currencies.",
          "",
          "`dest_weight_limit` is the weight for XCM execution on the dest",
          "chain, and it would be charged from the transferred assets. If set",
          "below requirements, the execution may fail and assets wouldn't be",
          "received.",
          "",
          "It's a no-op if any error on local XCM execution or message sending.",
          "Note sending assets out per se doesn't guarantee they would be",
          "received. Receiving depends on if the XCM message could be delivered",
          "by the network, and if the receiving chain would handle",
          "messages correctly."
        ],
        "args": [
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "dest_weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "8901",
        "name": "transfer_multiasset",
        "docs": [
          "Transfer `MultiAsset`.",
          "",
          "`dest_weight_limit` is the weight for XCM execution on the dest",
          "chain, and it would be charged from the transferred assets. If set",
          "below requirements, the execution may fail and assets wouldn't be",
          "received.",
          "",
          "It's a no-op if any error on local XCM execution or message sending.",
          "Note sending assets out per se doesn't guarantee they would be",
          "received. Receiving depends on if the XCM message could be delivered",
          "by the network, and if the receiving chain would handle",
          "messages correctly."
        ],
        "args": [
          {
            "name": "asset",
            "type": "xcm:VersionedMultiAsset",
            "type_name": "Box<VersionedMultiAsset>"
          },
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "dest_weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "8902",
        "name": "transfer_with_fee",
        "docs": [
          "Transfer native currencies specifying the fee and amount as",
          "separate.",
          "",
          "`dest_weight_limit` is the weight for XCM execution on the dest",
          "chain, and it would be charged from the transferred assets. If set",
          "below requirements, the execution may fail and assets wouldn't be",
          "received.",
          "",
          "`fee` is the amount to be spent to pay for execution in destination",
          "chain. Both fee and amount will be subtracted form the callers",
          "balance.",
          "",
          "If `fee` is not high enough to cover for the execution costs in the",
          "destination chain, then the assets will be trapped in the",
          "destination chain",
          "",
          "It's a no-op if any error on local XCM execution or message sending.",
          "Note sending assets out per se doesn't guarantee they would be",
          "received. Receiving depends on if the XCM message could be delivered",
          "by the network, and if the receiving chain would handle",
          "messages correctly."
        ],
        "args": [
          {
            "name": "currency_id",
            "type": "U32",
            "type_name": "CurrencyId"
          },
          {
            "name": "amount",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "fee",
            "type": "U128",
            "type_name": "Balance"
          },
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "dest_weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "8903",
        "name": "transfer_multiasset_with_fee",
        "docs": [
          "Transfer `MultiAsset` specifying the fee and amount as separate.",
          "",
          "`dest_weight_limit` is the weight for XCM execution on the dest",
          "chain, and it would be charged from the transferred assets. If set",
          "below requirements, the execution may fail and assets wouldn't be",
          "received.",
          "",
          "`fee` is the multiasset to be spent to pay for execution in",
          "destination chain. Both fee and amount will be subtracted form the",
          "callers balance For now we only accept fee and asset having the same",
          "`MultiLocation` id.",
          "",
          "If `fee` is not high enough to cover for the execution costs in the",
          "destination chain, then the assets will be trapped in the",
          "destination chain",
          "",
          "It's a no-op if any error on local XCM execution or message sending.",
          "Note sending assets out per se doesn't guarantee they would be",
          "received. Receiving depends on if the XCM message could be delivered",
          "by the network, and if the receiving chain would handle",
          "messages correctly."
        ],
        "args": [
          {
            "name": "asset",
            "type": "xcm:VersionedMultiAsset",
            "type_name": "Box<VersionedMultiAsset>"
          },
          {
            "name": "fee",
            "type": "xcm:VersionedMultiAsset",
            "type_name": "Box<VersionedMultiAsset>"
          },
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "dest_weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "8904",
        "name": "transfer_multicurrencies",
        "docs": [
          "Transfer several currencies specifying the item to be used as fee",
          "",
          "`dest_weight_limit` is the weight for XCM execution on the dest",
          "chain, and it would be charged from the transferred assets. If set",
          "below requirements, the execution may fail and assets wouldn't be",
          "received.",
          "",
          "`fee_item` is index of the currencies tuple that we want to use for",
          "payment",
          "",
          "It's a no-op if any error on local XCM execution or message sending.",
          "Note sending assets out per se doesn't guarantee they would be",
          "received. Receiving depends on if the XCM message could be delivered",
          "by the network, and if the receiving chain would handle",
          "messages correctly."
        ],
        "args": [
          {
            "name": "currencies",
            "type": "Vec<Tuple:U32U128>",
            "type_name": "Vec<(CurrencyId, Balance)>"
          },
          {
            "name": "fee_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "dest_weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      },
      {
        "lookup": "8905",
        "name": "transfer_multiassets",
        "docs": [
          "Transfer several `MultiAsset` specifying the item to be used as fee",
          "",
          "`dest_weight_limit` is the weight for XCM execution on the dest",
          "chain, and it would be charged from the transferred assets. If set",
          "below requirements, the execution may fail and assets wouldn't be",
          "received.",
          "",
          "`fee_item` is index of the MultiAssets that we want to use for",
          "payment",
          "",
          "It's a no-op if any error on local XCM execution or message sending.",
          "Note sending assets out per se doesn't guarantee they would be",
          "received. Receiving depends on if the XCM message could be delivered",
          "by the network, and if the receiving chain would handle",
          "messages correctly."
        ],
        "args": [
          {
            "name": "assets",
            "type": "xcm:VersionedMultiAssets",
            "type_name": "Box<VersionedMultiAssets>"
          },
          {
            "name": "fee_item",
            "type": "U32",
            "type_name": "u32"
          },
          {
            "name": "dest",
            "type": "xcm:VersionedMultiLocation",
            "type_name": "Box<VersionedMultiLocation>"
          },
          {
            "name": "dest_weight_limit",
            "type": "xcm:v3:WeightLimit",
            "type_name": "WeightLimit"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 376
    },
    "events": [
      {
        "lookup": "8900",
        "name": "TransferredMultiAssets",
        "docs": [
          "Transferred `MultiAsset` with fee."
        ],
        "args": [
          "AccountId",
          "Vec<xcm:v3:multiasset:MultiAsset>",
          "xcm:v3:multiasset:MultiAsset",
          "xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "sender",
          "assets",
          "fee",
          "dest"
        ],
        "args_type_name": [
          "AccountId",
          "MultiAssets",
          "MultiAsset",
          "MultiLocation"
        ]
      }
    ],
    "events_value": {
      "type": 179
    },
    "constants": [
      {
        "name": "SelfLocation",
        "type": "xcm:v3:multilocation:MultiLocation",
        "type_value": 65,
        "constants_value": "010100c91f",
        "docs": [
          " Self chain location."
        ]
      },
      {
        "name": "BaseXcmWeight",
        "type": "sp_weights:weight_v2:Weight",
        "type_value": 8,
        "constants_value": "0284d71700",
        "docs": [
          " Base XCM weight.",
          "",
          " The actually weight for an XCM message is `T::BaseXcmWeight +",
          " T::Weigher::weight(&msg)`."
        ]
      }
    ],
    "errors": [
      {
        "name": "AssetHasNoReserve",
        "doc": [
          "Asset has no reserve location."
        ]
      },
      {
        "name": "NotCrossChainTransfer",
        "doc": [
          "Not cross-chain transfer."
        ]
      },
      {
        "name": "InvalidDest",
        "doc": [
          "Invalid transfer destination."
        ]
      },
      {
        "name": "NotCrossChainTransferableCurrency",
        "doc": [
          "Currency is not cross-chain transferable."
        ]
      },
      {
        "name": "UnweighableMessage",
        "doc": [
          "The message's weight could not be determined."
        ]
      },
      {
        "name": "XcmExecutionFailed",
        "doc": [
          "XCM execution failed."
        ]
      },
      {
        "name": "CannotReanchor",
        "doc": [
          "Could not re-anchor the assets to declare the fees for the",
          "destination chain."
        ]
      },
      {
        "name": "InvalidAncestry",
        "doc": [
          "Could not get ancestry of asset reserve location."
        ]
      },
      {
        "name": "InvalidAsset",
        "doc": [
          "The MultiAsset is invalid."
        ]
      },
      {
        "name": "DestinationNotInvertible",
        "doc": [
          "The destination `MultiLocation` provided cannot be inverted."
        ]
      },
      {
        "name": "BadVersion",
        "doc": [
          "The version of the `Versioned` value used is not able to be",
          "interpreted."
        ]
      },
      {
        "name": "DistinctReserveForAssetAndFee",
        "doc": [
          "We tried sending distinct asset and fee but they have different",
          "reserve chains."
        ]
      },
      {
        "name": "ZeroFee",
        "doc": [
          "The fee is zero."
        ]
      },
      {
        "name": "ZeroAmount",
        "doc": [
          "The transfering asset amount is zero."
        ]
      },
      {
        "name": "TooManyAssetsBeingSent",
        "doc": [
          "The number of assets to be sent is over the maximum."
        ]
      },
      {
        "name": "AssetIndexNonExistent",
        "doc": [
          "The specified index does not exist in a MultiAssets struct."
        ]
      },
      {
        "name": "FeeNotEnough",
        "doc": [
          "Fee is not enough."
        ]
      },
      {
        "name": "NotSupportedMultiLocation",
        "doc": [
          "Not supported MultiLocation"
        ]
      },
      {
        "name": "MinXcmFeeNotDefined",
        "doc": [
          "MinXcmFee not registered for certain reserve location"
        ]
      }
    ],
    "errors_value": {
      "type": 616
    },
    "index": 137
  },
  {
    "name": "UnknownTokens",
    "prefix": "UnknownTokens",
    "storage": [
      {
        "name": "ConcreteFungibleBalances",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "xcm:v3:multilocation:MultiLocation",
              "xcm:v3:multilocation:MultiLocation"
            ],
            "value": "U128",
            "keys_id": 617,
            "value_id": 6
          }
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Concrete fungible balances under a given location and a concrete",
          " fungible id.",
          "",
          " double_map: who, asset_id => u128"
        ]
      },
      {
        "name": "AbstractFungibleBalances",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat",
              "Blake2_128Concat"
            ],
            "key_vec": [
              "xcm:v3:multilocation:MultiLocation",
              "Vec<U8>"
            ],
            "value": "U128",
            "keys_id": 618,
            "value_id": 6
          }
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Abstract fungible balances under a given location and a abstract",
          " fungible id.",
          "",
          " double_map: who, asset_id => u128"
        ]
      }
    ],
    "calls_value": {
      "type": 379
    },
    "events": [
      {
        "lookup": "8b00",
        "name": "Deposited",
        "docs": [
          "Deposit success."
        ],
        "args": [
          "xcm:v3:multiasset:MultiAsset",
          "xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset",
          "who"
        ],
        "args_type_name": [
          "MultiAsset",
          "MultiLocation"
        ]
      },
      {
        "lookup": "8b01",
        "name": "Withdrawn",
        "docs": [
          "Withdraw success."
        ],
        "args": [
          "xcm:v3:multiasset:MultiAsset",
          "xcm:v3:multilocation:MultiLocation"
        ],
        "args_name": [
          "asset",
          "who"
        ],
        "args_type_name": [
          "MultiAsset",
          "MultiLocation"
        ]
      }
    ],
    "events_value": {
      "type": 180
    },
    "errors": [
      {
        "name": "BalanceTooLow",
        "doc": [
          "The balance is too low."
        ]
      },
      {
        "name": "BalanceOverflow",
        "doc": [
          "The operation will cause balance to overflow."
        ]
      },
      {
        "name": "UnhandledAsset",
        "doc": [
          "Unhandled asset."
        ]
      }
    ],
    "errors_value": {
      "type": 619
    },
    "index": 139
  },
  {
    "name": "Authorship",
    "prefix": "Authorship",
    "storage": [
      {
        "name": "Author",
        "modifier": "Optional",
        "type": {
          "origin": "PlainType",
          "plain_type": "AccountId",
          "PlainTypeValue": 0
        },
        "fallback": "0x00",
        "docs": [
          " Author of current block."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 161
  },
  {
    "name": "CollatorSelection",
    "prefix": "CollatorSelection",
    "storage": [
      {
        "name": "Invulnerables",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 469
        },
        "fallback": "0x00",
        "docs": [
          " The invulnerable, fixed collators."
        ]
      },
      {
        "name": "Candidates",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<pallet_collator_selection:pallet:CandidateInfo>",
          "PlainTypeValue": 620
        },
        "fallback": "0x00",
        "docs": [
          " The (community, limited) collation candidates."
        ]
      },
      {
        "name": "LastAuthoredBlock",
        "modifier": "Default",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U32",
            "keys_id": 0,
            "value_id": 4
          }
        },
        "fallback": "0x00000000",
        "docs": [
          " Last block authored by collator."
        ]
      },
      {
        "name": "DesiredCandidates",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Desired number of candidates.",
          "",
          " This should ideally always be less than [`Config::MaxCandidates`] for weights to be correct."
        ]
      },
      {
        "name": "CandidacyBond",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U128",
          "PlainTypeValue": 6
        },
        "fallback": "0x00000000000000000000000000000000",
        "docs": [
          " Fixed amount to deposit to become a collator.",
          "",
          " When a collator calls `leave_intent` they immediately receive the deposit back."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "a300",
        "name": "set_invulnerables",
        "docs": [
          "Set the list of invulnerable (fixed) collators."
        ],
        "args": [
          {
            "name": "new",
            "type": "Vec<AccountId>",
            "type_name": "Vec<AccountId>"
          }
        ]
      },
      {
        "lookup": "a301",
        "name": "set_desired_candidates",
        "docs": [
          "Set the ideal number of collators (not including the invulnerables).",
          "If lowering this number, then the number of running collators could be higher than this figure.",
          "Aside from that edge case, there should be no other way to have more collators than the desired number."
        ],
        "args": [
          {
            "name": "max",
            "type": "U32",
            "type_name": "u32"
          }
        ]
      },
      {
        "lookup": "a302",
        "name": "set_candidacy_bond",
        "docs": [
          "Set the candidacy bond amount."
        ],
        "args": [
          {
            "name": "bond",
            "type": "U128",
            "type_name": "BalanceOf"
          }
        ]
      },
      {
        "lookup": "a303",
        "name": "register_as_candidate",
        "docs": [
          "Register this account as a collator candidate. The account must (a) already have",
          "registered session keys and (b) be able to reserve the `CandidacyBond`.",
          "",
          "This call is not available to `Invulnerable` collators."
        ],
        "args": null
      },
      {
        "lookup": "a304",
        "name": "leave_intent",
        "docs": [
          "Deregister `origin` as a collator candidate. Note that the collator can only leave on",
          "session change. The `CandidacyBond` will be unreserved immediately.",
          "",
          "This call will fail if the total number of candidates would drop below `MinCandidates`.",
          "",
          "This call is not available to `Invulnerable` collators."
        ],
        "args": null
      }
    ],
    "calls_value": {
      "type": 380
    },
    "events": [
      {
        "lookup": "a300",
        "name": "NewInvulnerables",
        "docs": null,
        "args": [
          "Vec<AccountId>"
        ],
        "args_name": [
          "invulnerables"
        ],
        "args_type_name": [
          "Vec<AccountId>"
        ]
      },
      {
        "lookup": "a301",
        "name": "NewDesiredCandidates",
        "docs": null,
        "args": [
          "U32"
        ],
        "args_name": [
          "desired_candidates"
        ],
        "args_type_name": [
          "u32"
        ]
      },
      {
        "lookup": "a302",
        "name": "NewCandidacyBond",
        "docs": null,
        "args": [
          "U128"
        ],
        "args_name": [
          "bond_amount"
        ],
        "args_type_name": [
          "BalanceOf"
        ]
      },
      {
        "lookup": "a303",
        "name": "CandidateAdded",
        "docs": null,
        "args": [
          "AccountId",
          "U128"
        ],
        "args_name": [
          "account_id",
          "deposit"
        ],
        "args_type_name": [
          "AccountId",
          "BalanceOf"
        ]
      },
      {
        "lookup": "a304",
        "name": "CandidateRemoved",
        "docs": null,
        "args": [
          "AccountId"
        ],
        "args_name": [
          "account_id"
        ],
        "args_type_name": [
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 181
    },
    "errors": [
      {
        "name": "TooManyCandidates",
        "doc": [
          "Too many candidates"
        ]
      },
      {
        "name": "TooFewCandidates",
        "doc": [
          "Too few candidates"
        ]
      },
      {
        "name": "Unknown",
        "doc": [
          "Unknown error"
        ]
      },
      {
        "name": "Permission",
        "doc": [
          "Permission issue"
        ]
      },
      {
        "name": "AlreadyCandidate",
        "doc": [
          "User is already a candidate"
        ]
      },
      {
        "name": "NotCandidate",
        "doc": [
          "User is not a candidate"
        ]
      },
      {
        "name": "TooManyInvulnerables",
        "doc": [
          "Too many invulnerables"
        ]
      },
      {
        "name": "AlreadyInvulnerable",
        "doc": [
          "User is already an Invulnerable"
        ]
      },
      {
        "name": "NoAssociatedValidatorId",
        "doc": [
          "Account has no associated validator ID"
        ]
      },
      {
        "name": "ValidatorNotRegistered",
        "doc": [
          "Validator ID is not yet registered"
        ]
      }
    ],
    "errors_value": {
      "type": 623
    },
    "index": 163
  },
  {
    "name": "Session",
    "prefix": "Session",
    "storage": [
      {
        "name": "Validators",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<AccountId>",
          "PlainTypeValue": 182
        },
        "fallback": "0x00",
        "docs": [
          " The current set of validators."
        ]
      },
      {
        "name": "CurrentIndex",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U32",
          "PlainTypeValue": 4
        },
        "fallback": "0x00000000",
        "docs": [
          " Current index of the session."
        ]
      },
      {
        "name": "QueuedChanged",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Bool",
          "PlainTypeValue": 46
        },
        "fallback": "0x00",
        "docs": [
          " True if the underlying economic identities or weighting behind the validators",
          " has changed in the queued validator set."
        ]
      },
      {
        "name": "QueuedKeys",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:AccountId[U8; 32]>",
          "PlainTypeValue": 624
        },
        "fallback": "0x00",
        "docs": [
          " The queued keys for the next session. When the next session begins, these keys",
          " will be used to determine the validator's session keys."
        ]
      },
      {
        "name": "DisabledValidators",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<U32>",
          "PlainTypeValue": 94
        },
        "fallback": "0x00",
        "docs": [
          " Indices of disabled validators.",
          "",
          " The vec is always kept sorted so that we can find whether a given validator is",
          " disabled using binary search. It gets cleared when `on_session_ending` returns",
          " a new set of identities."
        ]
      },
      {
        "name": "NextKeys",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "[U8; 32]",
            "keys_id": 0,
            "value_id": 382
          }
        },
        "fallback": "0x00",
        "docs": [
          " The next session keys for a validator."
        ]
      },
      {
        "name": "KeyOwner",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "Tuple:[U8; 4]Vec<U8>"
            ],
            "value": "AccountId",
            "keys_id": 626,
            "value_id": 0
          }
        },
        "fallback": "0x00",
        "docs": [
          " The owner of a key. The key is the `KeyTypeId` + the encoded key."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "a500",
        "name": "set_keys",
        "docs": [
          "Sets the session key(s) of the function caller to `keys`.",
          "Allows an account to set its session key prior to becoming a validator.",
          "This doesn't take effect until the next session.",
          "",
          "The dispatch origin of this function must be signed.",
          "",
          "# <weight>",
          "- Complexity: `O(1)`. Actual cost depends on the number of length of",
          "  `T::Keys::key_ids()` which is fixed.",
          "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
          "- DbWrites: `origin account`, `NextKeys`",
          "- DbReads per key id: `KeyOwner`",
          "- DbWrites per key id: `KeyOwner`",
          "# </weight>"
        ],
        "args": [
          {
            "name": "keys",
            "type": "[U8; 32]",
            "type_name": "Keys"
          },
          {
            "name": "proof",
            "type": "Vec<U8>",
            "type_name": "Bytes"
          }
        ]
      },
      {
        "lookup": "a501",
        "name": "purge_keys",
        "docs": [
          "Removes any session key(s) of the function caller.",
          "",
          "This doesn't take effect until the next session.",
          "",
          "The dispatch origin of this function must be Signed and the account must be either be",
          "convertible to a validator ID using the chain's typical addressing system (this usually",
          "means being a controller account) or directly convertible into a validator ID (which",
          "usually means being a stash account).",
          "",
          "# <weight>",
          "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
          "  of `T::Keys::key_ids()` which is fixed.",
          "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
          "- DbWrites: `NextKeys`, `origin account`",
          "- DbWrites per key id: `KeyOwner`",
          "# </weight>"
        ],
        "args": null
      }
    ],
    "calls_value": {
      "type": 381
    },
    "events": [
      {
        "lookup": "a500",
        "name": "NewSession",
        "docs": [
          "New session has happened. Note that the argument is the session index, not the",
          "block number as the type might suggest."
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "session_index"
        ],
        "args_type_name": [
          "SessionIndex"
        ]
      }
    ],
    "events_value": {
      "type": 183
    },
    "errors": [
      {
        "name": "InvalidProof",
        "doc": [
          "Invalid ownership proof."
        ]
      },
      {
        "name": "NoAssociatedValidatorId",
        "doc": [
          "No associated validator ID for account."
        ]
      },
      {
        "name": "DuplicatedKey",
        "doc": [
          "Registered duplicate key."
        ]
      },
      {
        "name": "NoKeys",
        "doc": [
          "No keys are associated with this account."
        ]
      },
      {
        "name": "NoAccount",
        "doc": [
          "Key setting account is not live, so it's impossible to associate keys."
        ]
      }
    ],
    "errors_value": {
      "type": 628
    },
    "index": 165
  },
  {
    "name": "Aura",
    "prefix": "Aura",
    "storage": [
      {
        "name": "Authorities",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<sp_consensus_aura:sr25519:app_sr25519:Public>",
          "PlainTypeValue": 629
        },
        "fallback": "0x00",
        "docs": [
          " The current authority set."
        ]
      },
      {
        "name": "CurrentSlot",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "U64",
          "PlainTypeValue": 631
        },
        "fallback": "0x0000000000000000",
        "docs": [
          " The current slot of this block.",
          "",
          " This will be set in `on_initialize`."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 167
  },
  {
    "name": "AuraExt",
    "prefix": "AuraExt",
    "storage": [
      {
        "name": "Authorities",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<sp_consensus_aura:sr25519:app_sr25519:Public>",
          "PlainTypeValue": 629
        },
        "fallback": "0x00",
        "docs": [
          " Serves as cache for the authorities.",
          "",
          " The authorities in AuRa are overwritten in `on_initialize` when we switch to a new session,",
          " but we require the old authorities to verify the seal when validating a PoV. This will always",
          " be updated to the latest AuRa authorities in `on_finalize`."
        ]
      }
    ],
    "errors": null,
    "errors_value": null,
    "index": 169
  },
  {
    "name": "RelayChainInfo",
    "prefix": "",
    "storage": null,
    "calls_value": {
      "type": 385
    },
    "events": [
      {
        "lookup": "c900",
        "name": "CurrentBlockNumbers",
        "docs": [
          "Current block numbers",
          "[ Parachain block number, Relaychain Block number ]"
        ],
        "args": [
          "U32",
          "U32"
        ],
        "args_name": [
          "parachain_block_number",
          "relaychain_block_number"
        ],
        "args_type_name": [
          "BlockNumber",
          "BlockNumber"
        ]
      }
    ],
    "events_value": {
      "type": 184
    },
    "errors": null,
    "errors_value": {
      "type": 632
    },
    "index": 201
  },
  {
    "name": "EmaOracle",
    "prefix": "EmaOracle",
    "storage": [
      {
        "name": "Accumulator",
        "modifier": "Default",
        "type": {
          "origin": "PlainType",
          "plain_type": "Vec<Tuple:Tuple:[U8; 8]Tuple:U32U32pallet_ema_oracle:types:OracleEntry>",
          "PlainTypeValue": 633
        },
        "fallback": "0x00",
        "docs": [
          " Accumulator for oracle data in current block that will be recorded at the end of the block."
        ]
      },
      {
        "name": "Oracles",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat",
              "Twox64Concat",
              "Twox64Concat"
            ],
            "key_vec": [
              "[U8; 8]",
              "Tuple:U32U32",
              "hydradx_traits:oracle:OraclePeriod"
            ],
            "value": "Tuple:pallet_ema_oracle:types:OracleEntryU32",
            "keys_id": 642,
            "value_id": 643
          }
        },
        "fallback": "0x00",
        "docs": [
          " Orace storage keyed by data source, involved asset ids and the period length of the oracle.",
          "",
          " Stores the data entry as well as the block number when the oracle was first initialized."
        ]
      }
    ],
    "calls_value": {
      "type": 386
    },
    "events_value": {
      "type": 185
    },
    "constants": [
      {
        "name": "MaxUniqueEntries",
        "type": "U32",
        "type_value": 4,
        "constants_value": "28000000",
        "docs": [
          " Maximum number of unique oracle entries expected in one block."
        ]
      }
    ],
    "errors": [
      {
        "name": "TooManyUniqueEntries",
        "doc": null
      },
      {
        "name": "OnTradeValueZero",
        "doc": null
      }
    ],
    "errors_value": {
      "type": 644
    },
    "index": 202
  },
  {
    "name": "MultiTransactionPayment",
    "prefix": "MultiTransactionPayment",
    "storage": [
      {
        "name": "AccountCurrencyMap",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Blake2_128Concat"
            ],
            "key_vec": [
              "AccountId"
            ],
            "value": "U32",
            "keys_id": 0,
            "value_id": 4
          }
        },
        "fallback": "0x00",
        "docs": [
          " Account currency map"
        ]
      },
      {
        "name": "AcceptedCurrencies",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U128",
            "keys_id": 4,
            "value_id": 79
          }
        },
        "fallback": "0x00",
        "docs": [
          " Curated list of currencies which fees can be paid mapped to corresponding fallback price"
        ]
      },
      {
        "name": "AcceptedCurrencyPrice",
        "modifier": "Optional",
        "type": {
          "origin": "Map",
          "n_map_type": {
            "hashers": [
              "Twox64Concat"
            ],
            "key_vec": [
              "U32"
            ],
            "value": "U128",
            "keys_id": 4,
            "value_id": 79
          }
        },
        "fallback": "0x00",
        "docs": [
          " Asset prices from the spot price provider or the fallback price if the price is not available. Updated at the beginning of every block."
        ]
      }
    ],
    "calls": [
      {
        "lookup": "cb00",
        "name": "set_currency",
        "docs": [
          "Set selected currency for given account.",
          "",
          "This allows to set a currency for an account in which all transaction fees will be paid.",
          "Account balance cannot be zero.",
          "",
          "Chosen currency must be in the list of accepted currencies.",
          "",
          "When currency is set, fixed fee is withdrawn from the account to pay for the currency change",
          "",
          "Emits `CurrencySet` event when successful."
        ],
        "args": [
          {
            "name": "currency",
            "type": "U32",
            "type_name": "AssetIdOf"
          }
        ]
      },
      {
        "lookup": "cb01",
        "name": "add_currency",
        "docs": [
          "Add a currency to the list of accepted currencies.",
          "",
          "Only member can perform this action.",
          "",
          "Currency must not be already accepted. Core asset id cannot be explicitly added.",
          "",
          "Emits `CurrencyAdded` event when successful."
        ],
        "args": [
          {
            "name": "currency",
            "type": "U32",
            "type_name": "AssetIdOf"
          },
          {
            "name": "price",
            "type": "U128",
            "type_name": "Price"
          }
        ]
      },
      {
        "lookup": "cb02",
        "name": "remove_currency",
        "docs": [
          "Remove currency from the list of supported currencies",
          "Only selected members can perform this action",
          "",
          "Core asset cannot be removed.",
          "",
          "Emits `CurrencyRemoved` when successful."
        ],
        "args": [
          {
            "name": "currency",
            "type": "U32",
            "type_name": "AssetIdOf"
          }
        ]
      }
    ],
    "calls_value": {
      "type": 387
    },
    "events": [
      {
        "lookup": "cb00",
        "name": "CurrencySet",
        "docs": [
          "CurrencySet",
          "[who, currency]"
        ],
        "args": [
          "AccountId",
          "U32"
        ],
        "args_name": [
          "account_id",
          "asset_id"
        ],
        "args_type_name": [
          "AccountId",
          "AssetIdOf"
        ]
      },
      {
        "lookup": "cb01",
        "name": "CurrencyAdded",
        "docs": [
          "New accepted currency added",
          "[currency]"
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetIdOf"
        ]
      },
      {
        "lookup": "cb02",
        "name": "CurrencyRemoved",
        "docs": [
          "Accepted currency removed",
          "[currency]"
        ],
        "args": [
          "U32"
        ],
        "args_name": [
          "asset_id"
        ],
        "args_type_name": [
          "AssetIdOf"
        ]
      },
      {
        "lookup": "cb03",
        "name": "FeeWithdrawn",
        "docs": [
          "Transaction fee paid in non-native currency",
          "[Account, Currency, Native fee amount, Non-native fee amount, Destination account]"
        ],
        "args": [
          "AccountId",
          "U32",
          "U128",
          "U128",
          "AccountId"
        ],
        "args_name": [
          "account_id",
          "asset_id",
          "native_fee_amount",
          "non_native_fee_amount",
          "destination_account_id"
        ],
        "args_type_name": [
          "AccountId",
          "AssetIdOf",
          "BalanceOf",
          "BalanceOf",
          "AccountId"
        ]
      }
    ],
    "events_value": {
      "type": 186
    },
    "constants": [
      {
        "name": "NativeAssetId",
        "type": "U32",
        "type_value": 4,
        "constants_value": "00000000",
        "docs": [
          " Native Asset"
        ]
      }
    ],
    "errors": [
      {
        "name": "UnsupportedCurrency",
        "doc": [
          "Selected currency is not supported."
        ]
      },
      {
        "name": "ZeroBalance",
        "doc": [
          "Account balance should be non-zero."
        ]
      },
      {
        "name": "AlreadyAccepted",
        "doc": [
          "Currency is already in the list of accepted currencies."
        ]
      },
      {
        "name": "CoreAssetNotAllowed",
        "doc": [
          "It is not allowed to add Core Asset as accepted currency. Core asset is accepted by design."
        ]
      },
      {
        "name": "ZeroPrice",
        "doc": [
          "Fallback price cannot be zero."
        ]
      },
      {
        "name": "FallbackPriceNotFound",
        "doc": [
          "Fallback price was not found."
        ]
      },
      {
        "name": "Overflow",
        "doc": [
          "Math overflow"
        ]
      }
    ],
    "errors_value": {
      "type": 645
    },
    "index": 203
  }
]